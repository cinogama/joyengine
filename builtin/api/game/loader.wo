import je;
import builtin::api::serialize::main;

namespace jeapi::loader
{
    namespace scene
    {
        public func load(u: je::universe, wpath: string)
        {
            return je::file::readall(wpath)
                =>> \dat = dat->dict::deserialize;
                ->> \dat = jeapi::deserialize::world(
                        u, 
                        dat->> \k, v = (k: string, v);,
                        false)
                    ;
                ;
        }

        using step_loader = struct{
            world: je::world,
            data: dict<string, dynamic>,
        }
        {
            public func create(u: je::universe, wpath: string)
            {
                return je::file::readall(wpath)
                    =>> \dat = dat->dict::deserialize;
                    ->> \dat = dat
                        ->> \k, v = (k: string, v);
                        ;
                    ->> \dat = step_loader{
                            world = je::world::create(u),
                            data = dat,
                        }
                        ;
                    ;
            }
            public func instance_entity(self: step_loader)
            {
                jeapi::deserialize::world_entitys(self.world, self.data, false);
            }
            public func instance_system(self: step_loader)
            {
                jeapi::deserialize::world_systems(self.world, self.data, false);
            }
            public func finish(self: step_loader)
            {
                self.world->set_able(true);
                return self.world;
            }
        }
    }

    using prefab = struct{
        m_world: je::world,
        m_prefab: je::entity,
    }
    {
        public func create(w: je::world, wpath: string)
        {
            return je::file::readall(wpath)
                =>> \dat = dat->dict::deserialize;
                =>> \dat = jeapi::deserialize::prefab(w, dat
                    ->> \k, v = (k: string, v);,
                    false)
                    ;
                ->> \e = prefab{m_world = w, m_prefab = e};
                ;
        }
        public func instance(self: prefab)
        {
            return self.m_world->instance(self.m_prefab);
        }
        public func close(self: prefab)
        {
            self.m_prefab->close();
        }
    }
}