// gui.form.input
// 输入窗口

import je::gui;
import builtin::api::gui::inputmgr;

using je::gui;

namespace jeapi::gui::form
{
    public func input(
        title: string, 
        text: string, 
        defaultval: string, 
        okevent: (string)=> void)
    {
        launch(func(inputval: mutable<string>)
        {
            let mut open = true;
            match (BeginAttrOpen(F"{title}##{JobID()}", 
                WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                + WindowsAttribute::ImGuiWindowFlags_NoDocking
                + WindowsAttribute::ImGuiWindowFlags_NoCollapse))
            {
            value(show)?
                if (show)
                {
                    Text(text);
                    do InputText("##", inputval->get)
                        ->> \val = inputval->set(val);
                        ;
                    SameLine();
                    if (Button("还原"))
                        inputval->set(defaultval);

                    if (Button("确定") || (IsWindowFocused() && inputmgr::keypush(je::keycode::ENTER)))
                    {
                        okevent(inputval->get);
                        open = false;
                    }
                    SameLine();
                    if (Button("取消") || (IsWindowFocused() && inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::BACKSPACE])))
                        open = false;
                }
            none?
                open = false;
            }

            End();
            return open;

        }, (new! mutable(defaultval),));
    }
    public func multiinput(
        title: string, 
        text: string, 
        defaultval: string, 
        okevent: (string)=> void)
    {
        launch(func(inputval: mutable<string>)
        {
            let mut open = true;
            match (BeginAttrOpen(F"{title}##{JobID()}", 
                WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize))
            {
            value(show)?
                if (show)
                {
                    Text(text);
                    do InputTextMultilineSize("##", inputval->get, 400., 200.)
                        ->> \val = inputval->set(val);
                        ;
                    SameLine();
                    if (Button("还原"))
                        inputval->set(defaultval);

                    if (Button("确定") || (IsWindowFocused() && inputmgr::keyspush([je::keycode::L_SHIFT, je::keycode::ENTER])))
                    {
                        okevent(inputval->get);
                        open = false;
                    }
                    SameLine();
                    if (Button("取消") || (IsWindowFocused() && inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::BACKSPACE])))
                        open = false;
                }
            none?
                open = false;
            }

            End();

            return open;

        }, (new! mutable(defaultval),));
    }
}