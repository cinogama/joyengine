import woo::std;

import je;
import je::gui;

using je;
using je::gui;

namespace jeapi::gui
{
    using form = struct{
        show: mut bool,
        name: string,
        
        body: (form)=>void,
        size_constraint: mut (real, real, real, real),
        
        callback_close: mut ()=>bool,
        is_unique_form: bool,
        
        _closeable: mut bool,
        _attribute: mut WindowsAttribute,
    }
    {
        let _showing_forms = singleton::create(
            "JE_EDITOR_JEAPI_GUI_FORM_SHOWING_FORMS",
            \ = {}mut: map<string, mut void>;);
            
        public func create(title: string, unique_form: bool, body: (form)=>void)
        {
            return form{
                show = mut false,
                name = title,
                
                body = body,
                size_constraint = mut (50., 50., 2000., 2000.),
                
                callback_close = mut \ = true;,
                is_unique_form = unique_form,
                
                _closeable = mut true,
                _attribute = mut
                    WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                        + WindowsAttribute::ImGuiWindowFlags_NoDocking
                            + WindowsAttribute::ImGuiWindowFlags_NoCollapse,
            };
        }
        
        public func show(self: form)
        {
            if (!self.show)
            {
                if (self.is_unique_form)
                {
                    if (_showing_forms->apply(
                            func(m)
                            {
                                let contained = m->contains(self.name);
                                m[self.name] = do nil;
                                
                                return contained;
                            }))
                    {
                        return false;
                    }
                }
                
                self.show = true;
                launch(func(){
                        let begin = self._closeable
                            ? BeginAttrOpen
                            | \s: string, a: je::gui::WindowsAttribute = option::value(BeginAttr(s, a));
                            ;
                            
                        SetNextWindowSizeConstraints(
                            (self.size_constraint.0, self.size_constraint.1),
                            (self.size_constraint.2, self.size_constraint.3));
                            
                        let tilte = self.name + (self.is_unique_form ? "" | F"##{JobID()}");
                        let show_may_none = begin(tilte, self._attribute);
                        
                        if (show_may_none->or(true))
                            self.body(self);
                            
                        if (! show_may_none->is_value)
                            self->close();
                            
                        End();
                        
                        if (!self.show)
                        {
                            if (self.is_unique_form)
                                _showing_forms->apply(\ m = do m->remove(self.name););
                                
                            return false;
                        }
                        return true;
                        
                    });
                return true;
            }
            return false;
        }
        public func set_size_constraint(self: form, minx: real, miny: real, maxx: real, maxy: real)
        {
            self.size_constraint = (minx, miny, maxx, maxy);
        }
        public func close(self: form)
        {
            self.show = !self.callback_close();
        }
        public func force_close(self: form)
        {
            self.show = false;
        }
        
        public func set_closeable(self: form, closeable: bool)
        {
            self._closeable = closeable;
        }
        public func set_attribute(self: form, attribute: WindowsAttribute)
        {
            self._attribute = attribute;
        }
        
        public func set_callback_close(self: form, callback: ()=>bool)
        {
            self.callback_close = callback;
        }
        
        public func set_apply_attribute(self: form, attribute: WindowsAttribute, apply: bool)
        {
            if (apply)
                self._attribute = self._attribute: int->bor(attribute: int): WindowsAttribute;
            else
                self._attribute = self._attribute: int->band(attribute: int->bnot): WindowsAttribute;
        }
        
        public func set_docking(self: form, dockable: bool)
        {
            self->set_apply_attribute(WindowsAttribute::ImGuiWindowFlags_NoDocking, !dockable);
        }
        public func set_autoresize(self: form, autoresize: bool)
        {
            self->set_apply_attribute(WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize, autoresize);
        }
        public func set_collapse(self: form, collapse: bool)
        {
            self->set_apply_attribute(WindowsAttribute::ImGuiWindowFlags_NoCollapse, !collapse);
        }
        
        public func is_closed(self: form)
        {
            return !self.show;
        }
    }
}
