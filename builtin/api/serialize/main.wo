// api.serialize.main
// 负责提供序列化和反序列化实体、世界的功能

import woo::std;

import je;
import je::internal;

import pkg::iterator;

import builtin::api::gui::errmsg;

using je;

namespace jeapi
{
    namespace prefab_manager
    {
        func combine_prefab_data(a: dict<string, dynamic>, b: dict<string, dynamic>)
        {
            let d = a->to_map;

            let base_components = d->get_or("components", {}: dynamic) as dict<dynamic, dynamic>
                    ->> \k, v = (k: string, v as dict<dynamic, dynamic>
                        ->> \k, v = (k: string, v: string);
                        ->  to_map)
                        ;
                    ->  to_map;

            if (b->contain("name"))
                d->set("name", b["name"]);
            if (b->contain("components"))
            {
                let components = b["components"] as dict<dynamic, dynamic>
                    ->> \k, v = (k as string, member_dats)
                        where member_dats = v as dict<dynamic, dynamic>
                            ->> \k, v = (k as string, v as string);
                        ;
                    ;
                for (let (c, ms) : components)
                {
                    let members = base_components->get_or_set(c, {}mut);
                    for (let (m, v) : ms)
                        members->set(m, v);
                }
            }
            if (b->contain("removed_components"))
            {
                for (let c: b["removed_components"] as array<dynamic>)
                    do base_components->remove(c: string);
            }
            d->set("components", base_components: dynamic);
            do b->get("textures")->>\texs = d->set("textures", texs);;
            do b->get("shaders")->>\shads = d->set("shaders", shads);;
            do b->get("shape")->>\shap = d->set("shape", shap);;

            return d as map<string, dynamic>
                ->  unsafe::cast:<dict<string, dynamic>>;
        }
        public func update_prefab(e: je::entity)
        {
            match (e->internal::get_prefab_path)
            {
            value(path)?
                {
                    let raw_dat = serialize::raw_entity(e, false);
                    match (je::file::readall(path)
                        =>> \dat = dat->dict::deserialize
                            =>> \d = d->get("prefab": dynamic)
                                ->> \v = v: string;
                                ;
                            ;
                    )
                    {
                    value(parent_prefab_path)?
                        return raw_dat->>\dat = dump_prefab_dat(parent_prefab_path, dat);;
                    none?
                        return raw_dat;
                    }
                }
            none?
                return option::none;
            }
        }
        public func load_prefab(path: string)=> option<dict<string, dynamic>>
        {
            match (je::file::readall(path)
                =>> \dat = dat->dict::deserialize
                    ->> \d = d
                        ->> \k, v = (k: string, v);
                        ;
                    ;)
            {
            value(dat)?
                {
                    let parent_prefab = dat->get("prefab")
                        =>> \p = load_prefab(p: string);
                        ->  or({});
                    return option::value(combine_prefab_data(parent_prefab, dat));
                }
            none?
                return option::none;
            }

        }
        func _is_same_shader(a: array<dynamic>, b: array<dynamic>)
        {
            if (a[0]: string == b[0]: string)
            {
                let am = a[1]->unsafe::cast:<dict<string, dynamic>>;
                let bm = b[1]->unsafe::cast:<dict<string, dynamic>>;

                if (am->len != bm->len)
                    return false;

                for (let (m, val): am)
                {
                    if (bm->contain(m) == false)
                        return false;
                    
                    let bval = bm[m];
                    if (val: string != bval: string)
                        return false;
                }
            }
            return true;
        }
        public func dump_prefab_dat(p: string, dat: dict<string, dynamic>)
        {
            let result = dat->to_map;

            result->set("prefab", p: dynamic);

            let components = result->get("components")
                ->> \d=d->unsafe::cast:<dict<string, dict<string, string>>>
                    ->> \k, v = (k, v->to_map);
                    ->  to_map
                    ;
                ->  or({}mut);

            let shaders = result->get("shaders")
                ->> \d = d->unsafe::cast:<array<array<dynamic>>>;
                ->  or([])
                ;
            let textures = result->get("textures")
                ->> \d = d->unsafe::cast:<dict<int, string>>;
                ->  or({})
                ;
            let shape = result->get("shape")
                ->> \d = d as string;
                -> or("");

            let prefab_data = load_prefab(p);
            match (prefab_data
                =>> \d = d->get("components")
                    ->> \d = d->unsafe::cast:<dict<string, dict<string, string>>>;
                    ;)
            {
            value(prefab_component_dat)?
                {
                    let removed_component = []mut: vec<string>;
                    for (let (c, ms) : prefab_component_dat)
                    {
                        let always_keep_member = c->begin_with("Transform::");
                        if (components->contain(c))
                        {
                            let result_ms = components[c];
                            for (let (m, v) : ms)
                            {
                                if (result_ms->get(m)
                                     // always_keep_member: 确保变换组件的数据独立
                                    ->> \vv = !always_keep_member && vv == v;
                                    -> or(false))
                                    assert(result_ms->remove(m));
                            }
                            if (result_ms->empty)
                                assert(components->remove(c));
                        }
                        else
                            removed_component->add(c);
                    }
                    result->set("components", components: dynamic);
                    result->set("removed_components", removed_component: dynamic);
                }
            none?;
            }
            // 比较一下纹理和着色器是否一致，若一致则无视
            match (prefab_data
                =>> \d = d->get("shaders")
                ->> \d = d->unsafe::cast:<array<array<dynamic>>>;
                ;)
            {
            value(prefab_shader_dat)?
                {
                    let mut remove_shaders = true;
                    if (prefab_shader_dat->len == shaders->len)
                    {
                        for (let (idx, pshad) : prefab_shader_dat->iter |> iterator::enumerate)
                        {
                            if (!_is_same_shader(shaders[idx], pshad))
                            {
                                remove_shaders = false;
                                break;
                            }
                        }
                        if (remove_shaders)
                            do result->remove("shaders");
                    }
                }
            none?;
            }
            match (prefab_data
                =>> \d = d->get("textures")
                ->> \d = d->unsafe::cast:<dict<int, string>>;
                ;)
            {
            value(prefab_texture_dat)?
                {
                    let mut remove_textures = true;
                    if (prefab_texture_dat->len == textures->len)
                    {
                        for (let (idx, ptex) : prefab_texture_dat)
                        {
                            if (textures->contain(idx) == false || textures[idx] != ptex)
                            {
                                remove_textures = false;
                                break;
                            }
                        }
                        if (remove_textures)
                            do result->remove("textures");
                    }
                }
            none?;
            }
            match (prefab_data
                =>> \d = d->get("shape")
                ->> \d = d: string;
                ;)
            {
            value(prefab_shape)?
                if (shape == prefab_shape)
                    do result->remove("shape");
            none?;
            }
            
            return result->unsafe::cast:<dict<string, dynamic>>;
        }
        public func try_dump_prefab_dat(e: je::entity, dat: dict<string, dynamic>)
        {
            match (e->internal::get_prefab_path)
            {
            value(prefab)?
                return dump_prefab_dat(prefab, dat);
            none?
                return dat;
            }
            
        }
    }
    namespace serialize
    {        
        func has_bad_shader(e: je::entity)
        {
            static let BadShadersUniform = je::typeinfo::load("Editor::BadShadersUniform")->unwrap();
            return e->get_component(BadShadersUniform)->is_value;
        }
        public func varify_all_shader_is_valid_in_world(w: je::world)
        {
            // 检查所有世界中所有实体是否有非法的shader？
            // 返回所有shader非法的实体
            return w->get_all_entities([])
                -> forall(\e = has_bad_shader(e);)
                ;
        }

        alias texture_inform = string;
        func get_entity_texture_passes(saving_entity: je::entity)=> dict<int, option<texture_inform>>
        {
            // 获取实体绑定的通道和纹理信息
            return saving_entity->get_textures
                ->> \pass, tex = (pass, tex->path);
                ;
        }

        alias ShaderUniformVariablesDictT = dict<string, array<dynamic>>;
        //                          uniform_name uniform_vals
        func get_entity_shaders_informs(saving_entity: je::entity)=> array<(string, ShaderUniformVariablesDictT)>
        {
            // 获取实体绑定的shader和uniform信息, uniform 信息仅包括int/float/float2，3，4类型的信息
            return saving_entity-> get_shaders
                ->> \shad = (shad->path, shad_uniforms_dats())
                    where shad_uniforms_dats = func()
                        {
                            let result = {}mut: map<string, array<dynamic>>;
                            for(let (name, uniform_val) : shad->get_uniforms())
                            {
                                if (name->begin_with("JOYENGINE_"))
                                    continue; // 引擎的内置shader-uniform变量，跳过
                                match (uniform_val)
                                {
                                    integer(n)? 
                                        result->set(name, [n: dynamic]);
                                    integer2((x, y))?
                                        result->set(name, [x: dynamic, y: dynamic]);
                                    integer3((x, y, z))?
                                        result->set(name, [x: dynamic, y: dynamic, z: dynamic]);
                                    integer4((x, y, z, w))?
                                        result->set(name, [x: dynamic, y: dynamic, z: dynamic, w: dynamic]);
                                    float(x)?
                                        result->set(name, [x: dynamic]);
                                    float2((x, y))?
                                        result->set(name, [x: dynamic, y: dynamic]);
                                    float3((x, y, z))?
                                        result->set(name, [x: dynamic, y: dynamic, z: dynamic]);
                                    float4((x, y, z, w))?
                                        result->set(name, [x: dynamic, y: dynamic, z: dynamic, w: dynamic]);
                                    texture(_)? /* do nothing */;
                                    others? /* do nothing */;
                                }
                            }
                            return result->to_dict;
                        }
                    ;
                ;
        }
        public func raw_entity(saving_entity: je::entity, need_euid: bool)=> option<dict<string, dynamic>>
        {
            return
                saving_entity
                    ->  internal::get_components_types()
                    ->  forall(\t = !t->name->begin_with("Editor::");)
                    =>> \t = component_instance->is_value ? [(t, component_instance->unwrap)] | []
                        where
                            component_instance = saving_entity->get_component(t);
                    ->> \tc = (t->name, collect_members)
                        where 
                            collect_members = c->get_members()
                                ->> \(name, type, addr) = (
                                        name, 
                                        towoo::unsafe::dynamic_parser::saving(type, addr)
                                            ->or_do(func(){
                                                logerr(F"Unable to save '{name}' of '{t->name}'.");
                                                return "<?>";
                                            }))
                                    ;
                                ->  mapping,
                                (t, c) = tc;
                    ->  mapping
                    // 如果一个实体没有任何组件，那么就等于不存在，实际上编辑器应该避免只有编辑器
                    // 组件的实体出现在世界中，但是如果真的发生了，那么就视为option::none;
                    ->  \m = m->empty? option::none | option::value(m);
                    ->> \m = 
                        {
                            ["name"] = saving_entity->internal::name: dynamic, 
                            ["components"] = m: dynamic,
                            // 如果纹理是内置的，也就是说这个纹理实际上没有路径，那么跳过它
                            ["textures"] = saving_entity->get_entity_texture_passes
                                =>> \k, v = used_texture_id_pass->find(k)->is_value && v->is_value 
                                    ? {[k] = v->unwrap} 
                                    | {}
                                    ; 
                                : dynamic,
                            ["shaders"] = saving_entity->get_entity_shaders_informs->>\(sname, sdata) = [sname: dynamic, sdata: dynamic];: dynamic,
                            ["shape"] = saving_entity->get_shape=>>\shape = shape->path;->or(""): dynamic,
                        }
                        where used_texture_id_pass = saving_entity->get_shaders()
                            =>> \shader = shader->get_uniforms()
                                    ->  unmapping
                                    =>> \nv = nv...
                                        ->  func(name, uniformval)
                                            {
                                                if (!name->begin_with("JOYENGINE_"))
                                                {
                                                    match (uniformval)
                                                    {
                                                    texture(id)?
                                                        return [id];
                                                    _?;
                                                    }
                                                }
                                                return [];
                                            }
                                        ;
                                ;
                            ->> \id = (id, nil);
                            ->  mapping
                            ->  unmapping // remove all repeated elems.
                            ->> \idn = idn[0];
                        ;
                    ->> \dat = need_euid
                        ? dat->apply(
                            "euid", 
                            saving_entity
                                ->internal::get_entity_uid
                                ->or(0: handle: je::entity::internal::euid_t): handle: int: dynamic)
                        | dat
                        ;
                    ;
        }
        public func entity(saving_entity: je::entity, need_euid: bool)=> option<dict<string, dynamic>>
        {
            return raw_entity(saving_entity, need_euid)
                ->> \dat = prefab_manager::try_dump_prefab_dat(saving_entity, dat);
                ;
        }
        public func world(w: je::world, need_euid: bool)=> result<dict<string, dynamic>, array<je::entity>>
        {
            let bad_shader_entity = varify_all_shader_is_valid_in_world(w);
            if (!bad_shader_entity->empty)
                return result::err(bad_shader_entity);

            static let INVISABLE = je::typeinfo::load("Editor::Invisable")->unwrap;

            alias entity_info_t = dict<string, dynamic>;

            let entities_json_list = 
                w->get_all_entities([])
                    // 跳过编辑器上的不可见实体
                    ->  forall(\e = e->get_component(INVISABLE)->is_none;)
                    =>> \e = oe->is_value ? [oe->unwrap] | [] where oe = serialize::entity(e, need_euid);
                    ;

            let editing_systems_type_list = 
                w->get_all_systems
                    ->> \st = st->name;
                    ->  forall(\n = !n->begin_with("Editor::");)
                    ;
                    
            return result::ok({
                ["name"] = w->name: dynamic,
                ["entities"] = entities_json_list: dynamic,
                ["systems"] = editing_systems_type_list: dynamic,
                // ["runtime_systems"] = runtime_systems_type_list: dynamic,
            });
        }
    }

    namespace deserialize
    {
        func restore_shader_of_entity<ResourceT>(shad: ResourceT, uname: string, val: array<dynamic>)
        {
            assert(val->len > 0);
            if (val[0] is int)
            {
                if (val->len == 1)
                    _restore_shader_of_entity(shad, uname, val[0] as int);
                else if (val->len == 2)
                    _restore_shader_of_entity(shad, uname, (val[0] as int, val[1] as int));
                else if (val->len == 3)
                    _restore_shader_of_entity(shad, uname, (val[0] as int, val[1] as int, val[2] as int));
                else if (val->len == 4)
                    _restore_shader_of_entity(shad, uname, (val[0] as int, val[1] as int, val[2] as int, val[3] as int));
                else
                    std::panic("invalid uniform value length when restore.");
            }
            else if (val[0] is real)
            {
                if (val->len == 1)
                    _restore_shader_of_entity(shad, uname, val[0] as real);
                else if (val->len == 2)
                    _restore_shader_of_entity(shad, uname, (val[0] as real, val[1] as real));
                else if (val->len == 3)
                    _restore_shader_of_entity(shad, uname, (val[0] as real, val[1] as real, val[2] as real));
                else if (val->len == 4)
                    _restore_shader_of_entity(shad, uname, (val[0] as real, val[1] as real, val[2] as real, val[3] as real));
                else
                    std::panic("invalid uniform value length when restore.");
            }
            else
                std::panic("invalid uniform type when restore.");
        }
        // 用于设置实体中shader的uniform参数，如果shader是挂掉的，那么设置uniform到BadShadersUniform里等待更新
        func _restore_shader_of_entity<RType, VType>(shad: RType, uname: string, val: VType)
        {
            if (shad is je::graphic::shader)
                shad->set_uniform(uname, val);
            else
                shad->store_uniform_dat_for_bad_shader_update(uname, val);
        }

        func _typeinfo_or_warning(typename: string)
        {
            let tinfo = je::typeinfo::load(typename);
            if (!tinfo->is_value)
            {
                je::logerr(F"无法找到{typename}，请检查是否有模块未加载成功");
                jeapi::gui::errmsg("找不到类型", 
                    F"无法找到{typename}，请检查是否有模块未加载成功");
            }
            return tinfo;
        }

        func _load_entity_or_prefab(
            w: je::world, 
            mut entity_dat: dict<string, dynamic>, 
            in_editor: bool, 
            f: (je::world, array<je::typeinfo>)=> je::entity)=> option<je::entity>
        {
            let prefab_path = entity_dat->get("prefab")->>\path = path: string;;
            match (prefab_path=>>\path = prefab_manager::load_prefab(path);)
            {
            value(prefab_data)?
                entity_dat = prefab_manager::combine_prefab_data(prefab_data, entity_dat);
            none?;
            }
            let component_types_dat = entity_dat
                ->  get("components")
                ->> \cs = cs as dict<dynamic, dynamic>
                    ->  unmapping
                    ->> \kv = (kv[0] as string, kv[1] as dict<dynamic, dynamic>);
                    ->> \td = (_typeinfo_or_warning(td[0]), 
                            td[1]->unmapping
                                ->> \p = (p[0] as string, p[1] as string);
                                ->  mapping)
                        ;
                    ->  forall(\td = td[0]->is_value;)
                    ->> \td = (td[0]->unwrap, td[1]);
                    ;
                ->  or([]);

            if (component_types_dat->empty)
                return option::none;

            // 开始加载shader
            let shaders_and_dat = entity_dat->get("shaders")
                ->> func(shaders: dynamic)
                    {
                        let shads = []mut: vec<(option<graphic::shader>, string, dict<dynamic, dynamic>)>;
                        for (let shader_path_dat_pair : shaders: array<dynamic>)
                        {
                            let spath = shader_path_dat_pair: array<dynamic>[0] as string;
                            let s = graphic::shader::load(w->get_universe->option::value, spath);
                            shads->add((s, spath, shader_path_dat_pair: array<dynamic>[1] as dict<dynamic, dynamic>));
                        }
                        return shads->to_array;
                    }
                ->> func(arr)
                    {
                        if (! arr->forall(\d = d[0]->is_value == false;)->empty)
                            return result::err(arr->>\d = (d[1], d[2]););
                        else
                            return result::ok(arr->>\d = (d[0]->unwrap, d[2]););
                    }
                ;

            let entity_instance = f(
                w, component_types_dat
                    ->> \tp = tp[0];
                    // 检查加载的shader是否有非法的，如果有，那么实体要带上一个BadShadersUniform组件
                    ->  connect(in_editor && shaders_and_dat->>\r=r->is_err;->or(false)
                            ? [je::typeinfo::load("Editor::BadShadersUniform")->unwrap] 
                            | [])
                    ->  connect(in_editor ? [je::typeinfo::load("Editor::Name")->unwrap] | [])
                    ->  connect(in_editor && prefab_path->is_value ? [je::typeinfo::load("Editor::Prefab")->unwrap] | [] )
                );

            if (in_editor && prefab_path->is_value)
            {
                entity_instance->internal::set_prefab_path(prefab_path->unwrap);
            }

            // 开始应用数据
            do component_types_dat
                ->> \(ctype, dat) = compmaynotfound
                        ->> \comp = comp->get_members
                            ->> \(mname, mtype, mvalue) = dat->get(mname)
                                ->> func(mdat){
                                    if (!towoo::unsafe::dynamic_parser::restoring(mtype, mvalue, mdat as string))
                                        logerr(F"Unable to restore '{mname}' of '{ctype->name}'.");
                                    }
                                ;
                            ;
                    where compmaynotfound = entity_instance->get_component(ctype)
                    ;
                ;
            // 考虑一下异步加载？
            // 开始加载shader
            match (shaders_and_dat->or(result::ok([])))
            {
            ok(dats)?
                {
                    for (let (shad, uniform_vars) : dats)
                    {
                        for (let (uname, uval): uniform_vars)
                            restore_shader_of_entity(shad, uname as string, uval as array<dynamic>);
                    }
                    entity_instance->set_shaders(dats->>\shad_and_uvars = shad_and_uvars[0];);
                }
            err(dats)?
                if (in_editor)
                {
                    for (let (path, uniform_vars) : dats)
                    {
                        let badshad = entity_instance->internal::store_name_for_bad_shader_update(path);

                        for (let (uname, uval): uniform_vars)
                            restore_shader_of_entity(badshad, uname as string, uval as array<dynamic>);
                    }
                }
            }

            // 开始加载texture
            do entity_dat->get("textures")
                ->> func(textures)
                    {
                        for (let (passid, path) : textures: dict<dynamic, dynamic>)
                            do graphic::texture::load(w->get_universe->option::value, path as string)
                                ->> \tex = entity_instance->bind_texture(passid as int, option::value(tex));
                                ;
                    };

            // 加载vertex
            do entity_dat->get("shape")
                =>> \shape = vertex_path != "" 
                    ? graphic::vertex::load(w->get_universe->option::value, vertex_path)
                    | option::none
                    where vertex_path = shape as string
                    ;
                ->> \vertex = entity_instance->set_shape(option::value(vertex));
                ;

            if (in_editor)
                do entity_dat
                    ->  get("name")
                    ->> \n = entity_instance->internal::set_name(n as string);;

            return option::value(entity_instance);
        }

        public func entity(
            w: je::world, 
            entity_dat: dict<string, dynamic>, 
            in_editor: bool)
        {
            return _load_entity_or_prefab(w, entity_dat, in_editor, je::world::add_entity);
        }
        public func prefab(
            w: je::world, 
            entity_dat: dict<string, dynamic>, 
            in_editor: bool)
        {
            return _load_entity_or_prefab(w, entity_dat, in_editor, je::world::add_prefab);
        }

        public func world_entitys(w: je::world, dat: dict<string, dynamic>, in_editor: bool)
        {
            do dat->get("entities")
                ->> \es = es as array<dynamic>
                    ->> \edat = deserialize::entity(w, entity_dat, in_editor)
                        where entity_dat = edat as dict<dynamic, dynamic>->>\k, v = (k as string, v);
                        ;
                    ;
                ;
        }
        public func world_systems(w: je::world, dat: dict<string, dynamic>, in_editor: bool)
        {
            if (in_editor)
            {
                do dat->get("name")->>\name = w->set_name(name as string);;
                // 仅用于检查
                do dat->get("runtime_systems")
                    ->> \d = d as array<dynamic>
                        ->> \tname = _typeinfo_or_warning(tname as string);
                        ;
                    ;
            }
            else
                do dat->get("runtime_systems")
                    ->> \d = d as array<dynamic>
                        ->> \tname = type_may_none
                            ->> \type = w->add_system(type);
                            where type_may_none = _typeinfo_or_warning(tname as string)
                            ;
                        ;
                    ;
            do dat->get("systems")
                ->> \d = d as array<dynamic>
                    ->> \tname = type_may_none
                        ->> \type = w->add_system(type);
                        where type_may_none = _typeinfo_or_warning(tname as string)
                        ;
                    ;
                ;
        }
        public func world(u: je::universe, dat: dict<string, dynamic>, in_editor: bool)=> je::world
        {
            let w = u->je::world::create;

            world_entitys(w, dat, in_editor);
            world_systems(w, dat, in_editor);

            return w;
        }
    }
}

