// api.dbg.main
// debug相关API，通常是些不怎么安全合适的接口函数

import je;
import builtin::api::gui::form::msg;

namespace jeapi::debug
{
    public using Eeid = je::entity::editor::euid_t
    {
        namespace editor
        {
            public func select(self: option<Eeid>)
            {
                // 这个类型转换确实很屑，嘻嘻嘻……
                je::entity::editor::set_editing_uid(self->>\v=v as Eeid: handle: je::entity::editor::euid_t;);
            }
            public func editing()
            {
                // 这个类型转换还是很屑，嘻嘻嘻……
                return je::entity::editor::get_editing_uid()->>\v=v as je::entity::editor::euid_t: handle: Eeid;;
            }
        }
        public func dosth(self: Eeid, f: (option<je::entity>)=>void)
        {
            safety_entity_operation(self, f);
        }
        public func justdo(self: Eeid, f: (je::entity)=>void)
        {
            self->dosth(func(oe){
                match (oe)
                {
                value(e)? f(e);
                none? gui::form::errmsg("失败", F"操作无法完成，不存在的实体：\n{self}");
                }
            });
        }
    }

    public using EntityChilds = struct{
        e: je::entity, 
        uid: Eeid,
        childs: array<EntityChilds>
    };

    public func get_entity_editor_id(entity: je::entity)=> Eeid
    {
        return entity->editor::get_entity_uid: handle: Eeid;
    }
    
    alias OperationCallback = (option<je::entity>)=>void;

    let request_list = {}mut: map<Eeid, vec<OperationCallback>>;
    func safety_entity_operation(euid: Eeid, operation: OperationCallback)
    {
        // 将UID放进处理队列中，如果实际上没有找到此实体，那么就弹窗报警
        request_list->getorset(euid, []mut)->add(operation);
    }

    public func update_safety_entity_operation_requests(universe: je::universe)
    {
        // 找个地方每帧/几帧调用一下
        if (request_list->empty)
            return;

        let current_request = {}mut: typeof(request_list);
        current_request->swap(request_list);

        // 获取所有的世界，并从中获取所有的实体
        do universe->editor::get_all_worlds
            =>> \w = w->editor::get_all_entities;
            ->> func(e)
            {
                let euid = get_entity_editor_id(e);
                do current_request->get(euid)
                    ->> \jobs = jobs
                        ->> \job = job(option::value(e));;
                    ->> \_ = current_request->remove(euid);
                    ;
            };

        for (let _, jobs : current_request)
        {
            do jobs->> \job = job(option::none);;
            // gui::form::errmsg("失败", F"操作无法完成，不存在的实体：\n{euid}");;
        }
    }

     // 从世界中获取带有层级关系的实体
    func get_entity_and_childs(iter: je::entity::editor::entity_iter)=> array<EntityChilds>
    {
        let result = []mut: vec<EntityChilds>;
        for (let curentity : iter)
        {                
            result->add(EntityChilds{
                e = curentity, 
                uid = get_entity_editor_id(curentity),
                childs = get_entity_and_childs(iter->childs_iter),
                });
        }
        return result->unsafe::cast:<array<EntityChilds>>;
    }
    public func get_all_entities_layer_from_world(world: je::world)
    {
        return get_entity_and_childs(world->editor::top_entity_iter);
    }
    public func find_entity_and_child_by_instance(world: je::world, e: je::entity)
    {
        func find_entity(iter: je::entity::editor::entity_iter, eid: Eeid)=> option<EntityChilds>
        {
            for (let curentity : iter)
            {                
                if (get_entity_editor_id(curentity) == eid)
                    return option::value(
                        EntityChilds{
                            e = curentity, 
                            uid = get_entity_editor_id(curentity),
                            childs = get_entity_and_childs(iter->childs_iter),
                        }
                    );
                match (find_entity(iter->childs_iter, eid))
                {
                value(e)? return value(e);
                none?;
                }
            }
            return option::none;
        }
        return find_entity(world->editor::top_entity_iter, get_entity_editor_id(e));
    }
}
