// api.dbg.main
// debug相关API，通常是些不怎么安全合适的接口函数

import je;
import builtin.api.gui.form.msg;

namespace jeapi::debug
{
    public alias uid_t = string;

    public using EntityChilds = struct{
        e: je::entity, 
        uid: uid_t,
        childs: array<EntityChilds>
    };

    public func get_entity_editor_uid(entity: je::entity)
    {
        static let EditorAnchorTypeID = je::typeinfo::load("Editor::Anchor")->val;
                      
        // 确保实体拥有该有的锚，如果没有就现场创建一个
        let anchor_uid = entity->editor::get_component(EditorAnchorTypeID)
            -> or(\= entity->editor::add_component(EditorAnchorTypeID);)
            -> editor::get_member("uid")
            -> val...
            -> \type, nval = nval->to_string(type);
            ;
        return anchor_uid;
    }

    let request_list = {}mut: map<uid_t, vec<(je::entity)=>void>>;
    public func safety_entity_operation(euid: uid_t, operation: (je::entity)=>void)
    {
        // 将UID放进处理队列中，如果实际上没有找到此实体，那么就弹窗报警
        request_list->getorset(euid, []mut)->add(operation);
    }
    public func get_all_entities_layer_from_world(world: je::world)
    {
        let current_request = {}mut: typeof(request_list);
        current_request->swap(request_list);

        // 从世界中获取带有层级关系的实体
        func get_entity_and_childs(
            iter: je::entity::editor::entity_iter, 
            requests: typeof(request_list))=> array<EntityChilds>
        {
            let result = []mut: vec<EntityChilds>;
            for (let curentity : iter)
            {
                let euid = get_entity_editor_uid(curentity);
                
                match (requests->get(euid))
                {
                value(job_queue)?
                {
                    do job_queue->>\job = job(curentity);;
                    requests->remove(euid);
                }
                none?
                    ; // Do nothing.
                }
                
                result->add(EntityChilds{
                    e = curentity, 
                    uid = euid,
                    childs = get_entity_and_childs(
                        iter->childs_iter, requests),
                    });
            }
            return result->unsafe::cast:<array<EntityChilds>>;
        }
        let result = get_entity_and_childs(world->editor::top_entity_iter, current_request);
        
        for (let euid, jobs : current_request)
        {
            do jobs ->> \_ = gui::form::errmsg("失败", F"操作无法完成，不存在的实体：\n{euid}");;
        }

        return result;
    }
}
