// cpp.main
// 用于管理外部模块


import woo.std;
import je.gui;

import pkg.process;
import pkg.filesystem;
import pkg.thread;

using je::gui;

namespace editor
{
    // 启动个进程，等待进程结束，如果进程成功执行并以0作为退出码，则返回true
    func start_process(process: string, args: array<string>)
    {
        return process::create(process, args)
            =>> \pid = pid->wait->okay;
            ->> \status = status == 0: process::status_t ? true | false;
            ->  valor(false);
    }

    using CxxProjectBuildConfig = struct {
        // 配置名称
        config: string,

        // 生成的cmake内容
        cmake: string,

        // 当前配置编译前，CMake需要的命令行参数
        cmake_option: array<string>,

        // 当前配置编译时执行的命令
        built_command: array<string>,
    };

    public using CxxProject = struct {
        name: string, // 模块的名称
        path: filesys::path_t, // 模块所在路径，仅此而已
        configs: dict<string, CxxProjectBuildConfig>, // 可用的生成配置
        module_instance: mut option<handle>,
        project: Project,
    }
    {
        // Cmake所在路径，项目会使用此路径指示的cmake
        let CMAKE_PATH = filesys::normalize(F"{std::exepath()}/builtin/cmake/bin/cmake.exe"); 
        let MSVC_PATH = filesys::normalize(F"{std::env("MSBUILD")->val}/MSBuild.exe");

        // C++模块样例，创建项目文件时会复制这个目录
        let CXX_PROJECT_EXAMPLE_PATH = filesys::normalize(F"{std::exepath()}/builtin/cxxproject");

        // 引擎的头文件路径
        public let ENGINE_HEADER_PATH = filesys::normalize(F"{std::exepath()}/builtin/include");

        let MSVC_TARGET_KEYWORDS = {
            [2017] = "Visual Studio 15 2017",
            [2019] = "Visual Studio 16 2019",
            [2022] = "Visual Studio 17 2022",
        };

        let USING_MSVC_TARGET = MSVC_TARGET_KEYWORDS[
            MSVC_TARGET_KEYWORDS
                ->   unmapping
                ->> \ver_and_config = ver_and_config[0];
                ->  forall(\ver = std::env("MSBUILD")->val->find(ver as int: string) != -1;)
                ->  reduce(\l, r = l > r ? l | r;)
                ->  val
            ];


        // 引擎的库目录
        let ENGINE_CORE_LIBRARYS_LOCATE_PATH = filesys::normalize(std::exepath());
        public using LibraryFiles = struct{
            runtime_dynamic_libs: array<string>,
            link_static_libs: array<string>,
        }
        {
            public func get_dynamic_libs(self: LibraryFiles)
            {
                return self.runtime_dynamic_libs;
            }
            public func get_static_libs(self: LibraryFiles)
            {
                return self.link_static_libs;
            }
            public func get_all_files(self: LibraryFiles)
            {
                return self->get_dynamic_libs->connect(self->get_static_libs);
            }
        }
        let ENGINE_CORE_LIBRARYS_PATHS =
            {
                ["win32_debug_x86"] = LibraryFiles{
                    runtime_dynamic_libs = [F"libwoo32_debug.dll", F"libjoyecs32_debug.dll",],
                    link_static_libs = [F"libwoo32_debug.lib", F"libjoyecs32_debug.lib",]
                },
                ["win32_release_x86"] = LibraryFiles{
                    runtime_dynamic_libs = [F"libwoo32.dll", F"libjoyecs32.dll",],
                    link_static_libs = [F"libwoo32.lib", F"libjoyecs32.lib",]
                },
                ["win32_debug_x64"] = LibraryFiles{
                    runtime_dynamic_libs = [F"libwoo_debug.dll", F"libjoyecs_debug.dll",],
                    link_static_libs = [F"libwoo_debug.lib", F"libjoyecs_debug.lib",]
                },
                ["win32_release_x64"] = LibraryFiles{
                    runtime_dynamic_libs = [F"libwoo.dll", F"libjoyecs.dll",],
                    link_static_libs = [F"libwoo.lib", F"libjoyecs.lib",]
                },
            }: dict<string, LibraryFiles>;

        public func get_lib_files_by_config(config: string)
        {
            return ENGINE_CORE_LIBRARYS_PATHS->get(config);
        }

        alias platform_t = string;

        public func update_engine_file(cxx_proj_path: filesys::path_t)
        {
            using filesys;
        
            // 从引擎根目录更新引擎相关头文件和库文件
            if (!exist(cxx_proj_path))
                return result::err(F"无法找到C++模块项目，{cxx_proj_path}目录不存在");

            // 1. 删除engine目录
            do remove(cxx_proj_path/"engine")->unwarp;
            do mkdir(cxx_proj_path/"engine")->unwarp;
            do mkdir(cxx_proj_path/"engine"/"library")->unwarp;

            // 2. 把新的engine移过来，把引擎的头文件复制过来
            let r = copy(ENGINE_HEADER_PATH, cxx_proj_path/"engine"/"include");

            if (r->iserr)
                return result::err(F"复制引擎相关文件失败({r->error->val})");

            // 2. 开始复制库文件, 顺便确认支持的平台
            let platform_support = {}mut : map<platform_t, bool>;

            for (let platform, files : ENGINE_CORE_LIBRARYS_PATHS)
            {
                do files->get_all_files
                    ->> \name = copy(
                            ENGINE_CORE_LIBRARYS_LOCATE_PATH/name, 
                            cxx_proj_path/"engine"/"library"/name
                            )
                        ;
                    ->> \r = r->isok;
                    ->reduce(\l, r = l ? r | l;)
                    ->> \r: bool = platform_support->set(platform, r);
                    ;
            }

            return result::ok(platform_support);
        }

        public func generate_module_config(project: Project, name: string, cxx_proj_path: filesys::path_t, platform_support: map<platform_t, bool>)
        {      
            using filesys;
            
            let enabled_generating = platform_support
                ->forall(\_, enable = enable;)
                ->unmapping
                ->> \conf_enab = conf_enab[0];
                ;
                
            let generating_results = enabled_generating
                ->> \conf: string = (conf, generate_cmake_doc(conf));
                ;

            let failed_generating = generating_results
                ->forall(\r = r[1]->iserr;);

            if (!failed_generating->empty)
            {
                for (let _, r : failed_generating ->> \r = r[1]->error->val;)
                    je::logerr(r);

                return result::err(F"创建模块的CMake文件时失败：\n{
                    failed_generating
                        ->> \r = r[1]->error->val;
                        ->reduce(\l, r = l + "\n" + r;)
                        ->val
                }");
            }

            // 3. 给支持的平台生成CMake文件，并且把配置信息存档
            assert(writeall(cxx_proj_path/"config.inf", {
                ["name"] = name: dynamic,
                ["path"] = project->make_path_normalize(cxx_proj_path): dynamic,
                ["conf"] = enabled_generating: dynamic,
            }: string->chars->forall(\c = !c->isspace();)->str));
            
            for (let _, config : generating_results ->> \c = c[1]->okay->val;)
            {
                // 3.1 把生成出来的CMake保存起来
                let aim_cmake_dir = cxx_proj_path/"builder"/config.config;
                if (!exist(aim_cmake_dir))
                {
                    // 对应目录不存在，在这里创建一下，失败就寄掉
                    let mkdir_result = mkdir(aim_cmake_dir);
                    if (mkdir_result->iserr)
                        return result::err(F"创建目录失败({mkdir_result->error->val})");
                }
                if (!writeall(aim_cmake_dir/"CMakeLists.txt", 
                    config.cmake
                        ->replace("$$JEMODULE_PROJECT_NAME$$", name->replace(" ", "_"))
                        ->replace("$$JEMODULE_BUILD_CONFIG$$", config.config)))
                    return result::err(F"无法写入'{aim_cmake_dir}/CMakeLists.txt'");
            }

            // 4. 生成主CMakeLists
            let cmake_head = 
    @"# C++ Module for JoyECS
    cmake_minimum_required (VERSION 3.8)

    project ("$$JEMODULE_PROJECT_NAME$$")
    set(CMAKE_CXX_STANDARD 17)

    if(MSVC) 
        add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/source-charset:utf-8>")
        add_compile_options("$<$<C_COMPILER_ID:MSVC>:/source-charset:utf-8>")
    endif()

    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/${JEMODULE_BUILT_AIM}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/${JEMODULE_BUILT_AIM}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/${JEMODULE_BUILT_AIM}")
    set(LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/build")
    "@;
            let cmake_subdirs = enabled_generating
                ->map(func(conf: string){
                    let check_if_need_build = F"if ($\{JEMODULE_BUILT_AIM\} STREQUAL \"{conf}\")";
                    let include_subdir = F"    add_subdirectory(\"builder/{conf}\")";
                    return F"{check_if_need_build}\n{include_subdir}";
                })
                ->reduce(\l: string, r: string = F"{l}\nelse{r}";)
                ->map(\s: string = F"{s}\nelse()\n    message(FATAL_ERROR \"Unknown built aim.\")\nendif()";);

            if (!cmake_subdirs->has)
            {
                std::panic("没有可用的配置，这绝不应该发生");
                return result::err("没有可用的配置，请检查引擎目录相关文件是否丢失");
            }

            if (!writeall(cxx_proj_path/"CMakeLists.txt", 
                    F"{cmake_head}\n{cmake_subdirs->val}\n"
                        ->replace("$$JEMODULE_PROJECT_NAME$$", name->replace(" ", "_"))))
                return result::err(F"无法写入'{cxx_proj_path}/CMakeLists.txt'");

            return result::ok(generating_results);
        }

        public func start(name: string, locpath: string, proj: Project)=> result<CxxProject, string>
        {
            using filesys;
            using filesys;

            // 在指定目录下创建Cxx项目目录
            let cxx_proj_path = normalize(locpath)/F"{name}.jemodule4";
            if (exist(cxx_proj_path))
                return result::err(F"无法创建C++模块项目，{cxx_proj_path}目录已经存在");

            let r = copy(CXX_PROJECT_EXAMPLE_PATH, cxx_proj_path)
                ->  flip
                ->> \errid = F"复制文件失败({errid})";
                ->  flip
                =>> \_ = update_engine_file(cxx_proj_path);;
            if (r->iserr)
            {
                do remove(cxx_proj_path)->unwarp;
                return r->fail;
            }
            let platform_support = r->okay->val;

            match (generate_module_config(proj, name, cxx_proj_path, platform_support))
            {
            err(reason)?
            {
                do remove(cxx_proj_path)->unwarp;
                return result::err(reason);
            }
            ok(generating_results)?
            {                   
                let git_ignore_file = 
@"# Ignore cpp module's useless files.
# Builtin files
/build/
/engine/
/msvcbuild_*/
/runtime/

# Auto-generate files
/builder/
/CMakeLists.txt
/loader.hpp
"@;
                if (!writeall(cxx_proj_path/".gitignore", git_ignore_file))
                {
                    do remove(cxx_proj_path)->unwarp;
                    return result::err(F"无法写入'{cxx_proj_path}/.gitignore'");
                }

                let created_module = CxxProject{ 
                    name = name, 
                    path = cxx_proj_path, 
                    configs = generating_results
                        ->mapping
                        ->map(\k: string, v: result<CxxProjectBuildConfig, string> 
                            = (k, v->okay->val);),
                    module_instance = mut option::none,
                    project = proj,
                    };

                // 最后，编译一下当前平台
                created_module->update_compile(je::platform());

                return result::ok(created_module);
            }
            }
        }

        func search_file_in(dir: filesys::path_t, exname: string)=> option<filesys::path_t>
        {
            using filesys;

            for (let _, p : subpath(dir)->okay->val)
            {
                if (isdir(p))
                {
                    let r = search_file_in(p, exname);
                    if (r->has)
                        return r;
                }
                else if (extension(p)->upper == exname->upper)
                    return option::value(p);
            }
            return option::none;
        }
        func load_library_of_platform(self: CxxProject, config: string)
        {
            assert(!self.module_instance->has);
            match (search_file_in(get_current_runtime_path(self->get_runtime_path(config))->val, ".dll"))
            {
            value(p)? 
                return self.module_instance := je::load_module(self.name, p->tostring);
            none? 
                return self.module_instance := option::none;
            }
        }
        func get_current_runtime_id(runtime_dll_path: filesys::path_t)
        {
            using filesys;

            return 
                subpath(runtime_dll_path)
                    ->  okay
                    =>> \child_path = child_path
                        ->  forall(\path = isdir(path);)
                        ->> \path = filename(path): int;
                        ->  reduce(\l, r = l > r ? l | r;);
                    ;
        }
        func get_current_runtime_path(runtime_dll_path: filesys::path_t)
        {
            using filesys;
            return 
                get_current_runtime_id(runtime_dll_path)
                    ->map(\id = runtime_dll_path / id as int: string;)
                    ;
        }
        func get_newest_runtime_path(runtime_dll_path: filesys::path_t)
        {
            using filesys;
            let newest_path = 
                get_current_runtime_id(runtime_dll_path)
                    -> map(\id: int = id + 1;)
                    -> valor(0)
                    -> \id: int = runtime_dll_path / id: string;
                    ;
            assert(!exist(newest_path));
            do mkdir(newest_path)->unwarp;
            assert(exist(newest_path));

            return newest_path;
        }
        func get_runtime_path(self: CxxProject, config: string)
        {
            return self.path/"runtime"/config;
        }
        public func get_build_dll_path(self: CxxProject, config: string)
        {
            return search_file_in(self.path/"build"/config, ".dll");
        }
        func update_library_of_platform(self: CxxProject, config: string)
        {
            using filesys;

            // 获取编译出来的二进制，移动到一个统一的位置
            if (!exist(self->get_runtime_path(config)))
                do mkdir(self->get_runtime_path(config))->unwarp;

            assert(exist(self->get_runtime_path(config)));

            let newest_runtime_path = get_newest_runtime_path(self->get_runtime_path(config));

            match (self->get_build_dll_path(config))
            {
            value(p)? 
                assert(copy(p, newest_runtime_path/filename(p))->isok);
            none? std::panic("Output binary file not found;");
            }

            // 调试时，vs调试器可能会自动附加pdb，导致重新编译失败
            // 为了避免蠢蛋vs干蠢事，这里直接把pdb文件移到runtime目录下
            match (search_file_in(self.path/"build"/config, ".pdb"))
            {
            value(p)?
                assert(move(p, newest_runtime_path/filename(p))->isok);
            none?
                ; // 没有pdb就算了，可能是release
            }
        }

        public func open_for_loading(path: filesys::path_t, proj: Project)
        {
            using filesys;

            // 加载指定路径的 CXX 项目信息
            if (!exist(path))
                return result::err(F"找不到模块{path}，请检查文件是否丢失");
            if (!exist(path/"config.inf"))
                return result::err(F"找不到配置文件{path}/config.inf，请检查文件是否丢失");

            let readdat = readall(path/"config.inf")
                =>> \d = d->todict;;
            if (!readdat->has)
                return result::err(F"模块{path}的配置文件无法读取或格式不正确");

            let created_module = CxxProject{ 
                    name = readdat->val["name": dynamic] as string, 
                    path = proj->parse_path_normalize(readdat->val["path": dynamic] as string), 
                    configs = readdat
                        ->val["conf": dynamic] as array
                        ->map(\d: dynamic = d as string;)
                        // 如果文件打不开，直接在这里爆炸
                        ->map(\conf: string = (conf, generate_cmake_doc(conf)->okay->val);)
                        ->mapping,
                    module_instance = mut option::none,
                    project = proj,
                };
            
            proj->active_module(created_module);

            return result::ok(created_module);
        }

        public func load(path: filesys::path_t, proj: Project)
        {
            using filesys;

            match(open_for_loading(path, proj))
            {
            err(errmsg)?
                return result::err(errmsg);
            ok(mut created_module)?
            {
                let config = je::platform();

                // 获取最新的模块版本，将其保留并重命名为0，删除其他全部版本
                do get_current_runtime_id(created_module->get_runtime_path(config))
                    ->map(\newest_id: int = 
                        subpath(created_module->get_runtime_path(config))
                            ->map(\child_paths = child_paths
                                ->forall(\path = !isdir(path) || newest_id != filename(path): int;)
                                ->map(\path = remove(path)->unwarp;)
                            ;)
                    ;)
                ;

                let founding_newest_result = 
                    get_current_runtime_path(created_module->get_runtime_path(config))
                        ->> \dllpath = 
                            filename(dllpath) == "0" 
                            ? result::ok(dllpath)
                            | move(dllpath, created_module->get_runtime_path(config)/"0");
                        ->  or(\ = result::err(0: filesys::errno_t););
                     
                match (founding_newest_result)
                {
                err(no)?
                    if (no == 0: filesys::errno_t)
                    {
                        // 根本没找到对应的运行库，就近开始现场编一个
                        je::logwarn("动态库未找到，正在重新编译");

                        let recompiling_result = update_engine_file(created_module.path)
                            =>> \platform_support = generate_module_config(proj, created_module.name, created_module.path, platform_support);
                            =>> func(_)
                                {
                                    do proj->deactive_module(created_module);
                                    return open_for_loading(path, proj);
                                }
                            =>> func(reloaded_created_module)
                                {
                                    match (reloaded_created_module->compile(je::platform(), option::none))
                                    {
                                    err(reason)? return err(reason);
                                    ok(_)? return ok(reloaded_created_module);
                                    }
                                }
                            ;

                        // TODO: 在此重新生成构建文档
                        match (recompiling_result)
                        {
                        err(reason)?
                            return err(reason);
                        ok(reloaded_created_module)?
                            {
                                created_module = reloaded_created_module;
                                created_module->update_library_of_platform(config);
                            }
                            
                        }
                    }
                    else
                        return result::err(F"清理模块失败({founding_newest_result->error->val})");
                _?
                    ;
                }

                if (!created_module->load_library_of_platform(config)->has)
                    return result::err(F"无法为当前运行时{config}加载模块，请检查");

                return result::ok(created_module);
            }
            
            }// End of match
        }

        func generate_cmake_doc(conf: string)=> result<CxxProjectBuildConfig, string>
        {
            let win32_cmake = @"
    # Build config for $$JEMODULE_PROJECT_NAME$$
    cmake_minimum_required (VERSION 3.8)

    include_directories("../../engine/include")
    include_directories("../../systems")
    include_directories("../../components")

    find_library(joyengine_lib "$$JE_ENGINE_LIB$$" ../../engine/library)
    find_library(woolang_lib "$$JE_WOOLANG_LIB$$" ../../engine/library)

    file(GLOB_RECURSE module_systems_sources ../../systems/*.cpp)
    file(GLOB_RECURSE module_systems_headers ../../systems/*.hpp)
    file(GLOB_RECURSE module_components_headers ../../components/*.hpp)        

    add_library($$JEMODULE_PROJECT_NAME$$ SHARED 
        ${module_systems_sources}
        ${module_systems_headers}
        ${module_components_headers}
        ../../main.cpp
        ../../loader.hpp)

    set_target_properties($$JEMODULE_PROJECT_NAME$$ PROPERTIES OUTPUT_NAME lib$$JEMODULE_PROJECT_NAME$$)
    set_target_properties($$JEMODULE_PROJECT_NAME$$ PROPERTIES PREFIX "")

    set_target_properties($$JEMODULE_PROJECT_NAME$$ PROPERTIES RELEASE_POSTFIX "$$JE_POSTFIX$$")
    set_target_properties($$JEMODULE_PROJECT_NAME$$ PROPERTIES DEBUG_POSTFIX "$$JE_POSTFIX$$")

    target_link_libraries($$JEMODULE_PROJECT_NAME$$ ${joyengine_lib} ${woolang_lib})
            "@;
            
            // 根据给定的配置和项目路径等信息，生成CMake文档
            let static config_cmake_file = {
                ["win32_debug_x86"] = CxxProjectBuildConfig{ 
                    config = "win32_debug_x86",
                    cmake = win32_cmake
                        ->replace("$$JE_ENGINE_LIB$$",  "libjoyecs32_debug.lib")
                        ->replace("$$JE_WOOLANG_LIB$$", "libwoo32_debug.lib")
                        ->replace("$$JE_POSTFIX$$", "32_debug"),
                    cmake_option = ["-G", USING_MSVC_TARGET, "-A", "Win32", "-DCMAKE_BUILD_TYPE=DEBUG"],
                    built_command = ["-p:Configuration=Debug",],
                },
                ["win32_release_x86"] = CxxProjectBuildConfig{ 
                    config = "win32_release_x86",
                    cmake = win32_cmake
                        ->replace("$$JE_ENGINE_LIB$$",  "libjoyecs32.lib")
                        ->replace("$$JE_WOOLANG_LIB$$", "libwoo32.lib")
                        ->replace("$$JE_POSTFIX$$", "32"),
                    cmake_option = ["-G", USING_MSVC_TARGET, "-A", "Win32", "-DCMAKE_BUILD_TYPE=RELEASE"],
                    built_command = ["-p:Configuration=Release",],
                },
                ["win32_debug_x64"] = CxxProjectBuildConfig{ 
                    config = "win32_debug_x64",
                    cmake = win32_cmake
                        ->replace("$$JE_ENGINE_LIB$$",  "libjoyecs_debug.lib")
                        ->replace("$$JE_WOOLANG_LIB$$", "libwoo_debug.lib")
                        ->replace("$$JE_POSTFIX$$", "_debug"),
                    cmake_option = ["-G", USING_MSVC_TARGET, "-A", "x64", "-DCMAKE_BUILD_TYPE=DEBUG"],
                    built_command = ["-p:Configuration=Debug",],
                },
                ["win32_release_x64"] = CxxProjectBuildConfig{ 
                    config = "win32_release_x64",
                    cmake = win32_cmake
                        ->replace("$$JE_ENGINE_LIB$$",  "libjoyecs.lib")
                        ->replace("$$JE_WOOLANG_LIB$$", "libwoo.lib")
                        ->replace("$$JE_POSTFIX$$", ""),
                    cmake_option = ["-G", USING_MSVC_TARGET, "-A", "x64", "-DCMAKE_BUILD_TYPE=RELEASE"],
                    built_command = ["-p:Configuration=Release",],
                } 
            };

            return
                config_cmake_file->get(conf)
                    ->map(\c: CxxProjectBuildConfig = result::ok(c): result<typeof(c), string>;)
                    ->valor(result::err(F"未知的配置{conf}"));
        }

        using compile_context = struct {
            display_msg : mut string,
            massive_msg : mut option<string>,
            progress    : mut int,
            show        : mut bool,
            compile_thread  : mut option<thread>,
            compile_result  : mut option<result<result<string, string>, string>>,
        };

        public func update_compile(self: CxxProject, config: string)
        {
            // 起个线程跑编译，然后弄个窗口显示一下进度

            let context = compile_context{
                display_msg = mut "正在开始编译，请稍等……", 
                progress = mut 0, 
                show = mut true,
                compile_thread = mut option::none,
                compile_result = mut option::none,
                massive_msg = mut option::none,
                };
            je::gui::launch(func(){
                context.show = BeginAttrOpen(F"编译C++模块##{JobID()}", WindowsAttribute::ImGuiWindowFlags_None);
                    Text(F"正在编译C++模块：{self.name}");
                    Text(context.display_msg);
                    
                    match (context.massive_msg)
                    {
                    value(msg)?
                    {
                        let (w, h) = GetContentRegionAvail();
                        do InputTextMultilineSize("##", msg, w, h);
                    }
                    none? ;
                    }

                    ProgressBar(context.progress: real / 100.);
                End();

                return context.show;
            }, ());

            context.compile_thread = 
                option::value(thread::create(func ()
                {
                    match (self->compile(config, option::value(context)))
                    {
                    ok(_)?
                    {
                        // 起个协程同步去更新一下
                        je::gui::launch(
                            func(){ 
                                match (self.project->dump_and_close_all_world)
                                {
                                ok(dump_worlds)?
                                    {
                                        // 这里的操作非常重要，需要确保全部世界已经被完全正确地关闭，
                                        // 否则如果有世界在卸载模块之后才执行清理操作，就有可能发生调用到已经不再有效的析构
                                        // 函数。这玩意儿非常恐怖，这里yield一下，保证一切按部就班

                                        std::yield();
                                        std::yield();
                                        std::yield(); // 玄学，来三下

                                        self.module_instance = 
                                            self.module_instance
                                                ->> \m = je::unload_module(m);
                                                =>> \_ = option::none;
                                                ;

                                        // 编译成功，更新文件到runtime
                                        self->update_library_of_platform(config);

                                        // 加载模块！
                                        assert(self->load_library_of_platform(config)->has);

                                        self.project->restore_all_world(dump_worlds);
                                    }
                                err(reason)?
                                    jeapi::gui::form::errmsg("失败", F"加载模块失败：{reason}");
                                }
                                return false;
                            },() );
                    }
                    err(_)?;
                    }
                },()) );
        }

        public func compile(self: CxxProject, config: string, context: option<compile_context>)
        {
            // 输入所需的配置，如果项目支持这个配置，则编译模块
            let conf = self.configs->get(config);
            if (!conf->has)
            {
                do context->>\context = context.show = false;;
                do context->>\context = context.display_msg = "不支持的配置";;
                return result::err("不支持的配置");
            }

            using filesys;
            using filesys;

            do context->>\context = context.display_msg = "正在检查工具链";;
            do context->>\context = context.progress = 0;;

            if (!exist(CMAKE_PATH))
            {
                do context->>\context = context.display_msg = F"无法找到{CMAKE_PATH}，请检查CMake配置和环境变量";;
                return result::err(F"无法找到{CMAKE_PATH}，请检查CMake配置和环境变量");
            }
            if (!exist(MSVC_PATH))
            {
                do context->>\context = context.display_msg = F"无法找到{MSVC_PATH}，请检查工具链环境变量";;
                return result::err(F"无法找到{MSVC_PATH}，请检查工具链环境变量");
            }

            do context->>\context = context.display_msg = "正在扫描并生成loader.hpp";;
            do context->>\context = context.progress = 5;;

            let components = subpath(self.path/"components")
                ->> \childs = childs
                    ->  forall(\f = extension(f)->lower == ".hpp";)
                    ->> \f = fname->subto(0, fname->len - 4)
                        where fname = filename(f)
                        ;
                    ;
                ->or(\_=[];);
            
            let systems = subpath(self.path/"systems")
                ->> \childs = childs
                    ->  forall(\f = extension(f)->lower == ".hpp";)
                    ->> \f = fname->subto(0, fname->len - 4)
                        where fname = filename(f)
                        ;
                    ;
                ->or(\_=[];);

            let loader_header = 
    @"#pragma once

    // Do not modify this file
    // 'loader.hpp' will be generated by editor.

    // Headers of components/systems
    // E.G. #include "ExampleComponent.hpp"
    $$INCLUDE_COMPONENT_HEADERS$$
    $$INCLUDE_SYSTEM_HEADERS$$

    namespace jemodule
    {
        void register_types()
        {
            // Here to load components/system
            // e.g. jeecs::typing::type_info::of<Module::ExampleComponent>("Module::ExampleComponent");
    $$REGISTER_COMPONENT_TYPES$$
    $$REGISTER_SYSTEM_TYPES$$
        }
    }
            "@;
            let import_component_headers = 
                components
                    ->map(\f: string = F"#include \"{f}.hpp\"";)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");
            let import_system_headers = 
                systems
                    ->map(\f: string = F"#include \"{f}.hpp\"";)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");

            let register_component_types =
                components
                    ->map(\f: string = F"jeecs::typing::type_info::of<{self.name}::{f}>(\"{self.name}::{f}\");";)
                    ->map(\f: string = "        " + f;)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");
            let register_system_types = 
                systems
                    ->map(\f: string = F"jeecs::typing::type_info::of<{self.name}::{f}>(\"{self.name}::{f}\");";)
                    ->map(\f: string = "        " + f;)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");

            let loader_src = 
                loader_header
                    ->replace("$$INCLUDE_COMPONENT_HEADERS$$", import_component_headers)
                    ->replace("$$INCLUDE_SYSTEM_HEADERS$$", import_system_headers)
                    ->replace("$$REGISTER_COMPONENT_TYPES$$", register_component_types)
                    ->replace("$$REGISTER_SYSTEM_TYPES$$", register_system_types);

            if (!writeall(self.path/"loader.hpp", loader_src))
            {
                do context->>\context = context.display_msg = F"无法写入'{self.path}/loader.hpp'";;
                return result::err(F"无法写入'{self.path}/loader.hpp'");
            }

            do context->>\context = context.display_msg = F"正在使用CMake生成编译配置\n{config}";;
            do context->>\context = context.progress = 15;;

            if (start_process(CMAKE_PATH->tostring, 
                [CMAKE_PATH->tostring, self.path->tostring, "-B", self.path->tostring + "/msvcbuild_" + config, F"-DJEMODULE_BUILT_AIM=\"{config}\""]
                    ->connect(conf->val.cmake_option)) != true)
            {
                do context->>\context = context.display_msg = "CMake生成失败";;
                return result::err("CMake生成失败");
            }

            let msvc_proj_path = self.path/F"msvcbuild_{config}"/"builder"/config/F"{self.name->replace(" ", "_")}.vcxproj";
            let msvc_compile_result_path = self.path/F"msvcbuild_{config}"/"compile.log";

            do remove(msvc_compile_result_path)->unwarp;

            do context->>\context = context.display_msg = F"正在构建二进制文件\n{config}";;
            do context->>\context = context.progress = 45;;

            let compile_result_statu_code = start_process(MSVC_PATH->tostring(), [
                MSVC_PATH->tostring(), msvc_proj_path->tostring, "-v:quiet", "-fl",
                F"-flp:logfile={msvc_compile_result_path->tostring}" 
            ]->connect(conf->val.built_command));
            let compile_result = readall(msvc_compile_result_path);

            do context->>\context = context.massive_msg = option::value(compile_result->valor("没有找到编译日志，查看控制台获取更多信息"));;

            if (compile_result_statu_code != true)
            {
                do context->>\context = context.display_msg = "C++编译失败";;
                return result::err("C++编译失败");
            }
            
            do context->>\context = context.display_msg = "编译完成";;
            do context->>\context = context.progress = 100;;

            self.project->active_module(self);

            return result::ok("编译完成");
        }

    }
}