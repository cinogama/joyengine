// cpp.main
// 用于管理外部模块


import woo::std;
import woo::shell;
import je::gui;

import pkg::process;
import pkg::fsys;
import pkg::thread;
import pkg::try;

import builtin::editor::tools::varify;

using je::gui;
using jeapi::varify;
using fsys;

namespace editor
{
    // 启动个进程，等待进程结束，如果进程成功执行并以0作为退出码，则返回true
    func start_process(process: string, args: array<string>)
    {
        return new! process(process, args)
            =>> \pid = pid->wait->okay;
            ->> \status = status == 0: process::status_t ? true | false;
            ->  valor(false);
    }

    public using CxxProject = struct {
        public name: string, // 模块的名称
        public path: fsys::path_t, // 模块所在路径，仅此而已
        public project: Project,
        module_instance: mut option<handle>,
    }
    {
        // Cmake所在路径，项目会使用此路径指示的cmake
        let CMAKE_PATH_MAY_NULL =  std::env("CMAKE")->>\p = fsys::normalize(F"{p}/cmake.exe");;

        // C++模块样例，创建项目文件时会复制这个目录
        let CXX_PROJECT_EXAMPLE_PATH = fsys::normalize(F"{std::exepath()}/builtin/cxxproject");

        // 引擎的头文件路径
        public let ENGINE_HEADER_PATH = fsys::normalize(F"{std::exepath()}/builtin/include");

        let ENGINE_CORE_LIBRARYS_LOCATE_PATH = fsys::normalize(std::exepath());

        public func is_builder_ready()
        {
            return CMAKE_PATH_MAY_NULL->>\p = fsys::isfile(p);->valor(false);
        }

        func _config_name(rttype: std::platform::runtime_type)
        {
            return rttype == std::platform::runtime_type::DEBUG ? "debug" | "relwithdebinfo";
        }

        func _lib_append_suffix_for_link(libname: string, rttype: std::platform::runtime_type)
        {
            let isdebug = rttype == std::platform::runtime_type::DEBUG;

            return libname 
                + (std::platform::bitwidth == 32 ? "32" | "")
                + (isdebug ? "_debug" | "")
                + (std::platform::os == std::platform::os_type::WIN32
                    ? ".lib"
                    | std::platform::os == std::platform::os_type::MACOS
                        ? ".a"
                        | ".so")
                ;
        }
        func _lib_append_suffix(libname: string, rttype: std::platform::runtime_type)
        {
            let isdebug = rttype == std::platform::runtime_type::DEBUG;

            return libname 
                + (std::platform::bitwidth == 32 ? "32" | "")
                + (isdebug ? "_debug" | "")
                + (std::platform::os == std::platform::os_type::WIN32
                    ? ".dll"
                    | std::platform::os == std::platform::os_type::MACOS
                        ? ".dylib"
                        | ".so")
                ;
        }
        public func get_dylib_files_by_config(rttype: std::platform::runtime_type)
        {
            let libname = ["libjoyecs", "libwoo"];
            return libname
                ->> \name = _lib_append_suffix(name, rttype);
                ;
        }

        // 引擎的库目录
        public func update_engine_file(cxx_proj_path: fsys::path_t)
        {        
            // 从引擎根目录更新引擎相关头文件和库文件
            if (!exist(cxx_proj_path))
                throw! F"无法找到C++模块项目，{cxx_proj_path}目录不存在";

            // 1. 删除engine目录
            do remove(cxx_proj_path/".engine")->unwarp;
            do mkdir(cxx_proj_path/".engine")->unwarp;
            do mkdir(cxx_proj_path/".engine"/"library")->unwarp;

            // 2. 把新的engine移过来，把引擎的头文件复制过来
            let r = copy(ENGINE_HEADER_PATH, cxx_proj_path/".engine"/"include");

            if (r->iserr)
                throw! F"复制引擎相关文件失败({r->error->val})";

            // 2. 开始复制库文件, 顺便确认支持的平台
            for (let p : walk(ENGINE_CORE_LIBRARYS_LOCATE_PATH)->iterator::iter_result)
            {
                if (isfile(p) && 
                    (extension(p)->lower == ".lib" 
                        || extension(p)->lower == ".so" 
                        || extension(p)->lower == ".dylib")
                    && (filename(p)->lower->beginwith("libjoyecs")
                        ||filename(p)->lower->beginwith("libwoo")))
                {
                    try! _ = copy(p, cxx_proj_path/".engine"/"library"/filename(p))
                        -> orbind(\errno = result::err(F"复制文件：`{p}` 失败({errno})");)
                        ;
                }
            }
            return result::ok(do nil);
        }
        public func regenerate_cmake_doc(self: CxxProject)
        {
            let CMAKE_FILE_CONTENT = 
@"# CMakeList for JoyEngine Module
cmake_minimum_required (VERSION 3.16)

project ("$$JEMODULE_PROJECT_NAME$$")

#####################################################################
option(BUILD_SHARED_LIBS "Static link packages into engine." OFF)

set (JEMODULE_ENGINE_CORE_LIB_FILENAME  "libjoyecs"  CACHE STRING 
    "The file name of engine core library.")
set (JEMODULE_WOOLANG_LIB_FILENAME  "libwoo"  CACHE STRING 
    "The file name of woolang library.")

#####################################################################
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE}")
set(LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/.build/${CMAKE_BUILD_TYPE}")

#####################################################################
if(BUILD_SHARED_LIBS)
    set(JEMODULE_BUILD_TYPE SHARED)
    find_library(jemodule_jeecs_lib "${JEMODULE_ENGINE_CORE_LIB_FILENAME}" ./.engine/library)
    find_library(jemodule_woolang_lib "${JEMODULE_WOOLANG_LIB_FILENAME}" ./.engine/library)
else()
    set(JEMODULE_BUILD_TYPE STATIC)
endif()

file(GLOB_RECURSE jemodule_system_src_cpp ./systems/*.cpp)
file(GLOB_RECURSE jemodule_system_src_hpp ./systems/*.hpp)
file(GLOB_RECURSE jemodule_system_src_c ./systems/*.c)
file(GLOB_RECURSE jemodule_system_src_h ./systems/*.h)

file(GLOB_RECURSE jemodule_component_src_cpp ./components/*.cpp)
file(GLOB_RECURSE jemodule_component_src_hpp ./components/*.hpp)
file(GLOB_RECURSE jemodule_component_src_c ./components/*.c)
file(GLOB_RECURSE jemodule_component_src_h ./components/*.h)

file(GLOB_RECURSE jemodule_source_src_cpp ./sources/*.cpp)
file(GLOB_RECURSE jemodule_source_src_hpp ./sources/*.hpp)
file(GLOB_RECURSE jemodule_source_src_c ./sources/*.c)
file(GLOB_RECURSE jemodule_source_src_h ./sources/*.h)

#####################################################################
add_library($$JEMODULE_PROJECT_NAME$$ 
    ${JEMODULE_BUILD_TYPE}
    
    ${jemodule_system_src_cpp}
    ${jemodule_system_src_hpp}
    ${jemodule_system_src_c}
    ${jemodule_system_src_h}

    ${jemodule_component_src_cpp}
    ${jemodule_component_src_hpp}
    ${jemodule_component_src_c}
    ${jemodule_component_src_h}

    ${jemodule_source_src_cpp}
    ${jemodule_source_src_hpp}
    ${jemodule_source_src_c}
    ${jemodule_source_src_h}

    ./main.cpp
    ./loader.hpp)

if(BUILD_SHARED_LIBS)
    target_link_libraries($$JEMODULE_PROJECT_NAME$$ 
        PRIVATE ${jemodule_jeecs_lib} 
        PRIVATE ${jemodule_woolang_lib})
else()
    target_compile_definitions(
        $$JEMODULE_PROJECT_NAME$$ 
            PRIVATE -Djeecs_module_entry=jestatic_module_$$JEMODULE_PROJECT_NAME$$_entry
            PRIVATE -Djeecs_module_leave=jestatic_module_$$JEMODULE_PROJECT_NAME$$_leave)
endif()

target_include_directories($$JEMODULE_PROJECT_NAME$$ PRIVATE ./.engine/include)
target_include_directories($$JEMODULE_PROJECT_NAME$$ PRIVATE ./systems)
target_include_directories($$JEMODULE_PROJECT_NAME$$ PRIVATE ./components)
target_include_directories($$JEMODULE_PROJECT_NAME$$ PRIVATE ./sources)

set_target_properties($$JEMODULE_PROJECT_NAME$$ PROPERTIES OUTPUT_NAME lib$$JEMODULE_PROJECT_NAME$$)
set_target_properties($$JEMODULE_PROJECT_NAME$$ PROPERTIES PREFIX "")

target_compile_features($$JEMODULE_PROJECT_NAME$$ PRIVATE cxx_std_17)
if(MSVC) 
    target_compile_options($$JEMODULE_PROJECT_NAME$$ PRIVATE "/source-charset:utf-8")
else()
    target_compile_options($$JEMODULE_PROJECT_NAME$$ PRIVATE -fno-exceptions)
endif()
"@;
            let content = CMAKE_FILE_CONTENT->replace("$$JEMODULE_PROJECT_NAME$$", self.name);
            if (!writeall(self.path / "CMakeLists.txt", content))
            {
                return result::err(F"无法写入'{self.path}/CMakeLists.txt'");
            }
            return result::ok(do nil);
        }
        public func start(name: string, locpath: string, proj: Project)=> result<CxxProject, string>
        {
            // 在指定目录下创建Cxx项目目录
            let cxx_proj_path = normalize(locpath)/F"{name}.je4module";

            return 
                try!
                {
                    if (exist(cxx_proj_path))
                        throw! F"无法创建C++模块项目，{cxx_proj_path}目录已经存在";

                    try! _ = copy(CXX_PROJECT_EXAMPLE_PATH, cxx_proj_path)
                        ->  flip
                        ->> \errid = F"复制文件失败({errid})";
                        ->  flip
                        =>> \_ = update_engine_file(cxx_proj_path);
                        ;

                    let created_module = CxxProject{ 
                        name = name, 
                        path = cxx_proj_path, 
                        module_instance = mut option::none,
                        project = proj,
                    };

                    try! _ = created_module->regenerate_cmake_doc;
                    created_module->update_compile(std::platform::runtime_type::DEBUG);

                    expected_ok! created_module;
                }
                catch! e
                {
                    do remove(cxx_proj_path)->unwarp;
                    return e;
                };
        }

        func search_file_in(dir: fsys::path_t, exname: string)=> option<fsys::path_t>
        {
            using fsys;

            for (let p : walk(dir)->iterator::iter_result)
            {
                if (isdir(p))
                {
                    let r = search_file_in(p, exname);
                    if (r->has)
                        return r;
                }
                else if (extension(p)->upper == exname->upper)
                    return option::value(p);
            }
            return option::none;
        }
        func load_library_of_platform(self: CxxProject, rttype: std::platform::runtime_type)
        {
            assert(!self.module_instance->has);
            match (search_file_in(get_current_runtime_path(self->get_runtime_path(rttype))->val, ".dll"))
            {
            value(p)? 
                return self.module_instance := je::load_module(self.name, p->tostring);
            none? 
                return self.module_instance := option::none;
            }

            // 动态库更新完毕，立即重新加载编辑器脚本/ToWoo以更新类型信息
            self.project->update_towoo(true);
        }
        func get_current_runtime_id(runtime_dll_path: fsys::path_t)
        {
            using fsys;

            return 
                subpath(runtime_dll_path)
                    ->  okay
                    =>> \child_path = child_path
                        ->  forall(\path = isdir(path);)
                        ->> \path = filename(path): int;
                        ->  reduce(\l, r = l > r ? l | r;);
                    ;
        }
        func get_current_runtime_path(runtime_dll_path: fsys::path_t)
        {
            using fsys;
            return 
                get_current_runtime_id(runtime_dll_path)
                    ->map(\id = runtime_dll_path / id as int: string;)
                    ;
        }
        func get_newest_runtime_path(runtime_dll_path: fsys::path_t)
        {
            using fsys;
            let newest_path = 
                get_current_runtime_id(runtime_dll_path)
                    -> map(\id: int = id + 1;)
                    -> valor(0)
                    -> \id: int = runtime_dll_path / id: string;
                    ;
            assert(!exist(newest_path));
            do mkdir(newest_path)->unwarp;
            assert(exist(newest_path));

            return newest_path;
        }
        func get_runtime_path(self: CxxProject, rttype: std::platform::runtime_type)
        {
            return self.path/".runtime"/_config_name(rttype);
        }
        public func get_build_dll_path(self: CxxProject, rttype: std::platform::runtime_type)
        {
            return search_file_in(self.path/".build"/_config_name(rttype), ".dll");
        }
        func update_library_of_platform(self: CxxProject, rttype: std::platform::runtime_type)
        {
            using fsys;

            // 获取编译出来的二进制，移动到一个统一的位置
            if (!exist(self->get_runtime_path(rttype)))
                do mkdir(self->get_runtime_path(rttype))->unwarp;

            assert(exist(self->get_runtime_path(rttype)));

            let newest_runtime_path = get_newest_runtime_path(self->get_runtime_path(rttype));

            match (self->get_build_dll_path(rttype))
            {
            value(p)? 
                assert(copy(p, newest_runtime_path/filename(p))->isok);
            none? std::panic("Output binary file not found;");
            }

            // 调试时，vs调试器可能会自动附加pdb，导致重新编译失败
            // 为了避免蠢蛋vs干蠢事，这里直接把pdb文件移到runtime目录下
            match (search_file_in(self.path/".build"/_config_name(rttype), ".pdb"))
            {
            value(p)?
                assert(move(p, newest_runtime_path/filename(p))->isok);
            none?
                ; // 没有pdb就算了，可能是release
            }
        }

        public func open_for_loading(path: fsys::path_t, proj: Project)
        {
            using fsys;

            // 加载指定路径的 CXX 项目信息
            if (!exist(path))
                return result::err(F"找不到模块{path}，请检查文件是否丢失");

            let created_module = CxxProject{ 
                    name = purename(path), 
                    path = path, 
                    module_instance = mut option::none,
                    project = proj,
                };
            
            proj->active_module(created_module);

            return result::ok(created_module);
        }
        func check_verify_info(self: CxxProject, vinfo: string)
        {
            match (vinfo->dict::deserialize->>\dat=dat->>\k, v = (k: string, v);;)
            {
            value(vdat)?
                {
                    let engine_version_is_same = vdat->get("engine_version")
                        =>> \v = v: string
                            ->  dict::deserialize
                                ->> \dat = dat
                                    ->> \k, v = (k: string, v: string);
                                    ;
                            ;
                        =>> \v = EngineVersionInfo::restore(v);
                        ->> \v = v->isequal(EngineVersionInfo::current());
                        ->  valor(false)
                        ;
                    
                    if (engine_version_is_same == false)
                        return false;

                    let sources = vdat->get("sources")
                        =>> \srcs = srcs is dict<dynamic, dynamic>
                            ? option::value(srcs as dict<dynamic, dynamic>->>\k, v = (k: string, v: int);)
                            | option::none
                            ;
                        ;
                    match (sources=>>\srcs = fsys::allsubpath(self.path)->okay->>\subpaths = (subpaths, srcs);;)
                    {
                    value((subpaths, srclist))?
                        {
                            let mut varified_file = 0;
                            for (let path : subpaths) 
                            {
                                if (fsys::isfile(path))
                                {
                                    let extension = fsys::extension(path)->lower;
                                    if (extension == ".cpp" 
                                        || extension == ".hpp" 
                                        || extension == ".c" 
                                        || extension == ".h")
                                    {
                                        let wpath = self.project->make_path_normalize(path);
                                        let crc64 = je::editor::crc64file(path->tostring());
                                        varified_file += 1;

                                        if (! srclist->get(wpath)->>\crc = crc == crc64->valor(0);->valor(false))
                                            return false;
                                    }
                                }
                            }
                            return varified_file == srclist->len;
                        }
                    none?
                        return false;
                    }
                }
            none?
                return false;
            }
        }
        func generate_varify_info(self: CxxProject)
        {
            let source_code_versions = {}mut: map<string, int>;
            for (let path : fsys::allsubpath(self.path)->unwarpor([])) 
            {
                if (fsys::isfile(path))
                {
                    let extension = fsys::extension(path)->lower;
                    if (extension == ".cpp" 
                        || extension == ".hpp" 
                        || extension == ".c" 
                        || extension == ".h")
                    {
                        let wpath = self.project->make_path_normalize(path);
                        let crc64 = je::editor::crc64file(path->tostring());

                        source_code_versions->set(wpath, crc64->valor(0));
                    }
                }
            }

            return {
                ["engine_version"] = EngineVersionInfo::current()->serialize: dynamic,
                ["sources"] = source_code_versions: dynamic
            }->serialize->val;
        }
        public func load(path: fsys::path_t, proj: Project)
        {
            using fsys;

            match(open_for_loading(path, proj))
            {
            err(errmsg)?
                return result::err(errmsg);
            ok(mut created_module)?
            {
                let rttype = std::platform::runtime_type::DEBUG;

                // 校验最后一次编译时的引擎版本，如果不一致，那么删掉全部动态库
                let is_same_version = fsys::readall(path / "version.json")
                    ->> \dat = created_module->check_verify_info(dat);
                    ->  valor(false)
                    ;
                if (is_same_version)
                {
                    // 获取最新的模块版本，将其保留并重命名为0，删除其他全部版本
                    do get_current_runtime_id(created_module->get_runtime_path(rttype))
                        ->map(\newest_id: int = 
                            subpath(created_module->get_runtime_path(rttype))
                                ->map(\child_paths = child_paths
                                    ->forall(\path = !isdir(path) || newest_id != filename(path): int;)
                                    ->map(\path = remove(path)->unwarp;)
                                ;)
                        ;)
                    ;
                }
                else
                {
                    // 删除build builder engine runtime loader.hpp，用于准备重新编译
                    do fsys::remove(path / ".build");
                    do fsys::remove(path / ".engine");
                    do fsys::remove(path / ".runtime");
                    do fsys::remove(path / "loader.hpp");
                }
                
                let founding_newest_result = 
                    get_current_runtime_path(created_module->get_runtime_path(rttype))
                        ->> \dllpath = 
                            filename(dllpath) == "0" 
                            ? result::ok(dllpath)
                            | move(dllpath, created_module->get_runtime_path(rttype)/"0");
                        ->  or(\ = result::err(0: fsys::errno_t););
                match (founding_newest_result)
                {
                err(no)?
                    if (no == 0: fsys::errno_t)
                    {
                        // 根本没找到对应的运行库，就近开始现场编一个
                        je::logwarn("动态库未找到，正在重新编译");
                        try! _ = created_module->regenerate_cmake_doc;
                        try! _ = update_engine_file(created_module.path);
                        do proj->deactive_module(created_module);
                        try! reloaded_created_module = open_for_loading(path, proj);
                        
                        try! _ = reloaded_created_module->compile(rttype, option::none);

                        created_module = reloaded_created_module;
                        created_module->update_library_of_platform(rttype);
                    }
                    else
                        throw! F"清理模块失败({founding_newest_result->error->val})";
                _?
                    ;
                }

                if (!created_module->load_library_of_platform(rttype)->has)
                    throw! F"无法为当前运行时{_config_name(rttype)}加载模块，请检查";

                expected_ok! created_module;
            }
            
            }// End of match
        }
        public func close(self: CxxProject)
        {
            do self.module_instance->> \m = je::unload_module(m);;
            self.module_instance = option::none;
        }

        using compile_context = struct {
            display_msg : mut string,
            massive_msg : mut option<string>,
            progress    : mut int,
            show        : mut bool,
            compile_thread  : mut option<thread>,
            compile_result  : mut option<result<result<string, string>, string>>,
        };

        public func update_compile(self: CxxProject, rttype: std::platform::runtime_type)
        {
            // 起个线程跑编译，然后弄个窗口显示一下进度

            let context = compile_context{
                display_msg = mut "正在开始编译，请稍等……", 
                progress = mut 0, 
                show = mut true,
                compile_thread = mut option::none,
                compile_result = mut option::none,
                massive_msg = mut option::none,
                };
            je::gui::launch(func(){
                context.show = true;
                match (BeginAttrOpen(F"编译C++模块##{JobID()}", WindowsAttribute::ImGuiWindowFlags_None))
                {
                value(show)?
                    if (show)
                    {
                        Text(F"正在编译C++模块：{self.name}");
                        Text(context.display_msg);
                        
                        match (context.massive_msg)
                        {
                        value(msg)?
                        {
                            let (w, h) = GetContentRegionAvail();
                            do InputTextMultilineSize("##", msg, w, h);
                        }
                        none?;
                        }
                        ProgressBar(context.progress: real / 100.);
                    }
                none?
                    context.show = false;
                }
                End();

                return context.show;
            }, ());

            context.compile_thread = 
                option::value(new! thread(func ()
                {
                    match (self->compile(rttype, option::value(context)))
                    {
                    ok(_)?
                    {
                        // 起个协程同步去更新一下
                        je::gui::launch(
                            func(){ 
                                match (self.project->dump_and_close_all_world)
                                {
                                ok(dump_worlds)?
                                    {
                                        // 正式更新之前创建dump，直到下一次保存或调试才消除之
                                        self.project->create_dump(dump_worlds);

                                        // 这里的操作非常重要，需要确保全部世界已经被完全正确地关闭，
                                        // 否则如果有世界在卸载模块之后才执行清理操作，就有可能发生调用到已经不再有效的析构
                                        // 函数。这玩意儿非常恐怖，这里yield一下，保证一切按部就班

                                        std::yield();
                                        std::yield();
                                        std::yield(); // 玄学，来三下

                                        self->close();

                                        // 编译成功，更新文件到runtime
                                        self->update_library_of_platform(rttype);

                                        // 加载模块！
                                        assert(self->load_library_of_platform(rttype)->has);

                                        self.project->update_towoo_after_dump_and_close(true);
                                        self.project->restore_all_world(dump_worlds);
                                    }
                                err(reason)?
                                    jeapi::gui::form::errmsg("失败", F"加载模块失败：{reason}");
                                }
                                return false;
                            },() );
                    }
                    err(_)?;
                    }
                },()));
        }

        public func compile(self: CxxProject, rttype: std::platform::runtime_type, context: option<compile_context>)
        {
            let config = _config_name(rttype); 

            try! CMAKE_PATH = CMAKE_PATH_MAY_NULL->okor("无法找到CMake，请检查CMake配置和环境变量");

            do context->>\context = context.display_msg = "正在检查工具链";;
            do context->>\context = context.progress = 0;;

            if (!fsys::exist(CMAKE_PATH))
            {
                do context->>\context = context.display_msg = F"无法找到{CMAKE_PATH}，请检查CMake配置和环境变量";;
                throw! F"无法找到{CMAKE_PATH}，请检查CMake配置和环境变量";
            }

            do context->>\context = context.display_msg = "正在扫描并生成loader.hpp";;
            do context->>\context = context.progress = 5;;

            let components = subpath(self.path/"components")
                ->> \childs = childs
                    ->  forall(\f = extension(f)->lower == ".hpp";)
                    ->> \f = fname->subto(0, fname->len - 4)
                        where fname = filename(f)
                        ;
                    ;
                ->or(\_=[];);
            
            let systems = subpath(self.path/"systems")
                ->> \childs = childs
                    ->  forall(\f = extension(f)->lower == ".hpp";)
                    ->> \f = fname->subto(0, fname->len - 4)
                        where fname = filename(f)
                        ;
                    ;
                ->or(\_=[];);

            let loader_header = 
@"#pragma once
#include "jeecs.hpp"

// Do not modify this file
// 'loader.hpp' will be generated by editor.

// Headers of components/systems
// E.G. #include "ExampleComponent.hpp"
$$INCLUDE_COMPONENT_HEADERS$$
$$INCLUDE_SYSTEM_HEADERS$$

namespace jemodule
{
    void register_types(jeecs::typing::type_unregister_guard* guard)
    {
        using namespace jeecs;
        // Here to load components/system
        // e.g. typing::type_info::register_type<Module::ExampleComponent>(guard, "Module::ExampleComponent");
$$REGISTER_COMPONENT_TYPES$$
$$REGISTER_SYSTEM_TYPES$$
    }
}
"@;
            let import_component_headers = 
                components
                    ->map(\f: string = F"#include \"{f}.hpp\"";)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");
            let import_system_headers = 
                systems
                    ->map(\f: string = F"#include \"{f}.hpp\"";)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");

            let register_component_types =
                components
                    ->map(\f: string = F"        typing::type_info::register_type<{self.name}::{f}>(guard, \"{self.name}::{f}\");";)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");
            let register_system_types = 
                systems
                    ->map(\f: string = F"        typing::type_info::register_type<{self.name}::{f}>(guard, \"{self.name}::{f}\");";)
                    ->reduce(\l: string, r: string = l + "\n" + r;)
                    ->valor("");

            let loader_src = 
                loader_header
                    ->replace("$$INCLUDE_COMPONENT_HEADERS$$", import_component_headers)
                    ->replace("$$INCLUDE_SYSTEM_HEADERS$$", import_system_headers)
                    ->replace("$$REGISTER_COMPONENT_TYPES$$", register_component_types)
                    ->replace("$$REGISTER_SYSTEM_TYPES$$", register_system_types);

            if (!writeall(self.path/"loader.hpp", loader_src))
            {
                do context->>\context = context.display_msg = F"无法写入'{self.path}/loader.hpp'";;
                return result::err(F"无法写入'{self.path}/loader.hpp'");
            }

            do context->>\context = context.display_msg = F"正在使用CMake生成编译配置\n{config}";;
            do context->>\context = context.progress = 15;;

            let building_path = self.path->tostring + "/.build_" + config;

            if (start_process(CMAKE_PATH->tostring, 
                [
                    CMAKE_PATH->tostring, 
                    self.path->tostring, 
                    "-B", building_path,
                    F"-DCMAKE_BUILD_TYPE={config}",
                    F"-DBUILD_SHARED_LIBS=ON",
                    F"-DJEMODULE_ENGINE_CORE_LIB_FILENAME={_lib_append_suffix_for_link("libjoyecs", std::platform::runtime)}",
                    F"-DJEMODULE_WOOLANG_LIB_FILENAME={_lib_append_suffix_for_link("libwoo", std::platform::runtime)}"
                ]) != true)
            {
                do context->>\context = context.display_msg = "CMake生成失败";;
                return result::err("CMake生成失败");
            }

            let msvc_compile_result_path = self.path/F"msvcbuild_{config}"/"compile.log";

            do remove(msvc_compile_result_path)->unwarp;

            do context->>\context = context.display_msg = F"正在构建二进制文件\n{config}";;
            do context->>\context = context.progress = 45;;

            let compile_result_statu_code = start_process(
                CMAKE_PATH->tostring, 
                [
                    CMAKE_PATH->tostring, 
                    "--build", building_path, 
                    "--config", config, 
                    "-j", thread::concurrency(): string
                ]);
            let compile_result = readall(msvc_compile_result_path);

            do context
                ->> \context = 
                    context.massive_msg = option::value(
                        compile_result->valor("没有找到编译日志，查看控制台获取更多信息"))
                    ;
                ;

            if (compile_result_statu_code != true)
            {
                do context->>\context = context.display_msg = "C++编译失败";;
                return result::err("C++编译失败");
            }
            
            do context->>\context = context.display_msg = "编译完成";;
            do context->>\context = context.progress = 100;;

            self.project->active_module(self);

            // 更新编译版本
            if (! fsys::writeall(self.path / "version.json", self->generate_varify_info))
            {
                jeapi::gui::form::errmsg("警告", "无法为生成的模块记录版本信息文件，请检查");
            }

            return result::ok("编译完成");
        }
    }
}