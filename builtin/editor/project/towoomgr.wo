// project.towoo
// 用于储存编辑中的项目的ToWoo代码系统实例
import woo::std;

import je;
import je::gui;

import pkg::fsys;
import pkg::worst;

import builtin::editor::project::main;
import builtin::editor::gui::form::msg;

using je;
using fsys;

namespace editor
{
    using ToWooContext = struct
    {
        m_project_path: path_t,
        m_loaded_towoo: mut dict<path_t, (fsys::unix1970_time_t, je::typeinfo)>,
        m_bad_towoo_script: vec<path_t>,

        m_removing_component: map<string, je::typeinfo>,
        m_removing_system: map<string, je::typeinfo>,
    }
    {
        public func get_loaded_towoo(self: ToWooContext)
        {
            return self.m_loaded_towoo->unmapping->std::sort(\l, r = l.0 < r.0;);
        }
        public func pure_component_or_system_name(name: string)
        {
            match (name->find("."))
            {
            value(idx)?
                return name->sub_len(0, idx);
            none?
                return name;
            }
        }
        func fetch_file(self: ToWooContext, type: string)
        {
            let fetched_scripts = {}mut: map<path_t, fsys::unix1970_time_t>;
            let _repeat_checker = {}mut: map<string, path_t>;
            for (let p : allsubpath(self.m_project_path)->or([]))
            {
                if (isfile(p) && filename(p)->lower->end_with(type))
                {
                    match (lastwrite(p))
                    {
                    ok(last_modify_time)?
                    {
                        let file_purename = pure_component_or_system_name(purename(p));
                        if (_repeat_checker->contain(file_purename))
                        {
                            let warn_msg = F"发现同名的ToWoo：`{p}` 和 `{_repeat_checker[file_purename]}`，\n这可能导致错误的行为，请检查并排除。";

                            je::logwarn(warn_msg);
                            jeapi::gui::form::errmsg("同名ToWoo提示", warn_msg);
                        }
                        else
                        {
                            _repeat_checker->set(file_purename, p);
                            fetched_scripts->set(p, last_modify_time);
                        }
                    }
                    err(_)?;
                    }
                }
            }
            return fetched_scripts;
        }
        func update_system(self: ToWooContext, new_scripts: map<path_t, (fsys::unix1970_time_t, je::typeinfo)>, fullupdate: bool)
        {
            let fetched_scripts = self->fetch_file(".jesystem.wo");
            for (let (p, (c, t)) : self.m_loaded_towoo)
            {
                if (filename(p)->lower->end_with(".jesystem.wo"))
                {
                    if (fullupdate || fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                    {
                        if (fetched_scripts->contain(p) == false)
                            self.m_removing_system->set(pure_component_or_system_name(purename(p)), t);
                    }
                    else
                    {
                        // 无需更新，直接继续使用
                        new_scripts->set(p, (c, t));
                        do fetched_scripts->remove(p);
                    }
                }
            }
            return fetched_scripts;
        }
        func update_component(self: ToWooContext, new_scripts: map<path_t, (unix1970_time_t, je::typeinfo)>, fullupdate: bool)
        {
            let fetched_scripts = self->fetch_file(".jecomponent.wo");
            for (let (p, (c, t)) : self.m_loaded_towoo)
            {
                if (filename(p)->lower->end_with(".jecomponent.wo"))
                {
                    if (fullupdate || fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                    {
                        if (fetched_scripts->contain(p) == false)
                            self.m_removing_component->set(pure_component_or_system_name(purename(p)), t);
                    }
                    else
                    {
                        // 无需更新，直接继续使用
                        new_scripts->set(p, (c, t));
                        do fetched_scripts->remove(p);
                    }
                }
            }
            return fetched_scripts;
        }
        public func update(self: ToWooContext, force: bool)
        {
            let new_scripts = {}mut: map<path_t, (unix1970_time_t, je::typeinfo)>;

            let fetched_components = self->update_component(new_scripts, force);
            let fetched_system = self->update_system(new_scripts, force);

            self.m_bad_towoo_script->clear;

            for (let (p, c) : fetched_components)
            {
                // TODO: 文件系统特性(大小写问题)，考虑更正确的姿势
                assert(filename(p)->lower->end_with(".jecomponent.wo"));
                do self.m_removing_component->remove(pure_component_or_system_name(purename(p)));
                match (towoo::update_component(pure_component_or_system_name(purename(p)), p->tostring))
                {
                value(t)?
                    new_scripts->set(p, (c, t));
                none?
                    {
                        self.m_bad_towoo_script->add(p);
                        if (self.m_loaded_towoo->contain(p))
                            new_scripts->set(p, (c, self.m_loaded_towoo[p][1]));
                    }
                }
            }
            towoo::update_api();
            for (let (p, c) : fetched_system)
            {
                // TODO: 文件系统特性(大小写问题)，考虑更正确的姿势
                assert(filename(p)->lower->end_with(".jesystem.wo"));
                do self.m_removing_system->remove(pure_component_or_system_name(purename(p)));
                match (towoo::update_system(pure_component_or_system_name(purename(p)), p->tostring))
                {
                value(t)?
                    new_scripts->set(p, (c, t));
                none?
                    {
                        self.m_bad_towoo_script->add(p);
                        if (self.m_loaded_towoo->contain(p))
                            new_scripts->set(p, (c, self.m_loaded_towoo[p][1]));
                    }
                }
            }
            self.m_loaded_towoo = new_scripts as map<path_t, (unix1970_time_t, je::typeinfo)>
                ->unsafe::cast :<dict<path_t, (unix1970_time_t, je::typeinfo)>>();
        }
        public func fast_check_for_update(self: ToWooContext)
        {
            for (let (p, (c, _)) : self.m_loaded_towoo)
            {
                if (isfile(p))
                {
                    match (lastwrite(p))
                    {
                    ok(last_modify_time)?
                        if (last_modify_time != c)
                            return true;
                    err(_)?;
                    }
                }
            }
            return false;
        }
        public func check_for_update(self: ToWooContext)
        {
            let fetched_scripts = {}mut: map<path_t, unix1970_time_t>;
            for (let p : allsubpath(self.m_project_path)->or([]))
            {
                if (isfile(p) && (
                    filename(p)->lower->end_with(".jesystem.wo")
                    || filename(p)->lower->end_with(".jecomponent.wo")))
                {
                    match (lastwrite(p))
                    {
                    ok(last_modify_time)?
                        fetched_scripts->set(p, last_modify_time);
                    err(_)?;
                    }
                }
            }
            if (fetched_scripts->len == self.m_loaded_towoo->len)
            {
                for (let (p, (c, _)) : self.m_loaded_towoo)
                {
                    if (fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                        return true;
                }
                return false;
            }
            return true;
        }
        public func create(proj_path: path_t)
        {
            let self = ToWooContext{
                m_project_path = proj_path,
                m_loaded_towoo = mut {},
                m_bad_towoo_script = []mut,
                m_removing_component = {}mut,
                m_removing_system = {}mut,
            };
            return self;
        }
        public func close(self: ToWooContext)
        {
            for (let (p, (_, tinfo)) : self.m_loaded_towoo)
            {
                if (filename(p)->lower->end_with(".jecomponent.wo"))
                    towoo::unregister_component(tinfo);
                else if (filename(p)->lower->end_with(".jesystem.wo"))
                    towoo::unregister_system(tinfo);
            }

            for (let (_, t) : self.m_removing_component)
                towoo::unregister_component(t);

            for (let (_, t) : self.m_removing_system)
                towoo::unregister_system(t);
        }
        public func get_bad_scripts(self: ToWooContext)
        {
            return self.m_bad_towoo_script->to_array->std::sort(\l, r = l < r;);
        }
        public func has_bad_scripts(self: ToWooContext)
        {
            return !self.m_bad_towoo_script->empty;
        }
        public func get_removing_components(self: ToWooContext)
        {
            return self.m_removing_component->unmapping->>\kv=kv[0];->std::sort(\l, r = l < r;);
        }
        public func get_removing_systems(self: ToWooContext)
        {
            return self.m_removing_system->unmapping->>\kv=kv[0];->std::sort(\l, r = l < r;);
        }
    }
}