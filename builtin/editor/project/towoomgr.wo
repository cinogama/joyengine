// project.towoo
// 用于储存编辑中的项目的ToWoo代码系统实例

import je;
import je::gui;

import pkg::fsys;

import builtin::editor::project::main;

using je;
using fsys;

namespace editor
{
    using ToWooContext = struct
    {
        m_project_path: path_t,
        m_loaded_towoo: mut dict<path_t, (int, je::typeinfo)>,
        m_bad_towoo_script: vec<path_t>,

        m_removing_component: map<string, void>,
        m_removing_system: map<string, void>,
    }
    {
        public func pure_component_or_system_name(name: string)
        {
            let idx = name->find(".");
            if (idx == -1)
                return name;
            return name->subto(0, idx);
        }
        func fetch_file(self: ToWooContext, type: string)
        {
            let fetched_scripts = {}mut: map<path_t, int>;
            for (let _, p : allsubpath(self.m_project_path)->unwarpor([]))
            {
                if (isfile(p) && filename(p)->lower->endwith(type))
                {
                    match (editor::crc64file(p->tostring))
                    {
                    value(crc64_code)?
                        fetched_scripts->set(p, crc64_code);
                    none?;
                    }
                }
            }
            return fetched_scripts;
        }
        func update_system(self: ToWooContext, new_scripts: map<path_t, (int, je::typeinfo)>, fullupdate: bool)
        {
            let fetched_scripts = self->fetch_file(".jesystem.wo");
            for (let p, (c, t) : self.m_loaded_towoo)
            {
                if (filename(p)->lower->endwith(".jesystem.wo"))
                {
                    if (fullupdate || fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                    {
                        if (fetched_scripts->contain(p) == false)
                            self.m_removing_system->set(pure_component_or_system_name(purename(p)), do nil);
                    }
                    else
                    {
                        // 无需更新，直接继续使用
                        new_scripts->set(p, (c, t));
                        do fetched_scripts->remove(p);
                    }
                }
            }
            return fetched_scripts;
        }
        func update_component(self: ToWooContext, new_scripts: map<path_t, (int, je::typeinfo)>, fullupdate: bool)
        {
            let fetched_scripts = self->fetch_file(".jecomponent.wo");
            for (let p, (c, t) : self.m_loaded_towoo)
            {
                if (filename(p)->lower->endwith(".jecomponent.wo"))
                {
                    if (fullupdate || fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                    {
                        if (fetched_scripts->contain(p) == false)
                            self.m_removing_component->set(pure_component_or_system_name(purename(p)), do nil);
                    }
                    else
                    {
                        // 无需更新，直接继续使用
                        new_scripts->set(p, (c, t));
                        do fetched_scripts->remove(p);
                    }
                }
            }
            return fetched_scripts;
        }
        public func update(self: ToWooContext, force: bool)
        {
            let new_scripts = {}mut: map<path_t, (int, je::typeinfo)>;

            let fetched_components = self->update_component(new_scripts, force);
            let fetched_system = self->update_system(new_scripts, force);

            self.m_bad_towoo_script->clear;

            for (let p, c : fetched_components)
            {
                // TODO: 文件系统特性(大小写问题)，考虑更正确的姿势
                assert(filename(p)->lower->endwith(".jecomponent.wo"));
                do self.m_removing_component->remove(pure_component_or_system_name(purename(p)));
                match (towoo::update_component(pure_component_or_system_name(purename(p)), p->tostring))
                {
                value(t)?
                    new_scripts->set(p, (c, t));
                none?
                    {
                        self.m_bad_towoo_script->add(p);
                        if (self.m_loaded_towoo->contain(p))
                            new_scripts->set(p, (c, self.m_loaded_towoo[p][1]));
                    }
                }
            }
            towoo::update_api();
            for (let p, c : fetched_system)
            {
                // TODO: 文件系统特性(大小写问题)，考虑更正确的姿势
                assert(filename(p)->lower->endwith(".jesystem.wo"));
                do self.m_removing_system->remove(pure_component_or_system_name(purename(p)));
                match (towoo::update_system(pure_component_or_system_name(purename(p)), p->tostring))
                {
                value(t)?
                    new_scripts->set(p, (c, t));
                none?
                    {
                        self.m_bad_towoo_script->add(p);
                        if (self.m_loaded_towoo->contain(p))
                            new_scripts->set(p, (c, self.m_loaded_towoo[p][1]));
                    }
                }
            }
            self.m_loaded_towoo = new_scripts as map<path_t, (int, je::typeinfo)>
                ->unsafe::cast :<dict<path_t, (int, je::typeinfo)>>();
        }
        public func fast_check_for_update(self: ToWooContext)
        {
            for (let p, (c, _) : self.m_loaded_towoo)
            {
                if (isfile(p))
                {
                    match (editor::crc64file(p->tostring))
                    {
                    value(crc64_code)?
                        if (crc64_code != c)
                            return true;
                    none?;
                    }
                }
            }
            return false;
        }
        public func check_for_update(self: ToWooContext)
        {
            let fetched_scripts = {}mut: map<path_t, int>;
            for (let _, p : allsubpath(self.m_project_path)->unwarpor([]))
            {
                if (isfile(p) && (
                    filename(p)->lower->endwith(".jesystem.wo")
                    || filename(p)->lower->endwith(".jecomponent.wo")))
                {
                    match (editor::crc64file(p->tostring))
                    {
                    value(crc64_code)?
                        fetched_scripts->set(p, crc64_code);
                    none?;
                    }
                }
            }
            if (fetched_scripts->len == self.m_loaded_towoo->len)
            {
                for (let p, (c, _) : self.m_loaded_towoo)
                {
                    if (fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                        return true;
                }
                return false;
            }
            return true;
        }
        public func create(proj_path: path_t)
        {
            let self = ToWooContext{
                m_project_path = proj_path,
                m_loaded_towoo = mut {},
                m_bad_towoo_script = []mut,
                m_removing_component = {}mut,
                m_removing_system = {}mut,
            };
            return self;
        }
        public func get_bad_scripts(self: ToWooContext)
        {
            return self.m_bad_towoo_script->toarray;
        }
        public func get_removing_components(self: ToWooContext)
        {
            return self.m_removing_component->unmapping->>\kv=kv[0];;
        }
        public func get_removing_systems(self: ToWooContext)
        {
            return self.m_removing_system->unmapping->>\kv=kv[0];;
        }
    }
}