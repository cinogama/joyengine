// project.towoo
// 用于储存编辑中的项目的ToWoo代码系统实例

import je;
import je::gui;

import pkg::filesystem;

import builtin::editor::project::main;

using je;
using filesys;

namespace editor
{
    using ToWooContext = struct
    {
        m_project_path: path_t,
        m_loaded_towoo: mut dict<path_t, (int, je::typeinfo)>,
    }
    {
        public func update(self: ToWooContext)
        {
            let fetched_scripts = {}mut: map<path_t, int>;
            for (let _, p : allsubpath(self.m_project_path)->unwarpor([]))
            {
                if (isfile(p) && (
                    extension(p)->lower == ".wosystem" 
                    || extension(p)->lower == ".wocomponent"))
                {
                    match (editor::crc64file(p->tostring))
                    {
                    value(crc64_code)?
                        fetched_scripts->set(p, crc64_code);
                    none?;
                    }
                }
            }

            let new_scripts = {}mut: map<path_t, (int, je::typeinfo)>;
            for (let p, (c, t) : self.m_loaded_towoo)
            {
                if (fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                {
                    // 旧的失效，释放！
                    if (extension(p)->lower == ".wosystem")
                        towoo::unregister_system(t);
                    else
                    {
                        assert(extension(p)->lower == ".wocomponent");
                        // 无需卸载component，后续会直接update
                    }
                }
                else
                {
                    // 无需更新，直接继续使用
                    new_scripts->set(p, (c, t));
                    do fetched_scripts->remove(p);
                }
            }

            for (let p, c : fetched_scripts)
            {
                // TODO: 文件系统特性(大小写问题)，考虑更正确的姿势
                if (extension(p)->lower == ".wosystem")
                    new_scripts->set(p, (c, towoo::register_system(purename(p), p->tostring)->or(\v=v;)));
                else
                {
                    assert(extension(p)->lower == ".wocomponent");
                    new_scripts->set(p, (c, towoo::update_component(purename(p), p->tostring)->valor(self.m_loaded_towoo[p][1])));
                }
            }
            self.m_loaded_towoo = new_scripts as map<path_t, (int, je::typeinfo)>
                ->unsafe::cast :<dict<path_t, (int, je::typeinfo)>>();
        }
        public func fast_check_for_update(self: ToWooContext)
        {
            for (let p, (c, _) : self.m_loaded_towoo)
            {
                if (isfile(p))
                {
                    match (editor::crc64file(p->tostring))
                    {
                    value(crc64_code)?
                        if (crc64_code != c)
                            return true;
                    none?;
                    }
                }
            }
            return false;
        }
        public func check_for_update(self: ToWooContext)
        {
            let fetched_scripts = {}mut: map<path_t, int>;
            for (let _, p : allsubpath(self.m_project_path)->unwarpor([]))
            {
                if (isfile(p) && (
                    extension(p)->lower == ".wosystem" 
                    || extension(p)->lower == ".wocomponent"))
                {
                    match (editor::crc64file(p->tostring))
                    {
                    value(crc64_code)?
                        fetched_scripts->set(p, crc64_code);
                    none?;
                    }
                }
            }
            if (fetched_scripts->len == self.m_loaded_towoo->len)
            {
                for (let p, (c, _) : self.m_loaded_towoo)
                {
                    if (fetched_scripts->contain(p) == false || fetched_scripts[p] != c)
                        return true;
                }
                return false;
            }
            return true;
        }
        public func create(proj_path: path_t)
        {
            let self = ToWooContext{
                m_project_path = proj_path,
                m_loaded_towoo = mut {},
            };
            return self;
        }
    }
}