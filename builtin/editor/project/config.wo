// project.config
// 用于储存编辑中的可编辑配置数据
import pkg::interface;
import builtin::api::serialize::main;

namespace editor::Project
{
    public using Config<T> = struct{
        m_value: mut T,
        m_widget: (T)=>option<T>,
        m_update_callback: (T, T)=>bool,
        m_tostring: (T)=>string,
        m_parse: (string)=>option<T>,
        m_apply: (T)=>string,
    }
    {
        public func create<T>(
            val: T, 
            widget: (T)=>option<T>, 
            callback: (T, T)=>bool,
            tostring: (T)=>string,
            parse: (string)=>option<T>,
            apply: (T)=>string)
        {
            return Config{
                m_value = mut val,
                m_widget = widget,
                m_update_callback = callback,
                m_tostring = tostring,
                m_parse = parse,
                m_apply = apply,
            };
        }
        public func modify<T>(self: Config<T>, newval: T)
        {
            if (! self.m_update_callback(self.m_value, newval))
                return false;
            self.m_value = newval;
            return true;
        }

        public func edit<T>(self: Config<T>)
        {
            return self.m_widget(self.m_value)
                ->> \v = self->modify(v);
                ->  or(false);
        }
        public func tostring<T>(self: Config<T>)
        {
            return self.m_tostring(self.m_value);
        }
        public func parse<T>(self: Config<T>, dat: string)
        {
            return self.m_parse(dat)
                ->> \val = self->modify(val);
                ->  or(false);
        }
        public func apply<T>(self: Config<T>)
        {
            return self.m_apply(self.m_value);
        }
    }

    // 这是一个类接口对象，用于包装Project::Config<T>

    interface! IConfig
    {
        public func tostring(self: IConfig)=> string;
        public func parse(self: IConfig, str: string)=>bool;
        public func edit(self: IConfig)=> bool;
        public func apply(self: IConfig)=> string;
    }
}