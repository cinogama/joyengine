import je.tickline;

namespace editor::Tickline
{
    public using Object = struct{
        m_name: mut string,
        m_euid: je::tickline::euid_t,
        m_data: mut string,     // json
        m_source : mut string,
    }
    {
        public func generate_code(self: Object)
        {
            return F"func(e: je::entity)\{{self.m_source}\}";
        }
    }
    public using Context = struct {
        m_objects: vec<Object>,
    }
    {
        public func create()
        {
            return Context{
                m_objects = []mut,
            };
        }

        public func generate_code(self: Context)
        {
            // 用于生成代码
            let mut src = @"
import je;
import je.tickline;
import builtin.tickline.main;

let _entity_logics = {
            "@;
            for (let _, ob : self.m_objects)
            {
                src += F"_entity_logics[{ob.m_euid: string->enstring}: je::tickline::euid_t] = {ob->generate_code},\n";
            }

            src += @"
            };
let _events_mgr_instance = Tickline::Runtime::LayersAndEventsManager::create([]);
            "@;
           
            src += @"
namespace Tickline
{
    extern func Execute()=> bool
    {
        return _events_mgr_instance->execute();
    }
}
je::tickline::engine::init(_entity_logics->unmapping);
            "@;

            return src;
        }
    }
}