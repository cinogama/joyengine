import je;
import je::editor;

namespace jeapi::varify
{
    public using EngineVersionInfo = struct{
        engine_core_version: string,
        engine_commit_version: string,
        woolang_version: string,
    }
    {
        using je::editor;

        public func current()
        {
            return EngineVersionInfo{
                engine_core_version = build_version(),
                engine_commit_version = build_commit(),
                woolang_version = woolang_version(),
            };
        }
        public func restore(dat: dict<string, string>)
        {
            return dat->get("engine_core_version")
                =>> \ecv = dat->get("engine_commit_version")
                    =>> \eov = dat->get("woolang_version")
                        ->> \wov = EngineVersionInfo{
                                engine_core_version = ecv,
                                engine_commit_version = eov,
                                woolang_version = wov,
                            };
                        ;
                    ;
                ;

        }
        public func serialize(self: EngineVersionInfo)
        {
            return {
                ["engine_core_version"] = self.engine_core_version,
                ["engine_commit_version"] = self.engine_commit_version,
                ["woolang_version"] = self.woolang_version,
            }->serialize->unwrap;
        }
        public func isequal(self: EngineVersionInfo, another: EngineVersionInfo)
        {
            return self.engine_core_version == another.engine_core_version
                && self.engine_commit_version == another.engine_commit_version
                && self.woolang_version == another.woolang_version;
        }
    }
}