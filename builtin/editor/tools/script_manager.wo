import pkg::vm;

namespace editor::tools
{
    let mut _available_tool_scripts = {}: dict<string, filesys::path_t>;
    public func get_available_tool_scripts()
    {
        return _available_tool_scripts->unmapping->>\kv = kv[0];;
    }
    public func run_tool_script(script: string)
    {
        match (_available_tool_scripts->get(script))
        {
        none?
            return result::err("没有找到此脚本");
        value(path)?
            {
                match (vm::load(path->tostring()))
                {
                err(msg)?
                    return result::err(F"运行脚本失败：{msg}");
                ok(vmm)?
                    {
                        let r = vmm->run();
                        do vmm->close();
                        return result::ok(r);
                    }
                }             
            }
        }
    }
    public func update_tool_scripts(project: Project)
    {
        let new_path_results = {}mut: map<string, filesys::path_t>;

        match (filesys::allsubpath(project.m_path)
            =>> \p = filesys::allsubpath(filesys::normalize(std::exepath()))
                ->> \ep = p->connect(ep);
                ;)
        {
        err(errno)?
            jeapi::gui::form::errmsg("失败", F"获取项目中的工具脚本失败({errno})");
        ok(subpaths)?
            {
                for (let _, path : subpaths)
                    if (filesys::extension(path)->lower == ".jewo")
                    {
                        new_path_results->set(filesys::purename(path), path);
                    }
            }
        }

        _available_tool_scripts = 
                    new_path_results as map<string, filesys::path_t>->unsafe::cast:<dict<string, filesys::path_t>>;
    }
}