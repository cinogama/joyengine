import je::gui;

using je::gui;

namespace editor::gui::edit_forms
{
    let icon_world_image = je::graphic::texture::load(option::none, F"!/builtin/icon/System.png")->unwrap;

    using WorldContext  = struct {
        name  : mut string,
        edit_world : option<je::world>,
        current_project: Project,
        has_append_types : vec<je::typeinfo>,
        has_active_types : vec<je::typeinfo>,
        not_append_types : vec<je::typeinfo>,

        target_path: fsys::path_t,
        callback: option<(je::world)=>bool>,

        tversion: int,
    }
    {
        func _sort(self: WorldContext)
        {
            self.has_append_types->copy(self.has_append_types->std::sort(\a, b = a->name() < b->name();));
            self.has_active_types->copy(self.has_active_types->std::sort(\a, b = a->name() < b->name();));
            self.not_append_types->copy(self.not_append_types->std::sort(\a, b = a->name() < b->name();));
        }
        public func create(proj: Project, name: string, path: fsys::path_t, callback: (je::world)=>bool)
        {
            let context = WorldContext{
                name = mut name,
                edit_world = option::none,
                current_project = proj,
                has_append_types = []mut,
                has_active_types = []mut,
                not_append_types = je::typeinfo::get_all_systems_types()->to_vec,

                target_path = path,
                callback = option::value(callback),
                tversion = je::typeinfo::get_unregister_count(),
            };
    
            let all_systems = []mut: typeof(context.not_append_types);
            context.not_append_types->swap(all_systems);
        
            for (let sys : all_systems)
                // 不显示所有编辑器/图形系统
                if (!sys->name()->begin_with("Editor::"))
                    if (sys->name()->begin_with("Translation::"))
                        // 默认添加Translation相关系统
                        context.has_active_types->add(sys);
                    else if (sys->name()->begin_with("Tickline::"))
                        // 默认添加Tickline相关系统
                        context.has_append_types->add(sys);
                    else
                        context.not_append_types->add(sys);

            // 添加默认图形管线
            context->active("Graphic::UnlitGraphicPipelineSystem");

            context->append("Animation::FrameAnimationSystem");
            context->append("Script::ScriptRuntimeSystem");
            
            context->_sort();
            return context;
        }    

        public func edit(proj: Project, world: je::world)=> option<WorldContext>
        {
            let context = WorldContext{
                name = mut world->name(),
                edit_world = option::value(world),
                current_project = proj,
                has_append_types = []mut,
                has_active_types = []mut,
                not_append_types = je::typeinfo::get_all_systems_types()->to_vec,

                target_path = proj->get_world_path(world)->unwrap,
                callback = option::none,
                tversion = je::typeinfo::get_unregister_count(),
            };
    
            let all_systems = []mut: typeof(context.not_append_types);
            context.not_append_types->swap(all_systems);
        
            for (let sys : all_systems)
                // 不显示所有编辑器/图形系统
                if (!sys->name()->begin_with("Editor::"))
                    context.not_append_types->add(sys);
    
            // 处理一下已经创建/添加的系统
            for (let actived_sys : world->get_all_systems())
                if (!actived_sys->name()->begin_with("Editor::"))
                    context->active(actived_sys->name());
    
            match(proj->get_worlds_runtime_systems(world))
            {
            value(runtime_systems)?
                for (let actived_sys : runtime_systems)
                    context->append(actived_sys->name());
            none?
                ;
            }

            context->_sort();
            return option::value(context);
        }

        public func active(self: WorldContext, type_name: string)
        {
            // 将选定实体添加进立即激活的列表中
            match(je::typeinfo::load(type_name))
            {
            value(type)?
                if (self.has_active_types->find(type) == -1)
                {
                    self.has_active_types->add(type);
                    do self.not_append_types->remove(self.not_append_types->find(type));
                    do self.has_append_types->remove(self.has_append_types->find(type));
                }
            none?
                je::logfatal("没有找到系统: ", type_name);
            }
        }
        public func unuse(self: WorldContext, type_name: string)
        {
            // 将选定实体添加进未激活的列表中
            match(je::typeinfo::load(type_name))
            {
            value(type)?
                if (self.not_append_types->find(type) == -1)
                {
                    self.not_append_types->add(type);
                    do self.has_append_types->remove(self.has_append_types->find(type));
                    do self.has_active_types->remove(self.has_active_types->find(type));
                }
            none?
                je::logfatal("没有找到系统: ", type_name);
            }
        }
        public func append(self: WorldContext, type_name: string)
        {
            // 将选定实体添加进运行时激活的列表中
            match(je::typeinfo::load(type_name))
            {
            value(type)?
                if (self.has_append_types->find(type) == -1)
                {
                    self.has_append_types->add(type);
                    do self.not_append_types->remove(self.not_append_types->find(type));
                    do self.has_active_types->remove(self.has_active_types->find(type));
                }
            none?
                je::logfatal("没有找到系统: ", type_name);
            }
        }
    }

    func show_system(typename: string)
    {
        using je::gui;

        BeginGroup();
            PushIDStr(typename);
                do ImageButtonScale(icon_world_image, 1.);
            PopID();
            if (BeginDragDropSource())
            {
                do SetDragDropPayload("JEDITOR_SYSTEM_TYPE", typename);
                    Text(F"System: {typename}");
                EndDragDropSource();
            }

            SameLine();
            Text(typename);
        EndGroup();
    }

    func show_active_systems(context: WorldContext, width: real, height: real)
    {
        using je::gui;
        do BeginChildSize("active_system", width, height);
            Text("环境系统（编辑/运行时生效）");
            for(let component_type : context.has_active_types)
                show_system(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            match (AcceptDragDropPayload("JEDITOR_SYSTEM_TYPE"))
            {
            value(data)?
                // 有组件被拖动至此
                context->active(data);
            none?
                ;
            }
            EndDragDropTarget();
        }
    }

    func show_append_systems(context: WorldContext, width: real, height: real)
    {
        using je::gui;
        do BeginChildSize("append_system", width, height);
            Text("运行时系统（运行时生效）");
            for(let component_type : context.has_append_types)
                show_system(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            match (AcceptDragDropPayload("JEDITOR_SYSTEM_TYPE"))
            {
            value(data)?
                // 有组件被拖动至此
                context->append(data);
            none?
                ;
            }
            EndDragDropTarget();
        }
    }

    func show_usable_systems(context: WorldContext, width: real)
    {
        using je::gui;
        do BeginChildSize("usable_system", width, 0.);
            Text("可用系统");
            for(let component_type : context.not_append_types)
                show_system(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            match (AcceptDragDropPayload("JEDITOR_SYSTEM_TYPE"))
            {
            value(data)?
                // 有组件被拖动至此
                context->unuse(data);
            none?
                ;
            }
            EndDragDropTarget();
        }
    }

    func menu_bar(context: WorldContext)
    {
        using je::gui;

        let mut create_world = false;

        if (BeginMenuBar())
        {
            if (context.edit_world->is_value())
            {
                if (MenuItemEnabled("更新", context.name != ""))
                    create_world = true;
            }
            else if (MenuItemEnabled("创建", context.name != ""))
               create_world = true;
            
            EndMenuBar();
        }

        return create_world;
    }

    public func show_world_creator(_: EditorContext, world_context: WorldContext)
    {
        if (world_context.tversion != je::typeinfo::get_unregister_count())
        {
            jeapi::gui::form::errmsg("提示", "由于注册的类型发生变化，世界系统编辑窗口已经关闭");
            return false;
        }

        je::gui::SetNextWindowSizeConstraints((500., 300.), (2000., 1000.));
        let mut open = true;
        match (BeginAttrOpen(world_context.edit_world->is_value() ? F"编辑世界##{JobID()}" | F"创建新世界##{JobID()}", 
            WindowsAttribute::ImGuiWindowFlags_MenuBar))
        {
        value(show)?
            if (show)
            {
                if (menu_bar(world_context))
                {
                    match (world_context.edit_world)
                    {
                        none?
                        {
                            let created_world = world_context.current_project->create_new_world(world_context.target_path);

                            created_world->set_name(world_context.name);

                            for (let active_sys : world_context.has_active_types)
                                do created_world->add_system(active_sys);

                            if (! world_context.current_project->set_worlds_runtime_systems(
                                created_world, world_context.has_append_types->to_array))
                            {
                                je::logfatal("无法添加运行时激活的系统，未知的错误");
                            }
                            launch(func(){
                                // 为了保证世界数据写入完全之后再执行回调（一般用于序列化并保存）
                                // 此处摇匀一下，不过仍然需要考虑不同世界位于不同线程可能导致的问题
                                // 摇晃一次即可，摇晃三次纯属玄学
                                std::yield();
                                std::yield();
                                std::yield();

                                if ((world_context.callback->unwrap)(created_world) == false)
                                {
                                    world_context.current_project->destroy_world(created_world)->unwrap;
                                }
                                return false;
                            }, ());

                        }
                        value(world)?
                        {
                            if (! world_context.current_project->set_worlds_runtime_systems(
                                world, world_context.has_append_types->to_array))
                            {
                                je::logfatal("无法添加运行时激活的系统，未知的错误");
                            }
                            
                            let active_systems = world->get_all_systems();

                            // 当前世界中还没有这个系统，立即添加
                            do world_context.has_active_types
                                ->forall(\t: je::typeinfo=active_systems->find(t) == -1;)
                                ->map(\t: je::typeinfo=world->add_system(t););

                            // 系统被移除
                            do active_systems
                                ->forall(\t: je::typeinfo = world_context.not_append_types->find(t) != -1 
                                                        || world_context.has_append_types->find(t) != -1;)
                                ->map(\t: je::typeinfo=world->remove_system(t););
                            world->set_name(world_context.name);
                        }
                    }
                    open = false;
                }

                do InputText("名称", world_context.name)
                    ->> \new_text = world_context.name = new_text;
                    ;

                let (available_width, available_height) = GetContentRegionAvail();

                BeginGroup();
                show_append_systems(world_context, available_width / 2., available_height * 2. / 3.);
                show_active_systems(world_context, available_width / 2., available_height / 3.);
                EndGroup();

                SameLine();
                show_usable_systems(world_context, available_width / 2.);
            }
        none?
            open = false;
        }

        End(); // End of Form

        return open;
    }
}