// gui.edit_forms.viewport
// 用于显示画面！是最主要的编辑器窗口

import je::gui;
import builtin::api::gui::form::input;
import builtin::api::gui::form::ask;

using je::gui;

namespace editor::gui::edit_forms
{
    public func show_viewport(context: EditorContext, show: mutable<bool>)
    {
        if (show->get)
        {
            let proj = context->get_project;

            // 坏！不过之后再来改吧
            static let mut windows_moveable = true;
            je::gui::SetNextWindowSizeConstraints((300., 200.), (2000., 1100.));
            show->set(BeginAttrOpen("调试器视口", 
                WindowsAttribute::ImGuiWindowFlags_MenuBar
                + WindowsAttribute::ImGuiWindowFlags_NoBringToFrontOnFocus
                + (windows_moveable 
                    ? WindowsAttribute::ImGuiWindowFlags_None
                    | WindowsAttribute::ImGuiWindowFlags_NoMove)));
            let debug_world = proj->get_editing_world;
            let debug_camera_entity = debug_world
                =>> \w = w->editor::get_all_entities
                    ->forall(\e = 
                        e->get_component(je::typeinfo::load("Editor::EditorWalker")->val)->has
                        && e->get_component(je::typeinfo::load("Camera::RendToFramebuffer")->val)->has
                    ;)
                    ->reduce(\l, _ = l;)
                    ;
            ;

            if (BeginMenuBar())
            {
                if (! proj->is_debugging)
                {
                    if (MenuItemShortcut("调试运行", "Ctrl + P") 
                        || (IsWindowFocused() && jeapi::gui::inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::P])))
                    {
                        do context->start_debug()->error->>\e = jeapi::gui::form::errmsg("失败", F"开始调试失败, {e}");;
                        je::loginfo("=======================调试开始=======================");
                        launch(func(){
                            if (proj->is_debugging)
                            {
                                do BeginAttr("调试工具", WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize);
                                    if (Button("终止当前调试") || jeapi::gui::inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::ESC]))
                                    {
                                        do context->stop_debug()->error->>\e = jeapi::gui::form::errmsg("失败", F"终止调试失败, {e}");;
                                        je::loginfo("=======================调试结束=======================");
                                    }
                                End();
                                return true;
                            }
                            return false;
                        }, ());
                    }
                }
                else
                {
                    if (MenuItem("终止调试"))
                        do context->stop_debug()->error->>\e = jeapi::gui::form::errmsg("失败", F"终止调试失败, {e}");;
                }
                if (MenuItemEnabled("3D/2D编辑模式", debug_camera_entity->has))
                {
                    let o2d_type = je::typeinfo::load("Camera::OrthoProjection")->val;
                    let p3d_type = je::typeinfo::load("Camera::PerspectiveProjection")->val;

                    if (debug_camera_entity->val->get_component(o2d_type)->has)
                    {
                        debug_camera_entity->val->remove_component(o2d_type);
                        do debug_camera_entity->val->add_component(p3d_type);
                    }
                    else
                    {
                        assert(debug_camera_entity->val->get_component(p3d_type)->has);
                        debug_camera_entity->val->remove_component(p3d_type);
                        do debug_camera_entity->val->add_component(o2d_type);
                    }
                }
                if (MenuItemEnabled("开启/关闭2D光照预览", debug_camera_entity->has))
                {
                    let l2d_camera_pass_component_type = je::typeinfo::load("Light2D::CameraPostPass")->val;
                    let shaders_type = je::typeinfo::load("Renderer::Shaders")->val;

                    if (debug_camera_entity->val->get_component(l2d_camera_pass_component_type)->has)
                    {
                        debug_camera_entity->val->remove_component(l2d_camera_pass_component_type);
                        debug_camera_entity->val->remove_component(shaders_type);
                    }
                    else
                    {
                        do debug_camera_entity->val->add_component(l2d_camera_pass_component_type);
                        do debug_camera_entity->val->add_component(shaders_type);

                        let debug_camera_eid = jeapi::debug::get_entity_editor_id(debug_camera_entity->val);

                        match (je::graphic::shader::load("@/resource/shader/Light2DCameraPass.shader"))
                        {
                        value(shader)? 
                            // 注意，因为实体刚刚添加组件，因此在当前帧无法获取组件
                            // 因此用个launch确保发配下一帧执行
                            launch(func(){debug_camera_eid->justdo(\e = e->editor::graphic::set_shaders([shader]);); return false;}, ());
                            
                        none? jeapi::gui::form::errmsg("加载着色器失败", "无法加载文件@/resource/shader/Light2DCameraPass.shader作为着色器");
                        }                 
                    }
                }
                static let MOVER_MODE = {
                    [je::editor::mover_mode::nospecify] = "未指定",
                    [je::editor::mover_mode::selection] = "仅选中",
                    [je::editor::mover_mode::movement] = "移动",
                    [je::editor::mover_mode::rotation] = "旋转",
                    [je::editor::mover_mode::scale] = "缩放",
                    };
                static let mut mover_mode = je::editor::mover_mode::selection;
                do debug_world->>\w = je::editor::set_editing_mover_mode(w, mover_mode);;

                if (IsWindowFocused())
                {
                    if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::C]))
                        mover_mode = je::editor::mover_mode::selection;
                    else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::T]))
                        mover_mode = je::editor::mover_mode::movement;
                    else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::R]))
                        mover_mode = je::editor::mover_mode::rotation;
                    else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::S]))
                        mover_mode = je::editor::mover_mode::scale;
                    else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB]))
                    {
                        static let mut last_click_time = 0.;
                        if (std::time() - last_click_time <= 0.2)
                        {
                            if ((mover_mode +:= 1: je::editor::mover_mode) > je::editor::mover_mode::scale)
                                mover_mode = je::editor::mover_mode::selection;
                        }
                        last_click_time = std::time();
                    }
                }

                if (BeginMenuEnabled(MOVER_MODE[mover_mode], debug_camera_entity->has))
                {   
                    if (MenuItemShortcutSelectedEnabled("仅选中", "Tab + C", mover_mode == je::editor::mover_mode::selection, debug_camera_entity->has)->has)
                        mover_mode = je::editor::mover_mode::selection;
                    if (MenuItemShortcutSelectedEnabled("移动", "Tab + T", mover_mode == je::editor::mover_mode::movement, debug_camera_entity->has)->has)
                        mover_mode = je::editor::mover_mode::movement;
                    if (MenuItemShortcutSelectedEnabled("旋转", "Tab + R", mover_mode == je::editor::mover_mode::rotation, debug_camera_entity->has)->has)
                        mover_mode = je::editor::mover_mode::rotation;
                    if (MenuItemShortcutSelectedEnabled("缩放", "Tab + S", mover_mode == je::editor::mover_mode::scale, debug_camera_entity->has)->has)
                        mover_mode = je::editor::mover_mode::scale;
                    EndMenu();
                }
                EndMenuBar();
            }

            match(debug_camera_entity)
            {
            value(camera_entity)?
                {
                    let (available_width, available_height) = GetContentRegionAvail();
                    let mut need_update_frame = false;
                    match (je::editor::get_framebuf_texture(camera_entity, 0))
                    {
                    value(frametex)?
                        {
                            let (frame_tex_width, frame_tex_height) = frametex->size;

                            let (wx, wy) = GetWindowPos();
                            let (lupx, lupy) = GetCursorPos();

                            ImageSize(frametex, available_width, available_height);

                            let (itemw, itemh) = GetItemRectSize();
                            let (mx, my) = GetMousePos();
                            let (offsetx, offsety) = (mx - lupx - wx, my - lupy - wy);

                            if (IsItemHovered())
                            {
                                // 在渲染区域内！
                                windows_moveable = false;

                                let uniform_mpos_x = 2. * ((offsetx:int - itemw:int/2):real / itemw), 
                                    uniform_mpos_y = -2. * ((offsety:int - itemh:int/2):real / itemh);

                                je::editor::enable_editor_system(true);
                                je::editor::update_editor_mouse_pos(
                                    uniform_mpos_x, 
                                    uniform_mpos_y, 
                                    wx:int + lupx:int + (itemw:int/2), 
                                    wy:int + lupy:int + (itemh:int/2));

                                static let 
                                    mut right_key_down_time = 0., 
                                    mut noclick_flag = true;

                                if (je::input::keydown(je::keycode::MOUSE_R_BUTTION) && noclick_flag)
                                {
                                    noclick_flag = false;
                                    right_key_down_time = std::time();
                                }

                                if (!je::input::keydown(je::keycode::MOUSE_R_BUTTION))
                                {
                                    noclick_flag = true;
                                    if (std::time() - right_key_down_time < 0.2)
                                        OpenPopup("RightClickContextMenu");
                                }
                            }
                            else
                            {
                                windows_moveable = true;
                                je::editor::enable_editor_system(false);
                            }

                            if (frame_tex_width != available_width: int || frame_tex_height != available_height: int)
                                need_update_frame = true;
                        }
                    none?
                        need_update_frame = true;
                    }

                    if (need_update_frame)
                    {
                        if (available_width: int > 0 && available_height: int > 0)
                            camera_entity->je::editor::apply_camera_framebuf_setting(
                                available_width: int, available_height: int);
                    }

                    if (BeginPopup("RightClickContextMenu"))
                    {
                        entity_edit_context_menu(context, debug_world->val, context->get_editing_entity);
                        EndPopup();
                    }

                    match (jeapi::gui::widget::accept_file_for_current_widget())
                    {
                    value(path)?
                        {
                            let filepath = proj->parse_path_normalize(path);
                            if (filesys::extension(filepath)->lower == ".jeentity")
                            {
                                let succ = filesys::readall(filepath)
                                    =>> \text = text->dict::deserialize
                                        ->> \dat = dat
                                            ->> \k, v = (k: string, v);
                                            ;
                                        ;
                                    =>> \dat = debug_world
                                        =>> \w = jeapi::deserialize::entity(w, dat, true);
                                        ;
                                    ->  has;
                                    
                                if (!succ)
                                    jeapi::gui::form::errmsg("失败", "加载实体失败");
                            }
                        }
                    none?;
                    }
                }
            none?
                Text("没有编辑中的场景");
            }

            End();
        }
    }
}