// gui.edit_forms.viewport
// 用于显示画面！是最主要的编辑器窗口

import je::gui;
import builtin::editor::gui::form::input;
import builtin::editor::gui::form::ask;

using je::gui;

namespace editor::gui::edit_forms
{
    public func update_camera_2d3d_mode(e: je::entity, to2d: bool)
    {
        if (to2d)
        {
            do e->towoo::remove_component :<Camera::PerspectiveProjection>;
            do e->towoo::add_component :<Camera::OrthoProjection>;
        }
        else
        {
            do e->towoo::remove_component :<Camera::OrthoProjection>;
            do e->towoo::add_component :<Camera::PerspectiveProjection>;
        }
    }
    public func update_camera_2dlight_mode(e: je::entity, enable_2dlight: bool)
    {
        if (enable_2dlight)
        {
            match (je::graphic::shader::load(e->get_world->get_universe->option::value, "@/resource/shader/CameraDefer2DPass.shader"))
            {
            value(shader)? 
                {
                    do e->towoo::add_component :<Light2D::CameraPostPass>;
                    let shaders = e->towoo::add_component :<Renderer::Shaders>;

                    do shaders->>\shad = shad->set_shaders([shader]);;
                }                
            none? jeapi::gui::form::errmsg("加载着色器失败", "无法加载文件@/resource/shader/CameraDefer2DPass.shader作为着色器");
            }                 
        }
        else
        {
            do e->towoo::remove_component :<Light2D::CameraPostPass>;
            do e->towoo::remove_component :<Renderer::Shaders>;
        }
    }


    public func show_viewport(context: EditorContext, open: std::mutable<bool>)
    {
        if (open->get)
        {
            let proj = context->get_project;

            // 坏！不过之后再来改吧
            static let mut windows_moveable = true;
            je::gui::SetNextWindowSizeConstraints((300., 200.), (2000., 1100.));
            open->set(true);

            match (BeginAttrOpen("调试器视口", 
                WindowsAttribute::ImGuiWindowFlags_MenuBar
                + WindowsAttribute::ImGuiWindowFlags_NoBringToFrontOnFocus
                + (windows_moveable 
                    ? WindowsAttribute::ImGuiWindowFlags_None
                    | WindowsAttribute::ImGuiWindowFlags_NoMove)))
            {
            value(show)?
                if (show)
                {
                    let debug_world = proj->get_editing_world;
                    let debug_camera_root = debug_world
                        =>> \w = get_debug_camera_root(w);
                        ;
                    let debug_camera_entity = debug_world
                        =>> \w = get_debug_camera(w);
                        ;

                    if (BeginMenuBar())
                    {
                        if (! proj->is_debugging)
                        {
                            if (MenuItemShortcut("调试运行", "Ctrl + P") 
                                || (IsWindowFocused() && jeapi::gui::inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::P])))
                            {
                                do context->start_debug()->error->>\e = jeapi::gui::form::errmsg("失败", F"开始调试失败, {e}");;
                                je::loginfo("=======================调试开始=======================");
                                launch(func(){
                                    if (proj->is_debugging)
                                    {
                                        if (BeginAttr("调试工具", 
                                            WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                                            + WindowsAttribute::ImGuiWindowFlags_NoDocking
                                            + WindowsAttribute::ImGuiWindowFlags_NoCollapse))
                                        {
                                            do DragFloat("时间缩放", proj->get_env->get_universe->get_timescale, 0.1, 0.0, 16.0)
                                                ->> \val = proj->get_env->get_universe->set_timescale(val);
                                                ;
                                            if (Button("终止当前调试") || jeapi::gui::inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::ESC]))
                                            {
                                                proj->get_env->get_universe->set_timescale(1.);
                                                do context->stop_debug()->error->>\e = jeapi::gui::form::errmsg("失败", F"终止调试失败, {e}");;
                                                je::loginfo("=======================调试结束=======================");
                                            }
                                        }
                                        End();
                                        return true;
                                    }
                                    return false;
                                }, ());
                            }
                        }
                        else
                        {
                            if (MenuItem("终止调试"))
                                do context->stop_debug()->error->>\e = jeapi::gui::form::errmsg("失败", F"终止调试失败, {e}");;
                        }
                        if (MenuItemEnabled("3D/2D编辑模式", debug_camera_entity->has))
                        {
                            update_camera_2d3d_mode(debug_camera_entity->val, 
                                !debug_camera_entity->val->towoo::get_component :<Camera::OrthoProjection>->has);
                        }
                        if (MenuItemEnabled("开启/关闭2D光照预览", debug_camera_entity->has))
                        {
                            update_camera_2dlight_mode(debug_camera_entity->val,
                                !debug_camera_entity->val->towoo::get_component :<Light2D::CameraPostPass>->has);
                        }
                        static let MOVER_MODE = {
                            [je::editor::mover_mode::nospecify] = "未指定",
                            [je::editor::mover_mode::selection] = "仅选中",
                            [je::editor::mover_mode::movement] = "移动",
                            [je::editor::mover_mode::rotation] = "旋转",
                            [je::editor::mover_mode::scale] = "缩放",
                            };
                        static let COORD_MODE = {
                            [je::editor::coord_mode::global] = "全局坐标系",
                            [je::editor::coord_mode::local] = "局部坐标系",
                            };

                        let mut mover_mode = debug_world->>\w = je::editor::get_editing_mover_mode(w);->valor(je::editor::mover_mode::selection);
                        let mut coord_mode = debug_world->>\w = je::editor::get_editing_coord_mode(w);->valor(je::editor::coord_mode::global);

                        if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::C]))
                            mover_mode = je::editor::mover_mode::selection;
                        else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::T]))
                            mover_mode = je::editor::mover_mode::movement;
                        else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::R]))
                            mover_mode = je::editor::mover_mode::rotation;
                        else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::S]))
                            mover_mode = je::editor::mover_mode::scale;
                        else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::G]))
                            coord_mode = je::editor::coord_mode::global;
                        else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB, je::keycode::L]))
                            coord_mode = je::editor::coord_mode::local;
                        else if (jeapi::gui::inputmgr::keyspush([je::keycode::TAB]))
                        {
                            static let mut last_click_time = 0.;
                            if (std::time() - last_click_time <= 0.2)
                            {
                                if ((mover_mode +:= 1: je::editor::mover_mode) > je::editor::mover_mode::scale)
                                    mover_mode = je::editor::mover_mode::selection;
                            }
                            last_click_time = std::time();
                        }

                        if (BeginMenuEnabled(F"{MOVER_MODE[mover_mode]}|{COORD_MODE[coord_mode]}", debug_camera_entity->has))
                        {   
                            if (MenuItemShortcutSelectedEnabled("仅选中", "Tab + C", mover_mode == je::editor::mover_mode::selection, debug_camera_entity->has)->has)
                                mover_mode = je::editor::mover_mode::selection;
                            if (MenuItemShortcutSelectedEnabled("移动", "Tab + T", mover_mode == je::editor::mover_mode::movement, debug_camera_entity->has)->has)
                                mover_mode = je::editor::mover_mode::movement;
                            if (MenuItemShortcutSelectedEnabled("旋转", "Tab + R", mover_mode == je::editor::mover_mode::rotation, debug_camera_entity->has)->has)
                                mover_mode = je::editor::mover_mode::rotation;
                            if (MenuItemShortcutSelectedEnabled("缩放", "Tab + S", mover_mode == je::editor::mover_mode::scale, debug_camera_entity->has)->has)
                                mover_mode = je::editor::mover_mode::scale;
                            Separator();
                            if (MenuItemShortcutSelectedEnabled("全局坐标系", "Tab + G", coord_mode == je::editor::coord_mode::global, debug_camera_entity->has)->has)
                                coord_mode = je::editor::coord_mode::global;
                            if (MenuItemShortcutSelectedEnabled("局部坐标系", "Tab + L", coord_mode == je::editor::coord_mode::local, debug_camera_entity->has)->has)
                                coord_mode = je::editor::coord_mode::local;
                            Separator();
                            if (MenuItem("重置视口摄像机"))
                            {
                                mover_mode = je::editor::mover_mode::selection;
                                coord_mode = je::editor::coord_mode::global;

                                func reset_entity_trans(e)
                                {
                                    let lp = e->towoo::get_component:<Transform::LocalPosition>;
                                    let lr = e->towoo::get_component:<Transform::LocalRotation>;

                                    do lp->> \lp = lp.pos->set <| (0., 0., 0.): vec3;;
                                    do lr->> \lr = lr.rot->set <| quat::ident;;
                                }

                                do debug_camera_entity->> \e = reset_entity_trans(e);;
                                do debug_camera_root->> \e = reset_entity_trans(e);;

                            }
                            EndMenu();
                        }

                        let towoo_context = proj->get_towoo_context();
                        let bad_scripts = towoo_context->get_bad_scripts();
                        let removing_comps = towoo_context->get_removing_components();
                        let removing_syss = towoo_context->get_removing_systems();

                        let mut menu_name = "ToWoo";

                        if (!bad_scripts->empty)
                            menu_name += F" {bad_scripts->len}错误";
                        if (!removing_comps->empty)
                            menu_name += F" {removing_comps->len}丢失组件";
                        if (!removing_syss->empty)
                            menu_name += F" {removing_syss->len}丢失系统";
  
                        if (BeginMenu(menu_name))
                        {
                            if (MenuItem("重新载入所有脚本"))
                                proj->update_towoo(true);

                            Separator();

                            if (!bad_scripts->empty)
                            {
                                do MenuItemEnabled("编译错误", false);
                                for (let p : bad_scripts)
                                {
                                    if (MenuItem(ToWooContext::pure_component_or_system_name(fsys::purename(p))))
                                        jeapi::gui::widget::invoke_click_file_callback(proj->make_path_normalize(p));
                                }

                                Separator();
                            }
                            if (!removing_comps->empty)
                            {
                                do MenuItemEnabled("丢失组件", false);
                                for (let p : removing_comps)
                                {
                                    do MenuItem(p);
                                }
                                Separator();
                            }
                            if (!removing_syss->empty)
                            {
                                do MenuItemEnabled("丢失系统", false);
                                for (let p : removing_syss)
                                {
                                    do MenuItem(p);
                                }
                                Separator();
                            }

                            do MenuItemEnabled("组件", false);
                            for (let (p, _): towoo_context->get_loaded_towoo)
                            {
                                if (fsys::filename(p)->lower->endwith(".jecomponent.wo"))
                                    if (MenuItem(ToWooContext::pure_component_or_system_name(fsys::purename(p))))
                                        jeapi::gui::widget::invoke_click_file_callback(proj->make_path_normalize(p));
                            }
                            Separator();
                            do MenuItemEnabled("系统", false);
                            for (let (p, _): towoo_context->get_loaded_towoo)
                            {
                                if (fsys::filename(p)->lower->endwith(".jesystem.wo"))
                                    if (MenuItem(ToWooContext::pure_component_or_system_name(fsys::purename(p))))
                                        jeapi::gui::widget::invoke_click_file_callback(proj->make_path_normalize(p));
                            }
                            EndMenu();
                        }

                        do debug_world->>
                            func(w)
                            {
                                je::editor::set_editing_mover_mode(w, mover_mode);
                                je::editor::set_editing_coord_mode(w, coord_mode);
                            };

                        EndMenuBar();
                    }

                    match(debug_camera_entity)
                    {
                    value(camera_entity)?
                        {
                            let (available_width, available_height) = GetContentRegionAvail();
                            let mut need_update_frame = false;
                            match (je::editor::get_framebuf_texture(camera_entity, 0))
                            {
                            value(frametex)?
                                {
                                    let (frame_tex_width, frame_tex_height) = frametex->size;

                                    let (wx, wy) = GetWindowPos();
                                    let (lupx, lupy) = GetCursorPos();

                                    ImageSize(frametex, available_width, available_height);

                                    let (itemw, itemh) = GetItemRectSize();
                                    let (mx, my) = GetMousePos();
                                    let (offsetx, offsety) = (mx - lupx - wx, my - lupy - wy);

                                    if (IsItemHovered())
                                    {
                                        // 在渲染区域内！
                                        windows_moveable = false;

                                        let uniform_mpos_x = 2. * ((offsetx:int - itemw:int/2):real / itemw), 
                                            uniform_mpos_y = -2. * ((offsety:int - itemh:int/2):real / itemh);

                                        je::editor::enable_editor_system(true);
                                        je::editor::update_editor_mouse_pos(
                                            uniform_mpos_x, 
                                            uniform_mpos_y, 
                                            wx:int + lupx:int + (itemw:int/2), 
                                            wy:int + lupy:int + (itemh:int/2));

                                        static let 
                                            mut right_key_down_time = 0., 
                                            mut noclick_flag = true;

                                        if (je::input::mousedown(0, je::mousecode::RIGHT) && noclick_flag)
                                        {
                                            noclick_flag = false;
                                            right_key_down_time = std::time();
                                        }

                                        if (!je::input::mousedown(0, je::mousecode::RIGHT))
                                        {
                                            noclick_flag = true;
                                            if (std::time() - right_key_down_time < 0.2)
                                                OpenPopup("RightClickContextMenu");
                                        }
                                    }
                                    else
                                    {
                                        windows_moveable = true;
                                        je::editor::enable_editor_system(false);
                                    }

                                    if (frame_tex_width != available_width: int || frame_tex_height != available_height: int)
                                        need_update_frame = true;
                                }
                            none?
                                need_update_frame = true;
                            }

                            if (need_update_frame)
                            {
                                if (available_width: int > 0 && available_height: int > 0)
                                    camera_entity->je::editor::apply_camera_framebuf_setting(
                                        available_width: int, available_height: int);
                            }

                            if (BeginPopup("RightClickContextMenu"))
                            {
                                entity_edit_context_menu(context, debug_world->val, context->get_editing_entity);
                                EndPopup();
                            }

                            match (jeapi::gui::widget::accept_file_for_current_widget())
                            {
                            value(path)?
                                {
                                    let filepath = proj->parse_path_normalize(path);
                                    if (fsys::extension(filepath)->lower == ".jeentity")
                                    {
                                        if (debug_world
                                                =>> func(w)
                                                    {
                                                        let e = jeapi::deserialize::entity(
                                                        w, 
                                                        {
                                                            ["prefab"] = proj->make_path_normalize(filepath): dynamic
                                                        },
                                                        true);

                                                        do e->>\e = set_new_created_entity_pos(w, e);;
                                                        return e;
                                                    }
                                                ->  has == false)
                                        {
                                            jeapi::gui::form::errmsg("失败", "加载实体失败");
                                        }  
                                    }
                                    if (editor::gui::IMAGE_FILE_EXTERN_NAMES->find(fsys::extension(filepath)->lower) != -1)
                                    {
                                        match (je::graphic::texture::load(context->get_project->get_env->get_universe->option::value, path))
                                        {
                                        value(tex)?
                                            {
                                                let entity_create_context = struct{
                                                    pixel_per_unit = mut 16,
                                                };
                                                launch(
                                                    func()
                                                    {
                                                        let mut open = true;
                                                        match (BeginAttrOpen("从纹理创建实体", 
                                                            WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                                                            + WindowsAttribute::ImGuiWindowFlags_NoDocking
                                                            + WindowsAttribute::ImGuiWindowFlags_NoCollapse))
                                                        {
                                                        value(show)?
                                                            if (show)
                                                            {
                                                                Text(F"从纹理 `{path}` 创建实体");
                                                                Text("单位像素数");
                                                                SameLine();
                                                                do InputInt("##pixel_per_unit", entity_create_context.pixel_per_unit)
                                                                    ->> \newval = entity_create_context.pixel_per_unit = newval > 0 ? newval | 1;
                                                                    ;
                                                                
                                                                if (Button("创建"))
                                                                {
                                                                    match (editor::gui::edit_forms::fast_create_entity(
                                                                        context, 
                                                                        debug_world->val, 
                                                                        fsys::purename(filepath), 
                                                                        [
                                                                            "Transform::LocalPosition",
                                                                            "Transform::LocalRotation",
                                                                            "Transform::LocalScale",
                                                                            "Transform::LocalToWorld",
                                                                            "Transform::Translation",
                                                                            "Renderer::Shape",
                                                                            "Renderer::Shaders",
                                                                            "Renderer::Textures",
                                                                        ]))
                                                                    {
                                                                    value(e)?
                                                                        {
                                                                            let default_shader = je::graphic::shader::load(e->get_world->get_universe->option::value, "@/resource/shader/Unlit.shader")->val;
                                                                            e->set_shaders([default_shader]);
                                                                            e->bind_texture(0, tex);

                                                                            let localscale = e->towoo::get_component :<Transform::LocalScale>()->val;
                                                                            let (px, py) = tex->size;
                                                                            localscale.scale->set(
                                                                                (px: real / entity_create_context.pixel_per_unit: real, 
                                                                                py: real / entity_create_context.pixel_per_unit: real, 
                                                                                1.): vec3);
                                                                        }
                                                                    none?
                                                                        jeapi::gui::form::errmsg("失败", "从纹理创建实体失败");
                                                                    }
                                                                    open = false;
                                                                }
                                                                if (Button("取消"))
                                                                {
                                                                    open = false;
                                                                }
                                                            }
                                                        none?
                                                            open = false;
                                                        }
                                                        End();

                                                        return open;
                                                    }, ());
                                            }
                                        none?
                                            jeapi::gui::form::errmsg("失败", "从纹理创建实体失败");
                                        }
                                    }
                                }
                            none?;
                            }
                        }
                    none?
                        Text("没有编辑中的场景");
                    }
                }
            none?
                open->set(false);
            }

            End();
        }
    }
}