// gui.edit_forms.inspector
// 用于显示和编辑选选中实体的组件

import je.gui;
import builtin.api.gui.form.input;
import builtin.api.gui.form.ask;
import builtin.api.gui.type_edit_widget_mgr;
import builtin.api.gui.context_menu;

using je::gui;

namespace editor::gui::edit_forms
{
    public func show_inspector(context: EditorContext, show: mutable<bool>)
    {
        if (show->get)
        {
            context->dosth_at_editing_entity(func(current_entity_may_none){
                do show->set(BeginOpen("检视面板##jeeditor"));

                // 1. 获取当前编辑中的实体，
                match (current_entity_may_none)
                {
                value(cur_e)?
                { 
                    // 2. 遍历实体的非Editor组件
                    let grouped_components = {}mut: map<string, vec<(je::typeinfo, je::component)>>;
                    for (let ctype, component: cur_e->editor::get_components)
                    {
                        let names = ctype->name->split("::");
                        let groupname = names->len >= 2 ? names[0] | "<无>";
                        
                        grouped_components->getorset(groupname, []mut)
                                ->add((ctype, component));
                    }

                    for (let groupname, components: grouped_components)
                    {
                        if (groupname == "Editor")
                            // 事编辑器组件，跳过显示，不然就露馅了
                            continue;
                        
                        assert(TreeNodeEx(groupname, TreeNodeAttribute::ImGuiTreeNodeFlags_Leaf));

                        for (let _, (ctype, component) : components)
                        {
                            // 嘿，我知道这个长长的东西很诡异，但是这个的功能只是把类型名的开头去掉，剩下的部分中间用"::"连接拼起来
                            assert(TreeNodeEx(ctype->name->split("::")->sub(1)->reduce(\l, r= l + "::" + r;)->or(\=ctype->name;),
                                TreeNodeAttribute::ImGuiTreeNodeFlags_Leaf));
                            
                            jeapi::gui::context_menu(func(){
                                if (MenuItem(F"移除 {ctype->name}"))
                                {
                                    let eeid = jeapi::debug::get_entity_editor_id(cur_e);
                                    let ename = cur_e->editor::name;

                                    jeapi::gui::form::ask(
                                        "确认？", 
                                        F"即将从实体{ename}中移除组件{ctype->name}，是否确认？", 
                                        func(asure){
                                            eeid->justdo(\e=e->editor::remove_component(ctype););
                                        });
                                }
                            });

                            for (let mname, (mtype, mvalue): component->editor::members)
                            {
                                do InvisibleButton(F"##{mname}$PADDING", (2., 1.));
                                SameLine();
                                BeginGroup();

                                Text(mname);
                                
                                // TODO: 检查字段更新然后干点啥事儿？
                                do jeapi::gui::edit_cur_native_value(mname, mtype, mvalue);

                                EndGroup();
                            }
                            TreePop();
                        }
                        TreePop();
                    }
                    // 3. 遍历实体的材质（如果有
    
                    // 3.1 遍历材质的Uniform数据和纹理信息
                }
                none?
                    TextDisabled("没有编辑中的实体");
                }

                End();

            });

        }
    }
}
