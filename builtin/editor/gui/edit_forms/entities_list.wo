// gui.edit_forms.entities_list
// 用于显示和编辑当前编辑世界中的实体

import je.gui;
import builtin.api.gui.form.input;
import builtin.api.gui.form.ask;
import builtin.api.gui.form.msg;
import builtin.api.dbg.main;

import builtin.editor.gui.edit_forms.entity_creator;
import builtin.api.serialize.main;

using je::gui;

namespace editor::gui::edit_forms
{
    func _is_ancestor(cur: jeapi::debug::EntityChilds, checking: je::entity)
    {
        for (let _, child: cur.childs)
        {
            if (child.e == checking)
                return true;
            if (child->_is_ancestor(checking))
                return true;
        }
        return false;
    }
    func _set_parent(child: je::entity, parent: jeapi::debug::EntityChilds)
    {
        static let LocalToParent = je::typeinfo::load("Transform::LocalToParent")->val(),
                   LocalToWorld  = je::typeinfo::load("Transform::LocalToWorld")->val();

        if (parent->_is_ancestor(child))
        {
            // 如果正在设置的子实体是父实体的祖先节点，需要先调整顺序
            /*
            ?       ? --- P
            |       |
            C   =>  C
            |  
            P
            */
            // 如果子实体此时有父节点，那么就将目标父节点挂载子节点上，否则就把父节点设置为L2W
            do child->editor::get_parent_uid()
                 ->> \uid = parent.e->editor::set_parent_with_uid(uid, true);
                 ->or(func(){
                    if (parent.e->editor::get_component(LocalToParent)->has())
                        parent.e->editor::remove_component(LocalToParent);
                    if (!parent.e->editor::get_component(LocalToWorld)->has())
                        do parent.e->editor::add_component(LocalToWorld);
                    return true;
                 });
        }
        do child->editor::set_parent(parent.e, true);
    }
    func display_entity_and_child_tree(context: EditorContext, w: je::world, e: jeapi::debug::EntityChilds)
    {
        let treenode_attribute = 
            (e.childs->empty 
                ? TreeNodeAttribute::ImGuiTreeNodeFlags_Leaf
                | TreeNodeAttribute::ImGuiTreeNodeFlags_None)
            + TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnArrow
            + TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnDoubleClick 
            + TreeNodeAttribute::ImGuiTreeNodeFlags_SpanAvailWidth
            // 如果当前实体被选中，那么高亮
            + (context->get_editing_entity()->>\eeid = eeid == e.uid;->valor(false) 
                ? TreeNodeAttribute::ImGuiTreeNodeFlags_Selected
                | TreeNodeAttribute::ImGuiTreeNodeFlags_None);
            ;

        if (e.e->editor::get_component(je::typeinfo::load("Editor::Invisable")->val)->has)
            // 不可见实体，不准看！
            return;

        let showchild = TreeNodeEx(F"{e.e->editor::name}##{e.e->editor::chunkinfo}", 
            treenode_attribute);

        if (BeginDragDropSource())
        {
            do SetDragDropPayload("JEDITOR_ENTITY_INSTANCE", e.uid as jeapi::debug::Eeid: string);
                Text(F"实体: {e.e->editor::name()}");
            EndDragDropSource();
        }
        if(BeginDragDropTarget())
        {
            match (AcceptDragDropPayload("JEDITOR_ENTITY_INSTANCE"))
            {
            value(drag_uid)?
                if (drag_uid as string: jeapi::debug::Eeid != e.uid)
                {
                    // 自己拖到自己身上肯定就寄了，只处理不同的实体。
                    drag_uid as string: jeapi::debug::Eeid->justdo(
                        \c = _set_parent(c, e);
                    );
                }
            none?
                ;
            }
            EndDragDropTarget();
        }

        jeapi::gui::context_menu(func(){
            if (MenuItem("复制"))
            {
                match (jeapi::serialize::entity(e.e)->>\dat = dat as dict<string, dynamic>: string;)
                {
                value(json)?
                    SetClipboardText(json);
                none?
                    jeapi::gui::form::errmsg("失败", "无法复制当前实体");
                }

            }
            if (MenuItem("粘贴"))
            {
                do GetClipboardText()->todict
                    ->> \d = jeapi::deserialize::entity(w, d->>\k,v = (k: string, v);)
                        ->> func(e)
                        {
                            // 如果成功创建实体，在此重置实体的 Transform::Anchor 组件（如果有的话）
                            static let Anchor = je::typeinfo::load("Transform::Anchor")->val;
                            if (e->editor::get_component(Anchor)->has)
                            {
                                e->editor::remove_component(Anchor);
                                do e->editor::add_component(Anchor);
                            }
                        }
                        ;
                    ;
            }
            Separator();
            if (MenuItem("编辑"))
            {
                launch(show_entity_creator, (context, EntityContext::edit(e.e)));
            }
            if (MenuItem("重命名"))
            {
                jeapi::gui::form::input(
                    "重命名", 
                    "请输入实体的新名称", 
                    e.e->editor::name, 
                    func(newname){
                        e.uid->justdo(\e = e->editor::set_name(newname););
                    });
            }
            Separator();
            if (MenuItem("销毁"))
            {
                jeapi::gui::form::ask(
                    "确认？", 
                    F"即将销毁实体{e.e->editor::name}\n是否同时销毁其全部子实体？", 
                    func(close_child_entity){
                        func close_entity_impl(e, close_all)
                        {
                            e.uid->justdo(\e = e->close(););
                            if (close_all)
                                for (let _, ce : e.childs)
                                    close_entity_impl(ce, close_all);
                        }
                        close_entity_impl(e, close_child_entity);
                    });
            }
        });

        if (IsItemClickedLeft() && !IsItemToggledOpen())
            context->set_editing_entity(option::value(e.e));

        if (showchild)
        {
            do e.childs->>\ce = display_entity_and_child_tree(context, w, ce);;
            TreePop();
        }
    }
    public func show_entities_list(context: EditorContext, show: mutable<bool>)
    {
        if (show->get)
        {
            je::gui::SetNextWindowSizeConstraints((200., 300.), (200., 5000.));
            do show->set(BeginAttrOpen("实体列表##jeeditor",
                WindowsAttribute::ImGuiWindowFlags_MenuBar));

            if (BeginMenuBar())
            {
                if (MenuItem("创建新实体"))
                    launch(show_entity_creator, (context, EntityContext::create()));
    
                EndMenuBar();
            }
            
            match (je::world::rend(context->get_project->get_env->get_universe))
            {
            value(current_editing_world)?
            {
                do jeapi::debug::get_all_entities_layer_from_world(current_editing_world)
                    ->> \ec = display_entity_and_child_tree(context, current_editing_world, ec);
                    ;
            }
            none?
                Text("没有正在编辑中的世界");
            }
            End();
        }
    }
}