// scripteditor.wo
import woo::std;

import je;
import je::gui;

import pkg::iterator;

using std;
using je;
using je::gui;

namespace editor::gui
{
    using ScriptEditor = struct{
        m_title: string,
        m_source: mut string,
        m_project: Project,

        m_history: vec<History>,
        m_history_index: mut int,

        m_current_edit_state: mut option<History>,
        m_enable_undo: bool,

        m_hook_callback: mut (vm)=> option<dynamic>,
    }
    {
        using History = struct{
            m_abs: string,
            m_script: string,
            m_data: array<(dict<string, dynamic>, fsys::path_t)>,
        }
        {
            func create(proj: Project, script: string)
            {
                try! data = proj->dump_all_world;

                return result::ok(History{
                    m_abs = script->sub_len(0, 20),
                    m_script = script,
                    m_data = data,
                });
            }
        }
    
        public func create(
            editorctx: EditorContext, 
            template_script: string, 
            title: string,
            enable_undo: bool)
        {
            let self = ScriptEditor{
                m_title = title,
                m_source = mut template_script,
                m_project = editorctx->get_project,

                m_history = []mut,
                m_history_index = mut 0,
                m_enable_undo = enable_undo,

                m_current_edit_state = mut option::none,

                m_hook_callback = mut \_ = option::value(nil: dynamic);,
            };
            launch(show, (self,));
            return self;
        }
        public func set_callback(self: ScriptEditor, hook_func: (vm)=>option<dynamic>)
        {
            self.m_hook_callback = hook_func;
        }
        func restore_history(self: ScriptEditor, history: History)
        {
            self.m_source = history.m_script;
            self.m_project->close_all_world();
            self.m_project->restore_all_world(history.m_data);
        }
        func history_menu(self: ScriptEditor, index: int)
        {
            if (BeginPopupContextItem())
            {
                if (MenuItemEnabled("撤销到此步之前", self.m_enable_undo))
                {
                    // 如果从最新状态切回旧历史，那么保存当前状态
                    if (self.m_history_index == self.m_history->len && 
                        self.m_history_index != index)
                    {
                        self.m_current_edit_state = 
                            new! History(self.m_project, self.m_source)->okay;
                    }

                    self.m_history_index = index;

                    if (index < self.m_history->len)
                    {
                        self->restore_history(self.m_history[index]);
                    }
                    else
                    {
                        assert(index == self.m_history->len);
                        match (self.m_current_edit_state)
                        {
                        value(history)? 
                            {
                                self->restore_history(history);
                                self.m_current_edit_state = option::none;
                            }
                        none?;
                        }
                    }
                    
                }
                EndPopup();
            }
        }
        func history_list(self: ScriptEditor)
        {
            BeginGroup();
            let (_, h) = GetContentRegionAvail();

            // 在此展示历史记录，可用于预览和撤回
            if (BeginListBox("##history", 200., h))
            {
                for (let (index, history) : self.m_history->iter |> iterator::enumerate)
                {
                    let clicked = SelectableSelected(F"{history.m_abs->replace("\n", "")}...##{index}", 
                        self.m_history_index == index);
                    let is_hovered = IsItemHovered();
                    if (is_hovered)
                    {
                        // 鼠标悬浮在选项上？显示脚本内容！
                        BeginTooltip();
                        Text(history.m_script);
                        EndTooltip();
                    }
                    if (clicked)
                        self.m_source = history.m_script;

                    self->history_menu(index);
                }

                do SelectableSelected("正在编辑...", 
                    self.m_history_index == self.m_history->len);
                self->history_menu(self.m_history->len);

                EndListBox();
            }
            EndGroup();
        }
        func script_box(self: ScriptEditor)
        {
            BeginGroup();

            if (Button("执行"))
                match (self->run_script)
                {
                ok(_)?;
                err(msg)? jeapi::gui::form::errmsg("无法执行脚本", msg);
                }

            let (w, h) = GetContentRegionAvail();
            do InputTextMultilineSize("##script", self.m_source, w, h)
                ->> \txt = self.m_source = txt;
                ;

            EndGroup();
        }
        func run_script(self: ScriptEditor)
        {
            try! history = new! History(self.m_project, self.m_source);
            try! vmm = vm::create(F"_jeditor_{JobID()}.wo", self.m_source: buffer);

            assert(self.m_history->shrink(self.m_history_index));
            self.m_history->add(history);
            self.m_history_index += 1;

            do vmm->jit;
            if (!vmm->run->is_value
             || !self.m_hook_callback(vmm)->is_value)
            {
                return result::err("运行脚本时发生错误");
            }
            return result::ok(do nil);
        }
        func show(self: ScriptEditor)
        {
            let mut exist = true;

            je::gui::SetNextWindowSizeConstraints((350., 200.), (3500., 2000.));
            match (BeginOpen(
                F"脚本-{self.m_title}##{JobID()}"))
            {
            value(show)?
                if (show)
                {
                    self->history_list;
                    SameLine();
                    self->script_box;
                }
            none?
                exist = false;
            }
            End();
            return exist;            
        }
    }
}