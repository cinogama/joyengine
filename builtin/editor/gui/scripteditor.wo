// scripteditor.wo
import woo::std;

import je;
import je::gui;

import pkg::iterator;
import pkg::try;
import pkg::makenew;
import pkg::vm;
import pkg::worst;
import pkg::buffer;
import pkg::fsys;

import builtin::editor::project::main;
import builtin::editor::gui::main;
import builtin::editor::gui::form::msg;
import builtin::api::serialize::main;

using std;
using je;
using je::gui;

namespace editor::gui
{
    public let WOOLANG_LANGUAGE_DEFINITION = func(){
    
        let def = CodeEditorContext::LanguageDefinition::create("woolang");
        let keywords = [
            "import", "nil", "true", "false", "while", "for", "if", "else",
            "let", "mut", "immut", "func", "return", "using", "alias", "namespace",
            "extern", "public", "private", "protected", "static", "enum", "as",
            "is", "typeof", "break", "continue", "where", "operator", "union",
            "match", "struct", "typeid", "do"
            ];
        for (let k : keywords)
            def->AddKeyword(k);
            
        let regexs = [
            (@"@?\"(\\.|[^\"])*\""@ + "@?", CodeEditorContext::PaletteIndex::String),
            (@"\'[^\']\'"@, CodeEditorContext::PaletteIndex::String),
            ("0[xX][0-9a-fA-F]+[uU]?[lL]?[lL]?[hH]?", CodeEditorContext::PaletteIndex::Number),
            ("-?([0-9]+([.][0-9]*)?|[.][0-9]+)([eE][+-]?[0-9]+)?[fF]?", CodeEditorContext::PaletteIndex::Number),
            ("-?[0-9]+[Uu]?[lL]?[lL]?[hH]?", CodeEditorContext::PaletteIndex::Number),
            ("[a-zA-Z_][a-zA-Z0-9_]*\\!", CodeEditorContext::PaletteIndex::PreprocIdentifier),
            ("(dynamic|nothing|void|int|real|handle|string|array|vec|dict|map|gchandle|option|result|cchar|bool|char)", CodeEditorContext::PaletteIndex::Type),
            ("[a-zA-Z_][a-zA-Z0-9_]*", CodeEditorContext::PaletteIndex::Identifier),
            ("[\\[\\]\\{\\}\\!\\%\\^\\&\\*\\(\\)\\-\\+\\=\\|\\<\\>\\?\\/\\;\\,\\.\\:]", CodeEditorContext::PaletteIndex::Punctuation)
            ];
            
        for (let (r, i) : regexs)
            def->AddTokenRegex(r, i);
            
        def->SetMultilineComment("/*", "*/");
        def->SetSingleLineComment("//");
        
        return def;
        
    }();
    
    using ScriptEditor = struct{
        m_title: string,
        m_source: CodeEditorContext,
        m_project: Project,
        
        m_history: vec<History>,
        m_history_index: mut int,
        
        m_current_edit_state: mut option<History>,
        m_enable_undo: bool,
        
        m_hook_callback: mut (vm)=> option<dynamic>,
    }
    {
        using History = struct{
            m_abs: string,
            m_script: string,
            m_data: array<(jeapi::serialize::WorldData, fsys::path_t)>,
        }
        {
            func create(proj: Project, script: string)
            {
                try! data = proj->dump_all_world;
                
                return result::ok(History{
                        m_abs = script->sub_len(0, 20),
                        m_script = script,
                        m_data = data,
                    });
            }
        }
        
        public func create(
            editorctx: EditorContext,
            template_script: string,
            title: string,
            enable_undo: bool)
        {
            let self = ScriptEditor{
                m_title = title,
                m_source = CodeEditorContext::create(),
                m_project = editorctx->get_project,
                
                m_history = []mut,
                m_history_index = mut 0,
                m_enable_undo = enable_undo,
                
                m_current_edit_state = mut option::none,
                
                m_hook_callback = mut \_ = option::value(nil: dynamic);,
            };
            self.m_source->SetLanguageDefinition(WOOLANG_LANGUAGE_DEFINITION);
            self.m_source->SetText(template_script);
            launch(\=show(self););
            return self;
        }
        public func set_callback(self: ScriptEditor, hook_func: (vm)=>option<dynamic>)
        {
            self.m_hook_callback = hook_func;
        }
        func restore_history(self: ScriptEditor, history: History)
        {
            self.m_source->SetText <| history.m_script;
            self.m_project->close_all_world();
            self.m_project->restore_all_world(history.m_data);
        }
        func history_menu(self: ScriptEditor, index: int)
        {
            if (BeginPopupContextItem())
            {
                if (MenuItemEnabled("撤销到此步之前", self.m_enable_undo))
                {
                    // 如果从最新状态切回旧历史，那么保存当前状态
                    if (self.m_history_index == self.m_history->len &&
                        self.m_history_index != index)
                    {
                        self.m_current_edit_state =
                            new! History(self.m_project, self.m_source->GetText)->okay;
                    }
                    
                    self.m_history_index = index;
                    
                    if (index < self.m_history->len)
                    {
                        self->restore_history(self.m_history[index]);
                    }
                    else
                    {
                        assert(index == self.m_history->len);
                        match (self.m_current_edit_state)
                        {
                            value(history)?
                            {
                                self->restore_history(history);
                                self.m_current_edit_state = option::none;
                            }
                            none?;
                        }
                    }
                    
                }
                EndPopup();
            }
        }
        func main_menu(self: ScriptEditor)
        {
            if (BeginMenuBar())
            {
                if (MenuItem("执行"))
                {
                    match (self->run_script)
                    {
                        ok(_)?;
                        err(msg)? jeapi::gui::form::errmsg("无法执行脚本", msg);
                    }
                }
                EndMenuBar();
            }
        }
        func history_list(self: ScriptEditor)
        {
            BeginGroup();
            let (_, h) = GetContentRegionAvail();
            
            // 在此展示历史记录，可用于预览和撤回
            if (BeginListBox("##history", 200., h))
            {
                for (let (index, history) : self.m_history->iter |> iterator::enumerate)
                {
                    let clicked = SelectableSelected(F"{history.m_abs->replace("\n", "")}...##{index}",
                        self.m_history_index == index);
                    let is_hovered = IsItemHovered();
                    if (is_hovered)
                    {
                        // 鼠标悬浮在选项上？显示脚本内容！
                        BeginTooltip();
                        Text(history.m_script);
                        EndTooltip();
                    }
                    if (clicked)
                        self.m_source->SetText <| history.m_script;
                        
                    self->history_menu(index);
                }
                
                do SelectableSelected("正在编辑...",
                    self.m_history_index == self.m_history->len);
                self->history_menu(self.m_history->len);
                
                EndListBox();
            }
            EndGroup();
        }
        func script_box(self: ScriptEditor)
        {
            SetWindowFontScale(1.2);
            CodeEditorSize(self.m_source, "##script", GetContentRegionAvail(), true);
            SetWindowFontScale(1.0);
            
            if (BeginPopupContextItemLabel("##script"))
            {
                if (MenuItemShortcutEnabled("复制", "Ctrl+C", true))
                    self.m_source->Copy();
                if (MenuItemShortcutEnabled("粘贴", "Ctrl+V", true))
                    self.m_source->Paste();
                if (MenuItemShortcutEnabled("剪切", "Ctrl+X", true))
                    self.m_source->Cut();
                    
                Separator();
                
                if (MenuItemShortcutEnabled("撤销", "Ctrl+Z", self.m_source->CanUndo))
                    self.m_source->Undo();
                if (MenuItemShortcutEnabled("重做", "Ctrl+Y", self.m_source->CanRedo))
                    self.m_source->Redo();
                    
                Separator();
                
                func _do_InsertText(text: string)
                {
                    SetClipboardText(text);
                    self.m_source->Paste();
                }
                
                if (BeginMenu("快速代码"))
                {
                    if (BeginMenu("调试"))
                    {
                        if (MenuItem("log"))
                        {
                            _do_InsertText("je::log()");
                        }
                        if (MenuItem("loginfo"))
                        {
                            _do_InsertText("je::loginfo()");
                        }
                        if (MenuItem("logwarn"))
                        {
                            _do_InsertText("je::logwarn()");
                        }
                        if (MenuItem("logerr"))
                        {
                            _do_InsertText("je::logerr()");
                        }
                        if (MenuItem("logfatal"))
                        {
                            _do_InsertText("je::logfatal()");
                        }
                        EndMenu();
                    }
                    
                    Separator();
                    
                    if (BeginMenu("GUI"))
                    {
                        if (MenuItem("消息框"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText(
                                "import builtin::editor::gui::form::msg;\n"
                                    + "jeapi::gui::form::msg(\"标题\", \"内容\");");
                        }
                        if (MenuItem("错误框"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText(
                                "import builtin::editor::gui::form::msg;\n"
                                    + "jeapi::gui::form::errmsg(\"标题\", \"内容\");");
                        }
                        if (MenuItem("输入框 *"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText(
                                "import builtin::editor::gui::form::input;\n"
                                    + "jeapi::gui::form::input(\"标题\", \"内容\", \"默认值\",\n"
                                    + "    func (content)\n"
                                    + "    {\n"
                                    + "        do content;\n"
                                    + "    }\n"
                                    + ");\n");
                        }
                        if (MenuItem("确认框 *"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText(
                                "import builtin::editor::gui::form::ask;\n"
                                    + "jeapi::gui::form::ask(\"标题\", \"内容\",\n"
                                    + "    func (is_ok)\n"
                                    + "    {\n"
                                    + "        if (is_ok)\n"
                                    + "        {\n"
                                    + "            // 确认\n"
                                    + "        }\n"
                                    + "    }\n"
                                    + ");\n");
                        }
                        if (MenuItem("新窗体 *"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText(
                                "import builtin::api::gui::form;\n"
                                    + "do show <| jeapi::gui::form::create(\"标题\", true /* 唯一窗体？ */,\n"
                                    + "    func (_)\n"
                                    + "    {\n"
                                    + "        je::gui::Text(\"Helloworld 新窗体\");\n"
                                    + "    }\n"
                                    + ");\n");
                        }
                        EndMenu();
                    }
                    
                    Separator();
                    
                    if (BeginMenu("全局上下文（Universe）"))
                    {
                        if (MenuItem("获取所有世界"))
                        {
                            _do_InsertText("->get_all_worlds()");
                        }
                        if (MenuItem("遍历所有世界 *"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText("for (let w : _->get_all_worlds())\n{\n    \n}\n");
                        }
                        EndMenu();
                    }
                    if (BeginMenu("世界（World）"))
                    {
                        if (MenuItem("获取所有实体"))
                        {
                            _do_InsertText("->get_all_entities([])");
                        }
                        if (MenuItem("遍历所有实体 *"))
                        {
                            self.m_source->SetCursorPosition((self.m_source->GetCursorPosition.0, 0));
                            _do_InsertText("for (let e : _->get_all_entities([]))\n{\n    \n}\n");
                        }
                        if (MenuItem("筛选器：检查实体组件（ToWoo）"))
                        {
                            _do_InsertText(@"-> forall(\e = e->towoo::get_component:<_>->is_value;)"@);
                        }
                        if (MenuItem("添加实体"))
                        {
                            _do_InsertText(@"->add_entity([_])"@);
                        }
                        if (MenuItem("添加预设体"))
                        {
                            _do_InsertText(@"->add_prefab([_])"@);
                        }
                        if (MenuItem("添加系统"))
                        {
                            _do_InsertText(@"->add_system(_)"@);
                        }
                        if (MenuItem("移除系统"))
                        {
                            _do_InsertText(@"->remove_system(_)"@);
                        }
                        EndMenu();
                    }
                    if (BeginMenu("实体（Entity）"))
                    {
                        if (MenuItem("获取编辑器器名称"))
                        {
                            _do_InsertText("->name()");
                        }
                        
                        Separator();
                        
                        if (MenuItem("添加组件（ToWoo）"))
                        {
                            _do_InsertText("->towoo::add_component:<_>()");
                        }
                        if (MenuItem("获取组件（ToWoo）"))
                        {
                            _do_InsertText("->towoo::get_component:<_>()");
                        }
                        if (MenuItem("移除组件（ToWoo）"))
                        {
                            _do_InsertText("->towoo::remove_component:<_>()");
                        }
                        EndMenu();
                    }
                    if (BeginMenu("组件（Component）"))
                    {
                        let component_types = typeinfo::get_all_components_types();
                        for (let name : component_types
                            ->> \t = t->name;
                            -> std::sort(\ln, rn = ln < rn;))
                        {
                            if (BeginMenu(name))
                            {
                                if (MenuItem("名称"))
                                    _do_InsertText(name);
                                if (MenuItem("类型"))
                                    _do_InsertText(F"{name}::type::typeinfo");
                                    
                                EndMenu();
                            }
                        }
                        EndMenu();
                    }
                    if (BeginMenu("系统（System）"))
                    {
                        let system_types = typeinfo::get_all_systems_types();
                        for (let name : system_types
                            ->> \t = t->name;
                            -> std::sort(\ln, rn = ln < rn;))
                        {
                            if (BeginMenu(name))
                            {
                                if (MenuItem("名称"))
                                    _do_InsertText(name);
                                if (MenuItem("类型"))
                                    _do_InsertText(F"je::typeinfo::load({name->enstring})->unwrap");
                                    
                                EndMenu();
                            }
                        }
                        EndMenu();
                    }
                    EndMenu();
                }
                
                EndPopup();
            }
        }
        func run_script(self: ScriptEditor)
        {
            try! history = new! History(self.m_project, self.m_source->GetText);
            try! vmm = vm::create(F"_jeditor_{JobID()}.wo", self.m_source->GetText: buffer);
            
            assert(self.m_history->shrink(self.m_history_index));
            self.m_history->add(history);
            self.m_history_index += 1;
            
            do vmm->jit;
            if (!vmm->run->is_value
                || !self.m_hook_callback(vmm)->is_value)
            {
                return result::err("运行脚本时发生错误");
            }
            return result::ok(do nil);
        }
        func show(self: ScriptEditor)
        {
            let mut exist = true;
            
            je::gui::SetNextWindowSizeConstraints((350., 200.), (3500., 2000.));
            match (BeginAttrOpen(
                    F"脚本-{self.m_title}##{JobID()}",
                    WindowsAttribute::ImGuiWindowFlags_MenuBar))
            {
                value(show)?
                    if (show)
                    {
                        self->main_menu;
                        self->history_list;
                        SameLine();
                        self->script_box;
                    }
                none?
                    exist = false;
            }
            End();
            return exist;
        }
    }
}
