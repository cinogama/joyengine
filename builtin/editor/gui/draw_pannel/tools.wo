import pkg::worst;
import pkg::math;

using je;

namespace editor::gui::drawpannel::tools
{
    public using Nothing = ()
    {
        public func close(_: Nothing)
        {
        }
        public func OnMouseDown(self: Nothing, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            do self;
            do target;
            do color;
            do pos;
        }
        public func OnMouseHold(self: Nothing, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            do self;
            do target;
            do color;
            do pos;
        }
        public func OnMouseUp(self: Nothing, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            do self;
            do target;
            do color;
            do pos;
        }
    }
    func get_standard_range_by_two_pos(pos1: (int, int), pos2: (int, int))
    {
        let lbpos = (math::min(pos1.0, pos2.0), math::min(pos1.1, pos2.1));
        let range = (
            math::abs(pos1.0 - pos2.0) + 1,
            math::abs(pos1.1 - pos2.1) + 1);

        return (lbpos, range);
    }

    func draw_line(target: graphic::texture, color: color4_t, p1: (int, int), p2: (int, int))
    {
        // 以下代码主体来自 神奇的JoyEngineCSP，有大量屎山代码！
        let ((mut x1, mut y1), (mut x2, mut y2)) = (p1, p2);

        if (
            (x1 > x2 && y2 > y1 && (y2 - y1) <= (x1 - x2)) 
            || (x1 < x2 && y1 > y2 && (x2 - x1) < (y1 - y2)) 
            || (x2 <= x1 && y1 >= y2)
        )
        {
            let t1 = x1;
            x1 = x2;
            x2 = t1;
            let t2 = y1;
            y1 = y2;
            y2 = t2;
        }

        target->pix((x1, y1))->set_color(color);
        target->pix((x2, y2))->set_color(color);
            
        let mut dx = math::abs(x2 - x1), mut dy = math::abs(y2 - y1);
        if (dx == 0 && dy == 0)
            return;

        let mut flag = false;
        if (dx < dy)
        {
            flag = true;

            let t1 = x1;
            x1 = y1;
            y1 = t1;

            let t2 = x2;
            x2 = y2;
            y2 = t2;

            let t3 = dx;
            dx = dy;
            dy = t3;
        }

        let tx = (x2 - x1 > 0) ? 1 | -1;
        let ty = (y2 - y1 > 0) ? 1 | -1;

        let mut curx = x1 + 1;
        let mut cury = y1;

        let dS = 2 * dy;
        let dT = 2 * (dy - dx);
        let mut d = dS - dx;

        while (curx != x2)
        {
            if (d < 0)
                d += dS;
            else
            {
                cury += ty; 
                d += dT;
            }

            if (flag)
                target->pix((cury, curx))->set_color(color);
            else
                target->pix((curx, cury))->set_color(color);

            curx += tx;
        }

    }
    public using Pen = struct{
        m_last_draw_pos: mut (int, int),
    }
    {
        public func close(_: Pen)
        {
        }
        public func create()
        {
            return Pen{m_last_draw_pos = mut (-1, -1)};
        }
        public func OnMouseDown(self: Pen, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            self.m_last_draw_pos = pos;
            target->pix(self.m_last_draw_pos)->set_color(color);
        }
        public func OnMouseHold(self: Pen, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            // 如果新点不等于旧点，那么画条线过去！
            // 窝窝头偷大懒
            if (self.m_last_draw_pos[0] != pos[0] || self.m_last_draw_pos[1] != pos[1])
            {
                draw_line(target, color, self.m_last_draw_pos, pos);
                self.m_last_draw_pos = pos;
            }
        }
        public func OnMouseUp(_: Pen, _: graphic::texture, _: color4_t, _: (int, int))
        {
        }
    }
    public using Line = struct{
        m_snapshot: mut option<TextureSnapshot>,
        m_first_pos: mut (int, int),
        m_last_pos: mut (int, int),
    }
    {
        public func close(_: Line)
        {
        }
        public func create()
        {
            return Line{
                m_snapshot = mut option::none,
                m_first_pos = mut (-1, -1),
                m_last_pos = mut (-1, -1),
            };
        }
        public func OnMouseDown(self: Line, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            self.m_snapshot = option::value(new! TextureSnapshot(target));
            self.m_first_pos = pos;
            self.m_last_pos = pos;
            target->pix(pos)->set_color(color);
        }
        public func OnMouseHold(self: Line, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            if (self.m_last_pos[0] != pos[0] || self.m_last_pos[1] != pos[1])
            {
                self.m_snapshot->unwrap->restore();
                draw_line(target, color, self.m_first_pos, pos);
                self.m_last_pos = pos;
            }
        }
        public func OnMouseUp(self: Line, _: graphic::texture, _: color4_t, _: (int, int))
        {
            self.m_snapshot = option::none;
        }
    }
    public using Rect = struct{
        m_snapshot: mut option<TextureSnapshot>,
        m_first_pos: mut (int, int),
        m_last_pos: mut (int, int),
    }
    {
        public func close(_: Rect)
        {
        }
        public func create()
        {
            return Rect{
                m_snapshot = mut option::none,
                m_first_pos = mut (-1, -1),
                m_last_pos = mut (-1, -1),
            };
        }
        public func OnMouseDown(self: Rect, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            self.m_snapshot = option::value(new! TextureSnapshot(target));
            self.m_first_pos = pos;
            self.m_last_pos = pos;
            target->pix(pos)->set_color(color);
        }
        public func OnMouseHold(self: Rect, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            if (self.m_last_pos[0] != pos[0] || self.m_last_pos[1] != pos[1])
            {
                self.m_snapshot->unwrap->restore();
                let (x1, y1) = self.m_first_pos, (x2, y2) = pos;
                draw_line(target, color, (x1, y1), (x2, y1));
                draw_line(target, color, (x2, y1), (x2, y2));
                draw_line(target, color, (x2, y2), (x1, y2));
                draw_line(target, color, (x1, y2), (x1, y1));
                self.m_last_pos = pos;
            }
        }
        public func OnMouseUp(self: Rect, _: graphic::texture, _: color4_t, _: (int, int))
        {
            self.m_snapshot = option::none;
        }
    }
    public using FilledRect = struct{
        m_snapshot: mut option<TextureSnapshot>,
        m_first_pos: mut (int, int),
        m_last_pos: mut (int, int),
    }
    {
        public func close(_: FilledRect)
        {
        }
        public func create()
        {
            return FilledRect{
                m_snapshot = mut option::none,
                m_first_pos = mut (-1, -1),
                m_last_pos = mut (-1, -1),
            };
        }
        public func OnMouseDown(self: FilledRect, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            self.m_snapshot = option::value(new! TextureSnapshot(target));
            self.m_first_pos = pos;
            self.m_last_pos = pos;

            target->pix(pos)->set_color(color);
        }
        public func OnMouseHold(self: FilledRect, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            if (self.m_last_pos[0] != pos[0] || self.m_last_pos[1] != pos[1])
            {
                self.m_snapshot->unwrap->restore();
                self.m_last_pos = pos;

                let (lbpos, range) = get_standard_range_by_two_pos(self.m_first_pos, self.m_last_pos);
                for (let mut x = 0; x < range.0; x += 1)
                {
                    for (let mut y = 0; y < range.1; y += 1)
                    {
                        target->pix((lbpos.0 + x, lbpos.1 + y))->set_color(color);
                    }
                }
            }
        }
        public func OnMouseUp(self: FilledRect, _: graphic::texture, _: color4_t, _: (int, int))
        {
            self.m_snapshot = option::none;
        }
    }
    public using Circle = struct{
        m_snapshot: mut option<TextureSnapshot>,
        m_first_pos: mut (int, int),
        m_last_pos: mut (int, int),
    }
    {
        public func close(_: Circle)
        {
        }
        public func create()
        {
            return Circle{
                m_snapshot = mut option::none,
                m_first_pos = mut (-1, -1),
                m_last_pos = mut (-1, -1),
            };
        }
        public func OnMouseDown(self: Circle, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            self.m_snapshot = option::value(new! TextureSnapshot(target));
            self.m_first_pos = pos;
            self.m_last_pos = pos;
            target->pix(pos)->set_color(color);
        }
        public func OnMouseHold(self: Circle, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            if (self.m_last_pos[0] != pos[0] || self.m_last_pos[1] != pos[1])
            {
                self.m_snapshot->unwrap->restore();
                self.m_last_pos = pos;

                // 使用中点椭圆算法画圆
                let (lbpos, range) = get_standard_range_by_two_pos(self.m_first_pos, self.m_last_pos);
                let (rx, ry) = (range.0: real / 2., range.1: real / 2.);
                let (cx, cy) = (lbpos.0: real + rx, lbpos.1: real + ry);                

                let my_round = \v: real = (v - 0.5): int;;
                let my_round2 = \v: real = (v + 0.5): int;;

                let mut x = 0.;
                let mut y = ry;
                let mut p1 = ry * ry - rx * rx * ry + (rx * rx) / 4.;
                while ((2. * ry * ry * x) < (2. * rx * rx * y))
                {
                    target->pix((my_round(cx + x), my_round(cy + y)))->set_color(color);
                    target->pix((my_round2(cx - x), my_round(cy + y)))->set_color(color);
                    target->pix((my_round(cx + x), my_round2(cy - y)))->set_color(color);
                    target->pix((my_round2(cx - x), my_round2(cy - y)))->set_color(color);

                    if (p1 < 0.)
                    {
                        x += 1.;
                        p1 += 2. * ry * ry * x + ry * ry;
                    }
                    else
                    {
                        x += 1.;
                        y -= 1.;
                        p1 += 2. * ry * ry * x - 2. * rx * rx * y + ry * ry;
                    }
                }

                let mut p2 = ry * ry * (x + 0.5) * (x + 0.5) + rx * rx * (y - 1.) * (y - 1.) - rx * rx * ry * ry;
                while (y >= 0.)
                {
                    target->pix((my_round(cx + x), my_round(cy + y)))->set_color(color);
                    target->pix((my_round2(cx - x), my_round(cy + y)))->set_color(color);
                    target->pix((my_round(cx + x), my_round2(cy - y)))->set_color(color);
                    target->pix((my_round2(cx - x), my_round2(cy - y)))->set_color(color);

                    if (p2 > 0.)
                    {
                        y -= 1.;
                        p2 -= 2. * rx * rx * y + rx * rx;
                    }
                    else
                    {
                        x += 1.;
                        y -= 1.;
                        p2 += 2. * ry * ry * x - 2. * rx * rx * y + rx * rx;
                    }
                }
            }
        }
        public func OnMouseUp(self: Circle, _: graphic::texture, _: color4_t, _: (int, int))
        {
            self.m_snapshot = option::none;
        }
    }
    public using FilledCircle = struct{
        m_snapshot: mut option<TextureSnapshot>,
        m_first_pos: mut (int, int),
        m_last_pos: mut (int, int),
    }
    {
        public func close(_: FilledCircle)
        {
        }
        public func create()
        {
            return FilledCircle{
                m_snapshot = mut option::none,
                m_first_pos = mut (-1, -1),
                m_last_pos = mut (-1, -1),
            };
        }
        public func OnMouseDown(self: FilledCircle, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            self.m_snapshot = option::value(new! TextureSnapshot(target));
            self.m_first_pos = pos;
            self.m_last_pos = pos;

            target->pix(pos)->set_color(color);
        }
        public func OnMouseHold(self: FilledCircle, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            if (self.m_last_pos[0] != pos[0] || self.m_last_pos[1] != pos[1])
            {
                self.m_snapshot->unwrap->restore();
                self.m_last_pos = pos;

                let (lbpos, range) = get_standard_range_by_two_pos(self.m_first_pos, self.m_last_pos);
                // let (cx, cy) = (lbpos.0 + range.0 / 2, lbpos.1 + range.1 / 2);
                let (rx, ry) = (range.0: real / 2., range.1: real / 2.);

                for (let mut x = 0; x < range.0; x += 1)
                {
                    for (let mut y = 0; y < range.1; y += 1)
                    {
                        if (math::pow(x: real + 0.5 - rx, 2.) / math::pow(rx, 2.) 
                            + math::pow(y: real + 0.5 - ry, 2.) / math::pow(ry, 2.) <= 1.)
                        {
                            target->pix((lbpos.0 + x, lbpos.1 + y))->set_color(color);
                        }
                    }
                }
            }
        }
        public func OnMouseUp(self: FilledCircle, _: graphic::texture, _: color4_t, _: (int, int))
        {
            self.m_snapshot = option::none;
        }
    }
    public using Fill = ()
    {
        public func close(_: Fill)
        {
        }
        public func OnMouseDown(_: Fill, _: graphic::texture, _: color4_t, _: (int, int))
        {
        }
        public func OnMouseHold(_: Fill, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            let (w, h) = target->size(), (x, y) = pos;
            if (x >= 0 && x < w && y >= 0 && y < h)
            {
                let filling_place_color = target->pix((x, y))->get_color();
                let is_same_color = 
                    \c1: color4_t, c2: color4_t = isequ(c1[0], c2[0]) && isequ(c1[1], c2[1]) && isequ(c1[2], c2[2]) && isequ(c1[3], c2[3])
                        where isequ = \a: real, b: real = clamp0255(math::round(a * 255.)) == clamp0255(math::round(b * 255.));
                            , clamp0255 = 
                                \n: int = n < 0 
                                    ? 0 
                                    | (n > 255
                                        ? 255
                                        | n)
                                ;
                    ;
                ;
                if (! is_same_color(filling_place_color, color))
                {
                    let filling_stack = [(x, y)]mut;
                    while (!filling_stack->empty)
                    {
                        let (px, py) = filling_stack->unwrap_pop();
                        if (px >= 0 && px < w && py >= 0 && py < h)
                        {
                            let pixel = target->pix((px, py));
                            if (is_same_color(pixel->get_color(), filling_place_color))
                            {
                                pixel->set_color(color);
                                filling_stack->add((px + 1, py));
                                filling_stack->add((px, py + 1));
                                filling_stack->add((px - 1, py));
                                filling_stack->add((px, py - 1));
                            }
                        }
                    }

                }
            }
        }
        public func OnMouseUp(_: Fill, _: graphic::texture, _: color4_t, _: (int, int))
        {
        }
    }
    public using MagicRange = struct{
        m_snapshot: mut option<TextureSnapshot>,
        m_first_pos: mut (int, int),
        m_last_pos: mut (int, int),

        m_magic_scripts: option<ApplyScriptHost>,
    }
    {
        public func close(self: MagicRange)
        {
            do self.m_magic_scripts->> \m = m->close();;
        }
        public func create(host: result<ApplyScriptHost, string>)
        {
            match (host) 
            {
            err(msg)?
                jeapi::gui::form::errmsg("失败", msg);
            ok(_)?;
            }

            return MagicRange{
                m_snapshot = mut option::none,
                m_first_pos = mut (-1, -1),
                m_last_pos = mut (-1, -1),

                m_magic_scripts = host->okay,
            };
        }
        public func OnMouseDown(self: MagicRange, target: graphic::texture, _: color4_t, pos: (int, int))
        {
            self.m_snapshot = option::value(new! TextureSnapshot(target));
            self.m_first_pos = pos;
            self.m_last_pos = pos;

            if (self.m_magic_scripts->is_value)
            {
                match (self.m_magic_scripts->unwrap
                    ->apply(target, get_standard_range_by_two_pos(self.m_first_pos, self.m_last_pos)...))
                {
                ok(_)?;
                err(info)?
                    je::logwarn(info);
                }
            }
        }
        public func OnMouseHold(self: MagicRange, target: graphic::texture, _: color4_t, pos: (int, int))
        {
            if (self.m_last_pos[0] != pos[0] || self.m_last_pos[1] != pos[1])
            {
                self.m_snapshot->unwrap->restore();
                self.m_last_pos = pos;

                if (self.m_magic_scripts->is_value)
                {
                    match (self.m_magic_scripts->unwrap
                        ->apply(target, get_standard_range_by_two_pos(self.m_first_pos, self.m_last_pos)...))
                    {
                    ok(_)?;
                    err(info)?
                        je::logwarn(info);
                    }
                }
            }
        }
        public func OnMouseUp(self: MagicRange, _: graphic::texture, _: color4_t, _: (int, int))
        {
            self.m_snapshot = option::none;
        }
    }
}