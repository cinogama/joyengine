// 这里用于管理图像效果处理脚本
import pkg::vm;

import pkg::fsys;
import pkg::worst;
import pkg::try;

import builtin::editor::project::main;

namespace editor::gui::drawpannel
{
    // 此处注册一个虚拟文件，作为图像处理函数的工具库
    do vm::create_virtual_script("je/editor/graphic.wo", @"
// (C)Cinogama project.

import je;

public func tex(t: je::graphic::texture, x: int, y: int)
{
    return t->pix((x, y))->get_color();
}

// 需要两个函数:
// pixel: (tex, int, int)=> (real, real, real, real)
// entry: (tex)=> bool

extern func main(target_texture: je::graphic::texture, lbpos: (int, int), range: (int, int))
{
    if (!entry(target_texture, lbpos, range))
        return;

    let (rw, rh) = range;
    let (lx, ly) = lbpos;
    let result_pixels = array::create(rw * rh, mut (0.,0.,0.,0.));

    for (let mut y = 0; y < rh; y += 1)
        for (let mut x = 0; x < rw; x += 1)
            result_pixels[y * rw + x] = pixel(target_texture, x + lx, y + ly);

    for (let mut y = 0; y < rh; y += 1)
        for (let mut x = 0; x < rw; x += 1)
            target_texture->pix((x + lx, y + ly))->set_color(result_pixels[y * rw + x]);
}
"@, false);

    let mut image_effect_scripts = {}: dict<string, fsys::path_t>;

    public func get_all_scripts_name()
    {
        return image_effect_scripts->unmapping->>\name_vm = name_vm[0];;
    }
    
    using ApplyScriptHost = struct{vmm: vm}
    {
        func create(path: fsys::path_t)
        {
            try! vmm = vm::load(path->tostring);
            do vmm->jit;

            try! _ = vmm->run()
                -> ok_or(F"脚本 {path->tostring} 执行失败")
                ;

            return_ok! ApplyScriptHost{vmm = vmm};
        }
        public func close(self: ApplyScriptHost)
        {
            return self.vmm->close();
        }
        public func apply(self: ApplyScriptHost, ts: je::graphic::texture, lbpos: (int, int), range: (int, int))
        {
            try! _ = self.vmm->invoke("main", [ts: dynamic, lbpos: dynamic, range: dynamic])
                -> ok_or("脚本执行失败")
                ;
            return_ok!;
        }
    }

    public func open_image_effect_host(name: string)
    {
        try! path = image_effect_scripts->get(name)
            -> ok_or(F"未找到名为 {name} 的图像处理脚本")
            ;

        return ApplyScriptHost::create(path);
    }

    public func apply_script(name: string, ts: je::graphic::texture, lbpos: (int, int), range: (int, int))
    {
        try! host = open_image_effect_host(name);
        do host-> std::use(func(host)
        {
            do host->apply(ts, lbpos, range);
        });

        return_ok!;
    }
    public func update_and_get_scripts(proj: Project)
    {
        let r = {}mut: map<string, fsys::path_t>;

        for (let path : fsys::allsubpath(fsys::normalize(std::host_path()))
                -> or([])
                -> connect(fsys::allsubpath(proj->get_path)
                    -> or([]))
            )
        {
            if (!path->tostring->lower->end_with(".image.wo"))
                continue;

            r->set(fsys::purename(path), path);
        }

        image_effect_scripts = r->unsafe::asdict;
    }
}
