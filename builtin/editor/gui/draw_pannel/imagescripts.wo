// 这里用于管理图像效果处理脚本
import pkg::vm;
import pkg::fsys;
import pkg::worst;
import pkg::try;

namespace editor::gui::drawpannel
{
    // 此处注册一个虚拟文件，作为图像处理函数的工具库
    do vm::create_virtual_script("je/editor/graphic.wo", @"
// (C)Cinogama project.

import je;

public func tex(t: je::graphic::texture, x: int, y: int)
{
    return t->pix((x, y))->get_color();
}

// 需要两个函数:
// pixel: (tex, int, int)=> (real, real, real, real)
// entry: (tex)=> bool

extern func main(target_texture: je::graphic::texture)
{
    if (!entry(target_texture))
        return;

    let (w, h) = target_texture->size();
    let result_pixels = []mut: vec<(real, real, real, real)>;

    for (let mut y = 0; y < h; y += 1)
    {
        for (let mut x = 0; x < w; x += 1)
        {
            result_pixels->add(pixel(target_texture, x, y));
        }
    }

    for (let mut i = 0; i < result_pixels->len; i += 1)
    {
        let x = i % w, y = i / w;
        target_texture->pix((x, y))->set_color(result_pixels[i]);
    }
}
"@, false);

    let mut image_effect_scripts = {}: dict<string, fsys::path_t>;

    public func get_all_scripts_name()
    {
        return image_effect_scripts->unmapping->>\name_vm = name_vm[0];;
    }
    public func apply_script(name: string, ts: array<je::graphic::texture>)
    {
        match (image_effect_scripts->get(name))
        {
        value(p)?
        {
            try! vmm =  vm::load(p->tostring);
            do vmm->jit;

            if (!vmm->run->is_value)
                return result::err(F"脚本 {name} 执行失败");

            for (let t : ts)
            {
                if (!vmm->invoke("main", [t: dynamic])->is_value)
                    return result::err(F"脚本 {name} 执行失败");
            }
            
            do vmm->close();

            return result::ok(do nil);
        }
        none?
            return result::err(F"未找到名为 {name} 的图像处理脚本");
        }
    }
    public func update_and_get_scripts(proj: Project)
    {
        let r = {}mut: map<string, fsys::path_t>;

        for (let path : fsys::allsubpath(fsys::normalize(std::host_path()))
                -> or([])
                -> connect(fsys::allsubpath(proj->get_path)
                    -> or([]))
            )
        {
            if (!path->tostring->lower->end_with(".image.wo"))
                continue;

            r->set(fsys::purename(path), path);

            // match (vm::load(path->tostring))
            // {
            // ok(vmm)?
            //     {
            //         do vmm->jit;
            //         assert(vmm->run->is_value);
            //         let name = vmm->invoke("name", [])->unwrap as string;
            //         r->set(name == ""? fsys::purename(path) | name, vmm);
            //     }
            // err(msg)?
            //     je::logerr(F"加载脚本 {path} 失败：{msg}");
            // }
        }

        image_effect_scripts = r->unsafe::asdict;
    }
}
