import je;
import je.gui;

import pkg.image;
import pkg.filesystem;

import tools;

using je;
using je::gui;

namespace editor::gui::drawpannel
{
    public alias color4_t = (real, real, real, real);

    func save_texture_to_path(context: EditorContext, tex: graphic::texture, path: string)
    {
        let (w, h) = tex->size();
        let saving_img = image::create(w, h);

        for (let mut x = 0; x < w; x += 1)
            for (let mut y = 0; y < h; y += 1)
                saving_img->setpix((x, y), tex->pix((x, y))->get_color);

        let result = saving_img->save(path->replace("@", context->get_project.m_path));
        if (!result)
            jeapi::gui::form::errmsg("图像保存失败", F"无法保存图像到{path}");
        return result;
    }

    public func modify_sampling_method(path: string, method: je::graphic::texture::sampling, callback: (je::graphic::texture::sampling)=>void)
    {
        launch(func(method: mutable<je::graphic::texture::sampling>){
            je::gui::SetNextWindowSizeConstraints((300., 200.), (300., 200.));
            let mut open = BeginOpen(F"编辑图片{path}");
                static let MIN_SAMPLING_METHODS = {
                    ["线性采样"] = je::graphic::texture::sampling::MIN_LINEAR,
                    ["临近采样"] = je::graphic::texture::sampling::MIN_NEAREST,
                    ["MIN_NEAREST_NEAREST_MIP"] = je::graphic::texture::sampling::MIN_NEAREST_NEAREST_MIP,
                    ["MIN_LINEAR_NEAREST_MIP"] = je::graphic::texture::sampling::MIN_LINEAR_NEAREST_MIP,
                    ["MIN_NEAREST_LINEAR_MIP"] = je::graphic::texture::sampling::MIN_NEAREST_LINEAR_MIP,
                    ["MIN_LINEAR_LINEAR_MIP"] = je::graphic::texture::sampling::MIN_LINEAR_LINEAR_MIP,
                };
                static let MAG_SAMPLING_METHODS = {
                    ["线性采样"] = je::graphic::texture::sampling::MAG_LINEAR,
                    ["临近采样"] = je::graphic::texture::sampling::MAG_NEAREST,
                };
                static let X_SAMPLING_METHODS = {
                    ["截断"] = je::graphic::texture::sampling::CLAMP_EDGE_X,
                    ["重复"] = je::graphic::texture::sampling::REPEAT_X,
                };
                static let Y_SAMPLING_METHODS = {
                    ["截断"] = je::graphic::texture::sampling::CLAMP_EDGE_Y,
                    ["重复"] = je::graphic::texture::sampling::REPEAT_Y,
                };

                static let MIN_SAMPLING_METHODS_NAMES = MIN_SAMPLING_METHODS->keys;
                static let MIN_SAMPLING_METHODS_VALUES = MIN_SAMPLING_METHODS->vals;
                static let MAG_SAMPLING_METHODS_NAMES = MAG_SAMPLING_METHODS->keys;
                static let MAG_SAMPLING_METHODS_VALUES = MAG_SAMPLING_METHODS->vals;

                static let X_SAMPLING_METHODS_NAMES = X_SAMPLING_METHODS->keys;
                static let X_SAMPLING_METHODS_VALUES = X_SAMPLING_METHODS->vals;
                static let Y_SAMPLING_METHODS_NAMES = Y_SAMPLING_METHODS->keys;
                static let Y_SAMPLING_METHODS_VALUES = Y_SAMPLING_METHODS->vals;

                Text("采样设置");
                Separator();
                match (Combo("缩小时", 
                    MIN_SAMPLING_METHODS_NAMES, 
                    MIN_SAMPLING_METHODS_VALUES
                        ->find(std::bitand(method->get: int, je::graphic::texture::sampling::MIN_FILTER_MASK: int): je::graphic::texture::sampling)))
                {
                value(newselect)?
                    method->set(std::bitnot(je::graphic::texture::sampling::MIN_FILTER_MASK: int)
                        ->std::bitand(method->get: int)
                        ->std::bitor(MIN_SAMPLING_METHODS_VALUES[newselect]: int): je::graphic::texture::sampling);
                none?
                    ;
                }

                match (Combo("放大时", 
                    MAG_SAMPLING_METHODS_NAMES, 
                    MAG_SAMPLING_METHODS_VALUES
                        ->find(std::bitand(method->get: int, je::graphic::texture::sampling::MAG_FILTER_MASK: int): je::graphic::texture::sampling)))
                {
                value(newselect)?
                    method->set(std::bitnot(je::graphic::texture::sampling::MAG_FILTER_MASK: int)
                        ->std::bitand(method->get: int)
                        ->std::bitor(MAG_SAMPLING_METHODS_VALUES[newselect]: int): je::graphic::texture::sampling);
                none?
                    ;
                }
                
                Separator();

                match (Combo("X方向", 
                    X_SAMPLING_METHODS_NAMES, 
                    X_SAMPLING_METHODS_VALUES
                        ->find(std::bitand(method->get: int, je::graphic::texture::sampling::WRAP_X_METHOD_MASK: int): je::graphic::texture::sampling)))
                {
                value(newselect)?
                    method->set(std::bitnot(je::graphic::texture::sampling::WRAP_X_METHOD_MASK: int)
                        ->std::bitand(method->get: int)
                        ->std::bitor(X_SAMPLING_METHODS_VALUES[newselect]: int): je::graphic::texture::sampling);
                none?
                    ;
                }

                match (Combo("Y方向", 
                    Y_SAMPLING_METHODS_NAMES, 
                    Y_SAMPLING_METHODS_VALUES
                        ->find(std::bitand(method->get: int, je::graphic::texture::sampling::WRAP_Y_METHOD_MASK: int): je::graphic::texture::sampling)))
                {
                value(newselect)?
                    method->set(std::bitnot(je::graphic::texture::sampling::WRAP_Y_METHOD_MASK: int)
                        ->std::bitand(method->get: int)
                        ->std::bitor(Y_SAMPLING_METHODS_VALUES[newselect]: int): je::graphic::texture::sampling);
                none?
                    ;
                }

                if (Button("确认"))
                {
                    open = false;
                    callback(method->get);
                }

            End();
            
            return open;
        
        }, (mutable::create(method), /**/));
    }
    public using TextureSnapshot = struct
    {   
        m_width: int,
        m_height: int,
        m_pixels: array<color4_t>,
        m_texture: graphic::texture,
    }
    {
        public func create(tex: graphic::texture)
        {
            let (w, h) = tex->size;
            let pxs = array::create(w * h, mut (0., 0., 0., 0.));

            for (let mut x = 0; x < w; x += 1)
                for (let mut y = 0; y < h; y += 1)
                    pxs[y * w + x] = tex->pix((x, y))->get_color;

            return TextureSnapshot{
                m_width = w,
                m_height = h,
                m_pixels = pxs->unsafe::cast:< array<color4_t> >,
                m_texture = tex,
            };
        }
        public func restore(self: TextureSnapshot)
        {
            for (let mut x = 0; x < self.m_width; x += 1)
                for (let mut y = 0; y < self.m_height; y += 1)
                    self.m_texture->pix((x, y))->set_color(self.m_pixels[y * self.m_width + x]);
        }
    }

    using HistoryManager = struct {
        m_texture: graphic::texture,
        m_current: mut int,
        m_history: vec<TextureSnapshot>,
        m_edited_mark: mut bool,
    }
    {
        func create(tex: graphic::texture)
        {
            return HistoryManager{
                m_texture = tex,
                m_current = mut 0,
                m_history = [TextureSnapshot::create(tex)]mut,
                m_edited_mark = mut false,
            };  
        }
        func mark_as_edited(self: HistoryManager)
        {
            self.m_edited_mark = true;
        }
        func edited(self: HistoryManager)
        {
            return self.m_current != 0 || self.m_edited_mark;
        }
        func save_step(self: HistoryManager)
        {
            let snapshot = TextureSnapshot::create(self.m_texture);
            self.m_current += 1;
            if (self.m_current < self.m_history->len)
                // 新添加快照将覆盖后续所有
                assert(self.m_history->decrease(self.m_current)); // 必须成功
            self.m_history->add(snapshot);            
        }
        func undo(self: HistoryManager)
        {
            if (self.m_current > 0)
            {
                self.m_history[self.m_current -:= 1]->restore;
                return true;
            }
            return false;
        }
        func redo(self: HistoryManager)
        {
            if (self.m_current < self.m_history->len - 1)
            {
                self.m_history[self.m_current +:= 1]->restore;
                return true;
            }
            return false;
        }
    }
    using DrawContextT = struct{
        scale:      mut real,
        offset_x:   mut real,
        offset_y:   mut real,
        drawtool:   mut DrawToolT,

        mousedown:  mut bool,

        usecolor:   mut color4_t,
        maincolor:  mut color4_t,
        subcolor:   mut color4_t,

        edited_textures: dict<graphic::texture, (int/*texture pass id*/, HistoryManager)>,
        // 傻逼键盘迟早得换！
    };

    func _delta_wheel()
    {
        static let mut _w = input::wheel();
        let _nw = input::wheel();
        let delta = _nw - _w;
        _w = _nw;
        return delta;
    }

    using DrawToolT = struct{
        name: string,
        on_mouse_down: (graphic::texture, color4_t, (int, int))=>void,
        on_mouse_hold: (graphic::texture, color4_t, (int, int))=>void,
        on_mouse_up: (graphic::texture, color4_t, (int, int))=>void,
    }
    {
        func create<T>(name: string, instance: T)
        {
            return DrawToolT{
                name = name,
                on_mouse_down = \t: graphic::texture, c: color4_t,p: (int, int) = instance->OnMouseDown(t, c, p);,
                on_mouse_hold = \t: graphic::texture, c: color4_t,p: (int, int) = instance->OnMouseHold(t, c, p);,
                on_mouse_up = \t: graphic::texture, c: color4_t,p: (int, int) = instance->OnMouseUp(t, c, p);,
            };
        }
        func OnMouseDown(self: DrawToolT, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            return self.on_mouse_down(target, color, pos);
        }
        func OnMouseHold(self: DrawToolT, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            return self.on_mouse_hold(target, color, pos);
        }
        func OnMouseUp(self: DrawToolT, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            return self.on_mouse_up(target, color, pos);
        }
    }

    let all_draw_tools = {
        ["无"] = \=DrawToolT::create("无", (): tools::Nothing);,
        ["钢笔"] = \=DrawToolT::create("钢笔", tools::Pen::create());,
        ["直线"] = \=DrawToolT::create("直线", tools::Line::create());,
        ["矩形"] = \=DrawToolT::create("矩形", tools::Rect::create());,
        ["填充"] = \=DrawToolT::create("填充", (): tools::Fill);,
    };

    func edittexture(context: EditorContext, entity: option<jeapi::debug::Eeid>, images: array<(int, mut graphic::texture)>, draw_context: DrawContextT)
    {
        let open = BeginAttrOpen(F"绘制##{JobID()}", WindowsAttribute::ImGuiWindowFlags_MenuBar);

        if (BeginTabBar("##draw_textures"))
        {
            for (let index, (passid, texture) : images)
            {
                let history_mgr = draw_context.edited_textures[texture][1];

                let texture_path = texture->path->valor("<内置>");
                if (BeginTabItem(F"通道{passid}: {texture_path}"))
                {
                    if (BeginMenuBar())
                    {
                        if (BeginMenu("文件"))
                        {
                            if (MenuItem("画布尺寸"))
                            {
                                // 更新画布尺寸之后，创建新的纹理对象覆盖到数组里
                                let image_old_sz = texture->size;
                                let image_new_sz = (mut image_old_sz[0], mut image_old_sz[1]);
                                launch(func(){
                                    let mut open = BeginAttrOpen("创建绘制对象", WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize);
                                    Text("尺寸：");
                                    Text("x:");
                                    SameLine();
                                    do InputInt("##x", image_new_sz[0])->>func(vi){
                                        if (vi <= 0) return;
                                        image_new_sz[0] = vi;
                                    };
                                    SameLine();
                                    Text("y:");
                                    SameLine();
                                    do InputInt("##y", image_new_sz[1])->>func(vi){
                                        if (vi <= 0) return;
                                        image_new_sz[1] = vi;
                                    };
                                    if (Button("应用"))
                                    {
                                        open = false;
                                        let new_texture = je::graphic::texture::create(image_new_sz...);
                                        for (let mut ix = 0; ix < std::min(image_new_sz[0], image_old_sz[0]); ix += 1)
                                            for (let mut iy = 0; iy < std::min(image_new_sz[1], image_old_sz[1]); iy += 1)
                                                new_texture->pix((ix, iy))->set_color(texture->pix((ix, iy))->get_color());

                                        images[index][1] = new_texture;
                                        do texture->path->>\path = new_texture->bind_path(path);;

                                        history_mgr->mark_as_edited();
                                    }
                                    End();
                                    return open;
                                }, ());
                            }
                            if (MenuItem("采样方式"))
                            {
                                drawpannel::modify_sampling_method(texture_path, texture->get_sampling_method, 
                                    func(method){
                                        texture->set_sampling_method(method);
                                        history_mgr->mark_as_edited();
                                    });
                            }
                            EndMenu();
                        }
                        EndMenuBar();
                    }

                    // OK 在这里显示一下绘图工具箱
                    BeginGroup();
                    
                    if (ColorButton("##main_color", draw_context.maincolor) )
                        OpenPopup("MainColorPicker");
                    SameLine();
                    if (ColorButton("##sub_color", draw_context.subcolor) )
                        OpenPopup("SubColorPicker");

                    let mut enable_draw = !input::keydown(keycode::L_CTRL);
                    if (BeginPopup("MainColorPicker"))
                    {
                        enable_draw = false;
                        do ColorPicker4("##main_color_picker", draw_context.maincolor)
                            ->> \c = draw_context.maincolor = c;;
                        EndPopup();
                    }
                    if (BeginPopup("SubColorPicker"))
                    {
                        enable_draw = false;
                        do ColorPicker4("##sub_color_picker", draw_context.subcolor)
                            ->> \c = draw_context.subcolor = c;;
                        EndPopup();
                    }

                    Text(F"当前工具: \n {draw_context.drawtool.name}");
                    for (let name, tool_create_method : all_draw_tools)
                    {
                        if (ButtonSize(name, (100., 0.)))
                            draw_context.drawtool = tool_create_method();
                    }
                    EndGroup();

                    SameLine();

                    let (tex_width, tex_height) = texture->size;
                    let drawlist = GetWindowDrawList();

                    let (avaliw, avalih) = GetContentRegionAvail();

                    do InvisibleButton("##draw_space", (avaliw->\x=x<=100.?100.|x;, avalih->\x=x<=100.?100.|x;));
                    if (IsItemActive() || IsItemHovered())
                    {
                        if (input::keydown(keycode::L_CTRL) 
                            && IsMouseDragging(ImGuiMouseButton::ImGuiMouseButton_Left))
                        {
                            let (mousedelta_x, mousedelta_y) = GetMouseDeltaPos();
                            draw_context.offset_x += mousedelta_x;
                            draw_context.offset_y += mousedelta_y;
                        }
                        draw_context.scale += _delta_wheel();

                        if (draw_context.scale < 1.)
                            draw_context.scale = 1.;
                    }
                    else if (!draw_context.mousedown)
                        enable_draw = false;

                    let (p0, p1) = GetItemRect();
                    let (lux, luy) = p0;
                    let (rbx, rby) = p1;

                    PushClipRect(p0, p1);
                    drawlist->AddRectFilled(p0, p1, (75, 75, 75, 255));
                    drawlist->AddImage(
                        (lux + draw_context.offset_x, luy + draw_context.offset_y), 
                        (lux + draw_context.scale * tex_width:real + draw_context.offset_x, 
                        luy + draw_context.scale * tex_height:real + draw_context.offset_y), 
                        texture);
                        
                    // OK 如果缩放大于5，就顺手画一下网格
                    if (draw_context.scale >= 5.)
                    {
                        for (let mut yoffset = 0.; yoffset <= tex_height:real * draw_context.scale; yoffset += draw_context.scale)
                            drawlist->AddLine(
                                (lux + draw_context.offset_x, luy + draw_context.offset_y + yoffset), 
                                (lux + draw_context.offset_x + tex_width:real * draw_context.scale, luy + draw_context.offset_y + yoffset), 
                                (0, 0, 0, 20));
                        for (let mut xoffset = 0.; xoffset <= tex_width:real * draw_context.scale; xoffset += draw_context.scale)
                            drawlist->AddLine(
                                (lux + draw_context.offset_x + xoffset, luy + draw_context.offset_y), 
                                (lux + draw_context.offset_x + xoffset, luy + draw_context.offset_y + tex_height:real * draw_context.scale), 
                                (0, 0, 0, 20));
                    }

                    // 获取鼠标所在的像素位置，高亮这一块儿
                    let (mposx, mposy) = GetMousePos();
                    let mpixx = ((mposx - lux - draw_context.offset_x) / draw_context.scale): int: real;
                    let mpixy = ((mposy - luy - draw_context.offset_y) / draw_context.scale): int: real;

                    if (mpixx >= 0. && mpixx < tex_width:real && mpixy >= 0. && mpixy < tex_height:real)
                    {
                        // Ok 鼠标指向的像素位置是合法的，高亮！
                        let highlight_p0 = (mpixx * draw_context.scale + draw_context.offset_x + lux, mpixy * draw_context.scale + draw_context.offset_y + luy);
                        let highlight_p1 = ((mpixx + 1.) * draw_context.scale + draw_context.offset_x + lux, (mpixy + 1.) * draw_context.scale + draw_context.offset_y + luy);
                        drawlist->AddRectFilled(highlight_p0, highlight_p1, (255, 255, 255, 100));
                    }

                    // 不过需要注意的是，引擎使用的像素坐标原点不是左上角，而是左下角，所以这里需要做一次简单变换
                    let mepixx = mpixx: int;
                    let mepixy = tex_height - 1 - mpixy: int;

                    if (input::keydown(keycode::MOUSE_M_BUTTION)
                        && mepixx >= 0 && mepixx < tex_width
                        && mepixy >= 0 && mepixy < tex_height)
                        draw_context.maincolor = texture->pix((mepixx, mepixy))->get_color;

                    // 对接绘制工具，针对鼠标刚刚点下、按住、和松开分别回调
                    if (enable_draw)
                    {
                        let mut first_click = false;
                        if (draw_context.mousedown == false)
                        {
                            first_click = true;
                            if (input::keydown(keycode::MOUSE_L_BUTTION))
                                draw_context.usecolor = draw_context.maincolor;
                            else if (input::keydown(keycode::MOUSE_R_BUTTION))
                                draw_context.usecolor = draw_context.subcolor;
                            else
                                first_click = false;
                        }
                        if (input::keydown(keycode::MOUSE_L_BUTTION) || input::keydown(keycode::MOUSE_R_BUTTION))
                        {
                            draw_context.mousedown = true;
                            if (first_click)
                                draw_context.drawtool->OnMouseDown(texture, draw_context.usecolor, (mepixx, mepixy));
                            else
                                draw_context.drawtool->OnMouseHold(texture, draw_context.usecolor, (mepixx, mepixy));
                        }
                        else
                        {
                            if (draw_context.mousedown)
                            {
                                draw_context.drawtool->OnMouseUp(texture, draw_context.usecolor, (mepixx, mepixy));
                                history_mgr->save_step();
                            }
                            draw_context.mousedown = false;
                        }
                    }

                    PopClipRect();
                    EndTabItem();
                }
            }
            EndTabBar();
        }
        End();

        if (open)
            return true;
        else
        {
            // 遍历所有被编辑过的图片，直接保存！
            for (let _, (passid, edited_texture) : images)
            {
                if (!draw_context.edited_textures[edited_texture][1]->edited)
                    continue;
                
                // 生成文件名，如果已经有了就有，没有就死！
                let projpath = context->get_project().m_path;
                let saving_path = edited_texture->path->or(func(){
                    let genuidpath = \ = F"{projpath}/resource/texture/{je::uid()}.png";;
                    let mut name = "";
                    for (; name == "" || filesys::exist(name); name = genuidpath())
                        ;
                    return name;
                })->\path = filesys::extension(path)->lower == ".png" ? path | F"{filesys::parent(path)}/{filesys::purename(path)}.png";
                ;
                
                if (save_texture_to_path(context, edited_texture, saving_path))
                {
                    do je::editor::update_texture_sampling_method_by_path(saving_path, edited_texture->get_sampling_method());
                    do entity
                        ->> \eid = eid->justdo(
                                \e = e->editor::graphic::bind_texture(passid, je::graphic::texture::load(
                                    context->get_project->make_path_normalize(saving_path))->val);
                            )
                            ;
                        ;
                }
            }
        }
        return false;
    }

    public func drawedit(context: EditorContext, e: entity)
    {
        // 检查实体有没有纹理组件，然后遍历检查所有纹理是否都存在，有没有没有路径的问题
        // 如果发现不正常的纹理就给个提示

        if (!e->editor::get_component(typeinfo::load("Renderer::Textures")->val)->has)
        {
            jeapi::gui::form::errmsg("无法绘制当前实体", "当前实体不包含 Renderer::Textures 组件，无法绘制");
            return;
        }

        let textures = e->editor::graphic::get_textures();

        // 这个大大的傻逼代码作用是获取当前实体使用的所有纹理通道
        let used_texture_id_pass = e->editor::graphic::get_shaders()
            =>> \shader = shader->get_uniforms()
                    ->  unmapping
                    =>> \nv = nv...
                        ->  func(name, uniformval)
                            {
                                if (!name->beginwith("JOYENGINE_"))
                                {
                                    match (uniformval)
                                    {
                                    texture(id)?
                                        return [id];
                                    _?;
                                    }
                                }
                                return [];
                            }
                        ;
                ;
            ->> \id = (id, nil);
            ->  mapping
            ->  unmapping // remove all repeated elems.
            ->> \idn = idn[0];
        ;

        if (used_texture_id_pass->empty)
        {
            jeapi::gui::form::errmsg("无法绘制当前实体", "当前实体不使用任何纹理，因此无法编辑");
            return;
        }

        // OK
        let has_no_exist_texture = ! used_texture_id_pass
            ->> \id = textures->get(id)->has;
            ->  reduce(\l, r = l ? r | l;)
            ->  valor(true);
            ;

        let id_tex_list = used_texture_id_pass 
            ->> \id = (id, mut textures->get(id)->valor(je::graphic::texture::create(16, 16)));
            ;
        launch(edittexture, (
            context,
            option::value(jeapi::debug::get_entity_editor_id(e)),
            id_tex_list,
            DrawContextT{
                scale = mut 10.,
                offset_x = mut 0.,
                offset_y = mut 0.,
                drawtool = mut all_draw_tools["无"](),

                mousedown = mut false,

                usecolor = mut (1., 1., 1., 1.),
                maincolor = mut (1., 1., 1., 1.),
                subcolor = mut (0., 0., 0., 0.),

                edited_textures = id_tex_list
                    ->> \id_text = (id_text[1], (id_text[0], HistoryManager::create(id_text[1])));
                    ->  mapping
                    ,
            }
        ));
    }
}
