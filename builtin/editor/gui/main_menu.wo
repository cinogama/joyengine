// gui.main_menu
// 用于显示编辑器的主菜单栏
import je.gui;

import builtin.editor.gui.main;
import builtin.api.dbg.main;
import builtin.editor.gui.edit_forms.export_project;
import builtin.api.gui.inputmgr;

using je::gui;

namespace editor::gui
{
    private func _save_world(context: EditorContext)
    {
        let proj = context->get_project;
        if (proj->get_editing_world->>\w = proj->save_world(w);->valor(false) == false)
        {
            jeapi::gui::form::errmsg("错误", "保存当前世界失败"); 
        }
    }
    private func _save_project(context: EditorContext)
    {
        let proj = context->get_project;
        if (proj->save_project())
            jeapi::gui::form::msg("完成", "项目和所有编辑中的世界已经保存");
        else
            jeapi::gui::form::errmsg("失败", "项目保存未能完成");
    }

    public func show_main_menu(context: EditorContext)
    {
        context->launch_editor_form(func(){
            context->update_api();

            if (!context->get_project->is_debugging)
            {
                do BeginMainMenuBar();
                if (BeginMenu("JoyEngine"))
                {
                    if (MenuItem("退出编辑器"))
                        // 关闭环境正在编辑的项目，退出
                        context->get_project->close();

                    EndMenu();
                }
                if (BeginMenu("文件"))
                {
                    if (MenuItem("保存当前世界"))
                        _save_world(context);

                    EndMenu();
                }
                if (BeginMenu("项目"))
                {
                    if (MenuItemShortcut("保存项目", "Ctrl + S"))
                        _save_project(context);

                    if (MenuItem("项目设置"))
                    {
                        context->launch_editor_form(func(){
                            je::gui::SetNextWindowSizeConstraints((500., 300.), (500., 600.));
                            let open = BeginOpen("项目设置");
                            for (let item_name, iconfig : context->get_project->get_configs)
                            {
                                do iconfig->edit();
                                Separator();
                            }
                            End();
                            return open;
                        }, ());
                    }
                    Separator();
                    if (MenuItem("导出"))
                    {
                        edit_forms::show_export_project(context);
                    }
                    EndMenu();
                }
                if (BeginMenu("工具"))
                {
                    let scripts = tools::get_available_tool_scripts();
                    if (scripts->empty())
                        do MenuItemEnabled("空", false);
                    else
                        for (let _, script_name : scripts)
                            if (MenuItem(script_name))
                            {
                                match (tools::run_tool_script(script_name))
                                {
                                err(msg)?
                                    jeapi::gui::form::errmsg("失败", F"运行脚本失败：{msg}");
                                ok(_)?;
                                }
                            }
                    Separator();
                    if (MenuItem("重新获取脚本"))
                        tools::update_tool_scripts(context->get_project);
                        
                    EndMenu();
                }
                if (BeginMenu("帮助"))
                {
                    if (MenuItem("关于"))
                        jeapi::welcome::show_about();
                    Separator();
                    do MenuItemSelected("显示隐藏实体", edit_forms::get_is_albe_to_display_debug_entity())
                        ->> \select = edit_forms::set_is_albe_to_display_debug_entity(select);
                        ;
                    EndMenu();
                }
                EndMainMenuBar();

                if (jeapi::gui::inputmgr::keyspush([je::keycode::L_CTRL, je::keycode::S]))
                    _save_project(context);
            }
        }, ());
    }
}