using je::gui;

namespace editor::gui::tickline
{
    // Tickline
    // 游戏全局控制系统
    // 
    // Tickline Global Gaming Controlor System
    // 作为游戏逻辑和流程控制的补充机制，使用极大简化后的
    // API 对游戏中的对象/动作/事件和资源进行全局化的控制.
    // P.S. 目标用起来应该和RPGMaker一般简易

    let mut _tickline_mgr_form_shown = false;
    let edit_context_container = []mut: vec<dynamic>;

    func _clear_context_in_container()
    {
        for (let _, ctx : edit_context_container)
        {
            ctx->unsafe::cast:< mutable<option<void>>>->set(option::none);
        }
    }
    func _ask_context_for_type<T>()
    {
        let result = mutable::create(option::none: option<T>);
        edit_context_container->add(result: dynamic);
        return result;
    }

    using BehaviorActionContext = typeof(nil)
    {
        func create(context: EditorContext)
        {
            return nil: BehaviorActionContext;
        }
        func edit(self: BehaviorActionContext, editor_context: EditorContext)
        {

        }
    }

    using EventActionContext = typeof(nil)
    {
        func create(context: EditorContext)
        {
            return nil: EventActionContext;
        }
        func edit(self: EventActionContext, editor_context: EditorContext)
        {

        }
    }

    using ObjectEditorContext = struct{ 
        m_selecting_ob_id : mut int,
    }
    {
        func create(context: EditorContext)
        {
            return ObjectEditorContext{
                m_selecting_ob_id = mut -1,
            };
        }

        func edit(self: ObjectEditorContext, editor_context: EditorContext)
        {
            let proj = editor_context->get_project();

            let tickline_context = proj->get_tickline_context();
            let object_names = tickline_context.m_objects->>\ob = ob.m_name + "##" + ob.m_euid: string;;

            BeginGroup();
            Text("对象");
            let (_, height) = GetContentRegionAvail();
            do ListBoxSelectSize("##oblist", object_names->unsafe::cast:< array<string>>, self.m_selecting_ob_id, 200., height)
                ->> \id = self.m_selecting_ob_id = id;
                ;
            EndGroup();

            SameLine();
            
            BeginGroup();
            
            if (Button("从选中的实体创建"))
            {
                match (editor_context->get_editing_entity())
                {
                value(eeid)?
                    eeid->justdo(func(e)
                        {
                            if (tickline_context->create_object(e) == false)
                                jeapi::gui::form::errmsg("失败", "无法从此实体创建"); 
                        });
                none?
                    jeapi::gui::form::errmsg("失败", "没有选中的实体");
                }
            }

            Separator();

            if (self.m_selecting_ob_id == -1)
                TextDisabled("没有选中要编辑的Object");
            else
            {
                let object = tickline_context->get_object_by_index(self.m_selecting_ob_id)->val;
                if (Button("实例化选中的对象"))
                {
                    
                }

                Text("名称"); SameLine(); do InputText("##obname", object.m_name)
                    ->> \new_name = object.m_name = new_name;
                    ;

                Text("EUID"); SameLine(); do InputText("##obeuid", object.m_euid: string);

                Text("行为");
                let (width, height) = GetContentRegionAvail();
                do InputTextMultilineSize("##obbehavior", object.m_source, width, height)
                    ->> \new_source = object.m_source = new_source;
                    ;

            }

            EndGroup();
        }
    }

    using ResourceContext = typeof(nil)
    {
        func create(context: EditorContext)
        {
            return nil: ResourceContext;
        }
        func edit(self: ResourceContext, editor_context: EditorContext)
        {

        }
    }

    func tab_item_show<ContextT>(editor_context: EditorContext, name: string)
    {
        static let context_dat = _ask_context_for_type:< ContextT>();
        
        if (context_dat->get->has == false)
            do context_dat->set(option::value(ContextT::create(editor_context)));

        if (BeginTabItem(name))
        {
            do BeginChild("##tickline_main_body");
            context_dat->get->val->edit(editor_context);
            EndChild();
            EndTabItem();
        }
    }
    func tickline_editor_form(context: EditorContext)
    {
        je::gui::SetNextWindowSizeConstraints((500., 300.), (2000., 1000.));
        _tickline_mgr_form_shown = BeginAttrOpen("Tickline 编辑器",
            WindowsAttribute::ImGuiWindowFlags_MenuBar);

        if (BeginMenuBar())
        {
            if (BeginMenu("帮助"))
            {
                if (MenuItem("关于"))
                    jeapi::gui::form::msg("关于Tickline", 
                        "Tickline是JoyEngine的快速游戏行为和资源管理编辑器\n(C)Cinogama project.");
                
                EndMenu();
            }
            EndMenuBar();
        }

        if (BeginTabBar("##tickline_main"))
        {
            tab_item_show:< BehaviorActionContext>(context, "行为");
            tab_item_show:< ObjectEditorContext>(context, "对象");
            tab_item_show:< EventActionContext>(context, "事件");
            tab_item_show:< ResourceContext>(context, "资源");
            EndTabBar();
        }

        End();
        return _tickline_mgr_form_shown;
    }
    public func show_tickline_editor(context: EditorContext)
    {
        if (!_tickline_mgr_form_shown)
        {
            _tickline_mgr_form_shown = true;
            _clear_context_in_container();
            launch(tickline_editor_form, (context,));
        }
    }
}