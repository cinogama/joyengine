// workflow.wo

import je;
import woo::std;

import pkg::fsys;
import pkg::iterator;
import pkg::try;
import pkg::vm;
import pkg::buffer;

import builtin::api::gui::form;
import builtin::editor::gui::main;
import builtin::editor::project::main;
import builtin::editor::environment::main;
import builtin::editor::gui::form::msg;

namespace editor::gui::workflow
{
    public func open(path: fsys::path_t, context: EditorContext)
    {
        let workflow_node_path = context->get_project->get_path / "resource" / "workflow" / "node";

        using NodeInfo = struct{
            m_name: string,
            m_namespace: array<string>,
            m_path: fsys::path_t,
        };

        let nodes = []mut: vec<NodeInfo>;

        for (let np : fsys::recursive_walk(workflow_node_path)->iterator::iter_result)
        {
            if (!fsys::isfile(np) || fsys::extension(np)->lower != ".wo")
                continue;

            do try!
            {
                let purename = fsys::purename(np);
                try! relative = fsys::relative(fsys::parent(np), workflow_node_path);

                let node_namespace = relative->split("/")-> forall(\p = p != "" && p  != ".";);
                nodes->add(
                    NodeInfo{
                        m_name = purename, 
                        m_namespace = node_namespace, 
                        m_path = np,
                        });
                return_ok!;
            };
        }

        let mut source = @"
import woo::std;
import je;
import je::gui;

namespace Editor
{
    let mut _universe = option::none: option<je::universe>;

    public func get_universe()
    {
        return _universe->unwrap;
    }
    extern func set_universe(u: je::universe)
    {
        _universe = option::value(u);
    }
}
"@;

        alias dyn_map = map<dynamic, dynamic>;
        let node_type_map = {}mut: dyn_map;
        for (let n : nodes)
        {
            source += "import resource::workflow::node::" 
                + n.m_namespace->reduce(\l,r = l + "::" + r;)
                    ->> \v = v + "::";
                    -> or("") 
                + n.m_name
                + ";\n"
                ;
            
            let mut write_node_map = node_type_map: dynamic;
            for (let name : n.m_namespace)
                write_node_map = write_node_map->unsafe::cast:<dyn_map>->get_or_set(name: dynamic, {}mut: dynamic);

            write_node_map->unsafe::cast:<dyn_map>->set(n.m_name: dynamic, nil: dynamic);            
        }
        source += "import builtin::api::gui::form;\n";
        source += "import builtin::api::gui::nodeeditor;\n";
        source += "import builtin::editor::gui::form::ask;\n";
        source += "import builtin::editor::gui::form::msg;\n";
        source += "import pkg::fsys;\n";

        source += "using jeapi::gui::node_editor;\n";

        source += "func main(){\n";
        source += "    let nodedict = {\n";

        func generate_node_dict(node_map: dyn_map)=> string
        {
            let mut source = "";
            for (let (name, subpath_or_nil) : node_map)
            {
                let name_str = name as string;
                if (subpath_or_nil is nil)
                {
                    source += "        [\"" + name_str + "\"] = NodeDictItem::Node(INode::creator:<" + name_str + ">),\n";
                }
                else
                {
                    source += "        [\"" + name_str + "\"] = NodeDictItem::Dict({\n";
                    source += generate_node_dict(subpath_or_nil->unsafe::cast:<dyn_map>);
                    source += "        }),\n";
                }
            }
            return source;
        }     
        source += generate_node_dict(node_type_map);
        source += "    };\n";
        source += F"    let doc_path = fsys::normalize(" + path->tostring->enstring + ");\n";
        source += "    let node_editor = jeapi::gui::node_editor::create(\"workflow_node_editor\", nodedict);\n";
        source += "    do fsys::readall(doc_path)->>\\dat = node_editor->restore(dat);;\n";
        source += F"    let form = jeapi::gui::form::create(\"Workflow 编辑器: \" + doc_path->tostring, true,\n";
        source += @"    func(_){
            node_editor->update();
        }"@;
        source += "        );\n";
        source += "    form->set_docking(true);\n";
        source += "    form->set_autoresize(false);\n";
        source += @"   form->set_callback_close(func(){
            jeapi::gui::form::ask("即将关闭Workflow编辑器", 
            "是否保存到:" + doc_path->tostring + "?", func(save){
                if (save)
                {
                    if (!fsys::writeall(doc_path, node_editor->dump()))
                    {
                        jeapi::gui::form::msg("保存失败", "保存Workflow失败");
                        return;
                    }
                }
                form->force_close();
            });
            return false;
        });"@;
        source += "\n";
        source += "    form->set_size_constraint(300., 200., 3000., 3000.);\n";
        source += "    if (!form->show())\n";
        source += "         jeapi::gui::form::errmsg(\"打开失败\", doc_path->tostring + \"已在编辑中，不能重复打开\");\n";
        source += "}\n";
        source += "main();\n";
        
        do try!
        {
            try! vm = vm::create(path->tostring + ".wo", source: buffer);
            do vm->run();
            do vm->invoke("Editor::set_universe", 
                [context->get_project->get_env->get_universe: dynamic]);
            return_ok!;
        }
        catch! e
        {
            jeapi::gui::form::errmsg("加载Workflow失败", e);
        };
    }
}
