import woo::std;

import je;
import je::gui;

import pkg::fsys;
import pkg::try;
import pkg::iterator;
import pkg::worst;
import pkg::math;
import pkg::async;
import pkg::thread;
import pkg::buffer;

import builtin::api::gui::form;
import builtin::api::gui::errmsg;

import builtin::editor::gui::main;
import builtin::editor::gui::form::ask;
import builtin::editor::project::main;
import builtin::editor::gui::browser;
import builtin::editor::tools::file;

using fsys;
using iterator;
using je;
using je::gui;

namespace editor::gui
{
    func is_identify_char(c: char)=> bool
    {
        return c->is_alnum || c == '_';
    }
    
    using RefactorAskContent = struct{
        m_editor_context: EditorContext,
        
        m_old_path: fsys::path_t,
        m_target_path: fsys::path_t,
        
        m_replacing_aim: array<(string, string)>,
        m_next_replacing_aim: mut int,
        
        m_contents: array<(fsys::path_t, ReplacingContent)>,
    }
    {
        using ReplacingContent = struct{
            m_able_to_update: bool,
            m_updated: mut bool,
            m_content: mut string,
            m_replacing_place: mut array<(string, string, int)>,
        }
        {
            public func create(path: fsys::path_t, content: string)
            {
                return ReplacingContent{
                    m_able_to_update = extension(path)->lower != ".je4animation",
                    m_updated = mut false,
                    m_content = mut content,
                    m_replacing_place = mut [],
                };
            }
            public func ready_to_update(self: ReplacingContent, old: string, new: string)
            {
                do new;
                
                let mut place = 0;
                let all_find_place = []mut: vec<int>;
                
                for (;;)
                {
                    match (self.m_content->find_from(old, place))
                    {
                        none?
                            break;
                        value (find_place)?
                        {
                            place = math::max(find_place + old->len, 1);
                            
                            if (find_place > 0 && self.m_content[find_place - 1]->is_identify_char)
                                continue;
                            if (place < self.m_content->len && self.m_content[place]->is_identify_char)
                                continue;
                                
                            all_find_place->add(find_place);
                        }
                    }
                }
                
                self.m_replacing_place = all_find_place->unsafe::asarray
                    ->> \idx = (
                            self.m_content->sub_len(idx - pre_print_len, pre_print_len)->replace_blank,
                            self.m_content->sub_len(idx + old->len, 30)->replace_blank,
                            idx
                            )
                            where pre_print_len = math::min(idx, 30)
                                , replace_blank = \s: string = s->chars->>\c = c->is_space ? ' ' | c;->str;
                        ;
                    ;
            }
            public func apply_update(self: ReplacingContent, old: string, new: string)
            {
                if (self.m_able_to_update == false)
                    return;
                    
                self.m_updated = true;
                
                let mut result = "";
                let mut begin_place = 0;
                
                for (let (_, _, idx) : self.m_replacing_place)
                {
                    result += self.m_content->sub_len(begin_place, idx - begin_place);
                    result += new;
                    begin_place = idx + old->len;
                }
                result += self.m_content->sub(begin_place);
                
                self.m_content = result;
            }
        }
        
        public func create(context: EditorContext, old_path: fsys::path_t, target_path: fsys::path_t)
        {
            let old_normalize_path = context->get_project->make_path_normalize(old_path);
            let old_pure_name = fsys::purename(old_path);
            let old_file_name = fsys::filename(old_path);
            
            let old_pure_pure_name =
                old_pure_name->find(".")
                    ->> \idx = old_pure_name->sub_len(0, idx);
                    -> or("")
                    ;
                    
            let target_normalize_path = context->get_project->make_path_normalize(target_path);
            let target_pure_name = fsys::purename(target_path);
            let target_file_name = fsys::filename(target_path);
            
            let target_pure_pure_name =
                target_pure_name->find(".")
                    ->> \idx = target_pure_name->sub_len(0, idx);
                    -> or("")
                    ;
                    
            if (old_normalize_path == "" || old_pure_name == "" || old_file_name == "")
                throw! "无效路径";
                
            let focus_file_type = [
                ".wo",
                ".h",
                ".hpp",
                ".c",
                ".cpp",
                ".je4world",
                ".je4entity",
                ".shader",
                ".je4animation", // 无法更新这个文件，但是得给警告
            ];
            
            // 扫描指定文件类型，查找上述字符串的引用关系
            let all_file_need_tobe_update =
                allsubpath(fsys::workpath())
                    -> or([])
                    -> iter
                    |> filter(\p = p->to_string->find("/.")->is_none;)
                    |> filter(\p = focus_file_type->find(extension(p)->lower)->is_value;)
                    |> filter(\p = isfile(p);)
                    |> filter_map(
                        \p = editor::file::readall(p)
                            ->>\content = (p, ReplacingContent::create(p, content as buffer: string));;)
                    |> collect;
                    
            return_ok! RefactorAskContent{
                m_editor_context = context,
                m_old_path = old_path,
                m_target_path = target_path,
                m_replacing_aim = [
                    (old_normalize_path, target_normalize_path),
                    (old_pure_name, target_pure_name),
                    (old_file_name, target_file_name),
                    (old_pure_pure_name, target_pure_pure_name),
                ]-> forall(\a = a.0 != a.1;),
                m_next_replacing_aim = mut 0,
                m_contents = all_file_need_tobe_update,
            };
        }
        
        async! public func async_prepare_update(
            self: RefactorAskContent, callback_path_for_display_progress: (path_t)=> void)
        {
            let prepare_thread_context = struct{
                mx = thread::mutex::create(),
                working_path = mut option::none: option<fsys::path_t>,
                finished_result = mut option::none: option<bool>,
            };
            
            do thread::create(func(){
                    if (self.m_next_replacing_aim < self.m_replacing_aim->len)
                    {
                        let (old, new) = self.m_replacing_aim[self.m_next_replacing_aim];
                        for (let (path, content) : self.m_contents)
                        {
                            prepare_thread_context.mx |> thread::IMutex::exec(func(){
                                    prepare_thread_context.working_path = option::value(path);
                                });
                                
                            content->ready_to_update(old, new);
                        }
                        self.m_next_replacing_aim += 1;
                        
                        prepare_thread_context.mx |> thread::IMutex::exec(func(){
                                prepare_thread_context.finished_result = option::value(true);
                            });
                            
                        return;
                    }
                    prepare_thread_context.mx |> thread::IMutex::exec(func(){
                            prepare_thread_context.finished_result = option::value(false);
                        });
                    return;
                });
                
            while (prepare_thread_context.mx
                |> thread::IMutex::exec(\= prepare_thread_context.finished_result->is_none;))
            {
                prepare_thread_context.mx
                    |> thread::IMutex::exec(func(){
                            match (prepare_thread_context.working_path)
                            {
                                value(p)?
                                    callback_path_for_display_progress(p);
                                none?;
                            }
                        });
                yield!;
            }
            return prepare_thread_context.finished_result->unwrap;
        }
        
        public func apply(self: RefactorAskContent)
        {
            // 1. 保存所有文件
            for (let (path, content) : self.m_contents)
            {
                if (content.m_updated)
                {
                    if (content.m_able_to_update)
                    {
                        if (! file::writeall(path, content.m_content: buffer))
                            jeapi::gui::errmsg("保存失败", F"保存文件 `{path->to_string()}` 失败");
                    }
                    else
                        jeapi::gui::errmsg("无法修改动画文件", F"文件 `{path->to_string()}` 是一个动画文件，无法通过重构工具修改，请手动更新");
                }
            }
            
            // 2. 移动目标文件(重命名)
            do try!
            {
                return fsys::move(self.m_old_path, self.m_target_path);
            }
            catch! e
            {
                jeapi::gui::errmsg("重命名/移动失败", F"重命名文件 `{self.m_old_path->to_string()}` 为 `{self.m_target_path->to_string()}` 失败：{e}");
            };
            
            // 3. 刷新browser
            force_update();
            
            // 4. 更新towoo
            self.m_editor_context->get_project
                ->update_towoo_after_dump_and_close(false);
        }
    }
    
    public func refactor(context: EditorContext, old_path: fsys::path_t, target_path: fsys::path_t)
    {
        if (fsys::exist(target_path))
        {
            jeapi::gui::errmsg("目标文件已存在", F"文件 `{target_path->to_string()}` 已存在，请先删除或移动目标文件");
            return_ok!;
        }
        
        try! content = RefactorAskContent::create(context, old_path, target_path);
        let raise_final_check = func(need_raise_world_list: bool){
            jeapi::gui::form::ask("重构准备完成", "即将保存并应用所有选定重构，是否确认继续重命名/移动？",
                func(ok){
                    let mut need_reload = false;
                    if (ok)
                    {
                        if (need_raise_world_list)
                        {
                            if (context->get_project->save_project())
                            {
                                need_reload = true;
                                context->get_project->close_all_world();
                            }
                            else
                            {
                                jeapi::gui::errmsg("保存失败", "保存项目失败，重构操作已经取消");
                                return; //发生失败，取消重构
                            }
                        }
                        content->apply();
                        launch_coroutine(func(){
                                if (need_reload)
                                {
                                    std::yield();
                                    
                                    // 5. 重新拉起world list
                                    context->get_project->load_worlds_from_list();
                                }
                            });
                    }
                });
        };
        
        let all_world_saved_and_closed = std::mutable::create(false);
        let checked_files = {}mut: ::map<RefactorAskContent::ReplacingContent, void>;
        let select_all = std::mutable::create(true);
        
        let show_progress_func = func(path: fsys::path_t){
            TextDisabled(path->to_string);
        };
        let prepare_job_async = std::mutable::create(
            option::value(content->async_prepare_update(show_progress_func)));
            
        let f = jeapi::gui::form::create("重构中……", true,
            func(this_form){
                Text("重命名或移动操作可能影响其他文件");
                Separator();
                
                match (prepare_job_async->get)
                {
                    value(async_job)?
                    {
                        Text("正在检查：");
                        match (async_job->forward())
                        {
                            returned(need_check)?
                            {
                                prepare_job_async->set <| option::none;
                                if (!need_check)
                                {
                                    // All done...
                                    raise_final_check(true);
                                    this_form->close;
                                }
                            }
                            _?;
                        }
                    }
                    none?
                    {
                        if (!all_world_saved_and_closed->get)
                        {
                            Text("为了确保能够正确地应用到当前编辑中的场景，");
                            Text("点击 `确认保存项目`，然后开始重构");
                            
                            Separator();
                            
                            if (Button("确认保存项目"))
                            {
                                if (!context->get_project->save_project())
                                    jeapi::gui::errmsg("保存失败", "保存项目失败，请检查项目是否有未保存的文件");
                                    
                                all_world_saved_and_closed->set <| true;
                            }
                            SameLine();
                            if (Button("不重构，仅移动"))
                            {
                                content->apply();
                                this_form->close();
                            }
                            
                            return;
                        }
                        
                        let cur_step = content.m_next_replacing_aim - 1;
                        Text(F"请在下列文件中选择需要应用的修改({cur_step + 1}/{content.m_replacing_aim->len})");
                        
                        Separator();
                        
                        let (old, new) = content.m_replacing_aim[cur_step];
                        
                        if (Button("全选"))
                            select_all->set(true);
                            
                        SameLine();
                        
                        if (Button("全不选"))
                            checked_files->clear;
                            
                        SameLine();
                        TextDisabled(F"更新 `{old}` => `{new}`");
                        
                        Separator();
                        
                        let mut has_any_file_to_update = false;
                        if (BeginChildSize("scrolling", 700., 300.))
                        {
                            for (let (path, replace_content) : content.m_contents)
                            {
                                if (replace_content.m_replacing_place->empty)
                                    continue;
                                    
                                if (select_all->get)
                                    checked_files->set(replace_content, do nil);
                                    
                                has_any_file_to_update = true;
                                
                                match (CheckBox(F"{path->to_string()}", checked_files->contains(replace_content)))
                                {
                                    value(checked)?
                                        if (checked)
                                            checked_files->set(replace_content, do nil);
                                    else
                                        do checked_files->remove(replace_content);
                                    none?;
                                }
                                
                                if (IsItemHovered())
                                {
                                    BeginTooltip();
                                    TextDisabled(path->to_string());
                                    for (let (pre, post, _) : replace_content.m_replacing_place)
                                    {
                                        TextDisabled("...");
                                        
                                        TextDisabled(pre);
                                        SameLine();
                                        Text(old);
                                        SameLine();
                                        TextDisabled(post);
                                    }
                                    EndTooltip();
                                }
                            }
                            select_all->set(false);
                        }
                        else
                            has_any_file_to_update = true;
                            
                        EndChild();
                        
                        if (Button("应用修改") || !has_any_file_to_update)
                        {
                            select_all->set(true);
                            
                            if (has_any_file_to_update)
                            {
                                for (let (replace_content, _) : checked_files)
                                {
                                    replace_content->apply_update(old, new);
                                }
                            }
                            
                            prepare_job_async->set <|
                                option::value(content->async_prepare_update(show_progress_func));
                        }
                    }
                }
            });
        do f->show();
        f->set_callback_close(func(){
                return true;
            });
            
        return_ok!;
    }
}
