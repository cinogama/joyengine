// gui.main
// 用于启动和维持项目的编辑器界面

import builtin.editor.project.main;

import builtin.editor.gui.main_menu;
import builtin.editor.gui.edit_forms;

namespace editor::gui
{
    public using EditorContext = struct {
        m_stopped: mut bool,
        m_project: Project,

        // 这玩意儿存着被选中的实体索引，用于对此实体执行安全操作。
        m_editing_entity_chunkinfo: mut option<jeapi::debug::Eeid>,
    }
    {
        // 由 main_menu 负责调用此函数，更新api和实体请求
        public func update_api(self: EditorContext)
        {
            match (self.m_editing_entity_chunkinfo)
            {
            value(eid)? 
                eid->dosth(func(oentity){
                    if (oentity->has == false)
                        self.m_editing_entity_chunkinfo = none;
                }); 
            none?;
            }
            // 更新一下对实体的请求
            jeapi::debug::update_safety_entity_operation_requests(
                self->get_project->get_env->get_universe);
        }
        protected func is_stopped(self: EditorContext)
        {
            return self.m_stopped;
        }
        public func get_project(self: EditorContext)
        {
            return self.m_project;
        }
        public func launch_editor_form<FT, ArgTs>(self: EditorContext, f: FT, args: ArgTs)
            where f(args...) is bool || f(args...) is void;
        {
            je::gui::launch(func(){
                let result = f(args...);

                if (self->is_stopped)
                    return false;
                else if (result is bool)
                    return result;

                return true;
            }, ());
        }
        public func set_editing_entity(self: EditorContext, e: option<je::entity>)
        {
            self.m_editing_entity_chunkinfo = e->>\e = jeapi::debug::get_entity_editor_id(e);;
        }
        public func get_editing_entity(self: EditorContext)
        {
            return self.m_editing_entity_chunkinfo;
        }
        public func dosth_at_editing_entity(self: EditorContext, f: (option<je::entity>)=> void)
        {
            do self.m_editing_entity_chunkinfo
                ->> \eid = eid->dosth(f);
                ->  or(\= f(option::none);)
                ;
        }
    }

    public func edit_project(proj: Project)
    {
        // 这又是个傻逼函数，传入一个项目实例，为这个项目实例创建基本运行环境
        // 然后启一堆编辑窗口，直到项目被关闭

        // 创建基础运行环境
        let context = EditorContext{
            m_stopped = mut false,
            m_project = proj,
            m_editing_entity_chunkinfo = mut option::none,
        };

        // 开启主菜单
        show_main_menu(context);
        show_edit_forms(context);

        // 等待，直到项目被关闭
        proj->wait;

        // 项目退出了，将编辑器上下文置为 stop, 用于指示窗口应当关闭
        context.m_stopped = true;
    }
}