// gui.main
// 用于启动和维持项目的编辑器界面
import woo::std;

import je;
import je::internal;

import builtin::editor::project::main;
import builtin::editor::gui::main_menu;
import builtin::editor::gui::edit_forms;
import builtin::editor::dbg::main;
import builtin::editor::environment::main;

namespace editor::gui
{
    using Timer = struct{
        m_last_update_time: mut real,
        m_update_intg: real,
    }
    {
        public func create(intg: real)
        {
            return Timer{
                m_last_update_time = mut std::time(),
                m_update_intg = intg,
            };
        }
        func update(self: Timer)
        {
            let cur_time = std::time();
            if (cur_time - self.m_last_update_time >= self.m_update_intg)
            {
                self.m_last_update_time = cur_time;
                return true;
            }
            return false;
        }
    }

    using EditorContext = struct {
        m_stopped: mut bool,
        m_project: Project,

        // 这玩意儿存着被选中的实体索引，用于对此实体执行安全操作。
        m_editing_entity_euid: mut option<jeapi::debug::Eeid>,

        // 这里放着必须照顺序执行的事务委托
        m_fix_update_jobs: vec<()=>bool>,

        // 这里放编辑器窗口的控制器，这样可以批量开启或关闭
        m_editor_form_controlor: map<string, EditorContext::EditorFormControlor>,

        m_towoo_system_update_timer: Timer,
    }
    {
        using EditorFormControlor = struct {
            m_open: std::mutable<bool>,
            m_old_state: mut option<bool>, // 仅用于开始调试时保存，结束调试时还原
        };
        public func show_all_editor_form(self: EditorContext)
        {
            for (let (_, c) : self.m_editor_form_controlor)
                c.m_open->set(true);
        }
        public func hide_all_editor_form(self: EditorContext)
        {
            for (let (_, c) : self.m_editor_form_controlor)
                c.m_open->set(false);
        }
        func begin_debug_and_hide_all_editor_form(self: EditorContext)
        {
            for (let (_, c) : self.m_editor_form_controlor)
            {
                match (c.m_old_state)
                {
                none?
                    {
                        c.m_old_state = option::value(c.m_open->get());
                        c.m_open->set(false);
                    }
                _?;
                }
            }
        }
        func end_debug_and_restore_all_editor_form(self: EditorContext)
        {
            for (let (_, c) : self.m_editor_form_controlor)
            {
                match (c.m_old_state)
                {
                value(stat)?
                    {
                        c.m_old_state = option::none;
                        c.m_open->set(stat);
                    }
                _?;
                }
            }
        }

        public func start_debug(self: EditorContext)
        {
            match (self->get_project->start_debug())
            {
            err(msg)? return err(msg);
            ok(_)?
                {
                    self->begin_debug_and_hide_all_editor_form();
                    return ok(do nil);
                }
            }
        }

        public func stop_debug(self: EditorContext)
        {
            match (self->get_project->stop_debug())
            {
            err(msg)? return err(msg);
            ok(_)?
                {
                    self->end_debug_and_restore_all_editor_form();
                    return ok(do nil);
                }
            }
        }

        public func register_editor_form_controlor(self: EditorContext, name: string)
        {
            if (self.m_editor_form_controlor->contain(name))
                return result::err(F"{name}已经注册");

            self.m_editor_form_controlor->set(name, EditorFormControlor{
                m_open = new! std::mutable(true),
                m_old_state = mut option::none,
            });
            return result::ok(self.m_editor_form_controlor[name].m_open);
        }

        // 由 main_menu 负责调用此函数，更新api和实体请求
        public func update_api(self: EditorContext)
        {
            match (self.m_editing_entity_euid := 
                jeapi::debug::Eeid::editor::editing())
            {
            value(eid)? 
                eid->dosth(func(oentity){
                    if (oentity->is_value == false)
                        self->set_editing_entity(none);
                }); 
            none?;
            }

            // 在此处运行和更新固定更新逻辑
            self.m_fix_update_jobs->copy(self.m_fix_update_jobs
                =>> \job_delegate = job_delegate() ? [job_delegate]mut | []mut;
                );

            // 更新一下对实体的请求
            jeapi::debug::update_safety_entity_operation_requests(
                self->get_project->get_env->get_universe);

            // 整个timer，定时检查一下towoo系统
            if (self.m_towoo_system_update_timer->update)
            {
                self->get_project->try_update_towoo(true);
            }
        }
        protected func is_stopped(self: EditorContext)
        {
            return self.m_stopped;
        }
        public func get_project(self: EditorContext)
        {
            return self.m_project;
        }
        public func fixed_launch_editor_form<FT, ArgTs>(self: EditorContext, f: FT, args: ArgTs)
            where f(args...) is bool || f(args...) is void;
        {
            if (f(args...) is bool)
                self.m_fix_update_jobs->add(\=f(args...););
            else
                self.m_fix_update_jobs->add(func(){f(args...); return true;});
        }
        public func launch_editor_form<FT, ArgTs>(self: EditorContext, f: FT, args: ArgTs)
            where f(args...) is bool || f(args...) is void;
        {
            je::gui::launch(func(){
                let result = f(args...);

                if (self->is_stopped)
                    return false;
                else if (result is bool)
                    return result;

                return true;
            }, ());
        }
        public func set_editing_entity(self: EditorContext, e: option<je::entity>)
        {
            jeapi::debug::Eeid::editor::select(
                self.m_editing_entity_euid := e
                    =>>\e = jeapi::debug::get_entity_editor_id(e););
        }
        public func get_editing_entity(self: EditorContext)
        {
            return self.m_editing_entity_euid;
        }
        public func dosth_at_editing_entity(self: EditorContext, f: (option<je::entity>)=> void)
        {
            do self.m_editing_entity_euid
                ->> \eid = eid->dosth(f);
                ->  or_do(\= f(option::none);)
                ;
        }

        public func get_logs(_: EditorContext)
        {
            return je::internal::getlogs();
        }
    }

    public func edit_project(proj: Project)
    {
        // 这又是个傻逼函数，传入一个项目实例，为这个项目实例创建基本运行环境
        // 然后启一堆编辑窗口，直到项目被关闭

        // 创建基础运行环境
        let context = EditorContext{
            m_stopped = mut false,
            m_project = proj,
            m_editing_entity_euid = mut option::none,
            m_fix_update_jobs = []mut,
            m_editor_form_controlor = {}mut,
            m_towoo_system_update_timer = new! Timer(5.),
        };

        // 开启主菜单
        show_main_menu(context);
        show_edit_forms(context);

        // 等待，直到项目被关闭
        proj->wait;

        // 释放模块
        proj->free_modules_after_close();
        
        // 项目退出了，将编辑器上下文置为 stop, 用于指示窗口应当关闭
        context.m_stopped = true;
    }
}