// visualeditor.main
// 可视化编辑器
// ---------------------------------------
// 由于ECS中，逻辑和数据分离，这在一定情况下会阻碍开发
// visualeditor预计是一个可视化的逻辑行为编辑器，拥有
// woolang或C++后端。
/*
概念：
值节点 (多入口多出口)(可缓存的值节点)
行为节点（单入口（实际上可以不限制？）多出口）（起始行为节点）（自定义脚本行为节点）
流程端口 （多入单出）
值端口 （单入多出）（类型）
*/

import pkg::interface;

import woo::std;
import woo::gui;

using je;
using std;
using je::gui;

namespace visualeditor
{
    using uid_t = string
    {
        func create()
        {
            return uid(): uid_t;
        }
    }

    using InValuePort = void;
    using OutValuePort = void;
    using InBehaviorPort = void;
    using OutBehaviorPort = void;

    using ValueNode = struct
    {
        // 值节点是值端口的集合
        m_in_vports: array<(string, InValuePort)>,
        m_out_vports: array<(string, OutValuePort)>,
    };

    using BehaviorNode = struct
    {
        // 行为节点是值端口和行为端口的集合
        m_in_vports: array<(string, InValuePort)>,
        m_in_aports: array<(string, InBehaviorPort)>,
        m_out_aports: array<(string, OutBehaviorPort)>,
    };

    interface! INode
    {
        func is_behavior_node(self: INode)=> bool;
        func get_name(self: INode)=> string;
        func get_in_value_ports(self: INode)=> array<(string, InValuePort)>;
        func get_out_value_ports(self: INode)=> array<(string, OutValuePort)>;
        func get_in_behavior_ports(self: INode)=> array<(string, InBehaviorPort)>;
        func get_out_behavior_ports(self: INode)=> array<(string, OutBehaviorPort)>;
    }

    using Graph = struct
    {
        // 图是节点和链接关系的集合
        m_nodes: dict<uid_t, INode>,
    };
}
