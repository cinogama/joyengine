import woo::std;

import je;
import je::gui;

import pkg::fsys;
import pkg::vm;
import pkg::makenew;
import pkg::image;
import pkg::buffer;
import pkg::math;
import pkg::thread;

import builtin::editor::gui::form::ask;
import builtin::editor::gui::form::msg;
import builtin::editor::gui::scripteditor;
import builtin::editor::gui::animation2d;

using je::gui;

namespace editor::gui::particalbaker
{
    using _EditorContext = struct{
        m_last_update_time: mut real,
        m_frame_index: mut int,
        m_enable_bake: mut bool, 
        
        m_target_launch_count: mut int,
        m_solved_launch_count: mut int,

        m_first_show: mut bool,
    };
    public using ParticalContext = struct{
        m_frame_count : mut int,
        m_frame_size : mut (int, int),
        m_frame_rate : mut real,    // Sec per frame
        m_repeat_round : mut int,
        m_frames_caches : mut array<je::graphic::texture>,
        m_script : CodeEditorContext,
        m_path : fsys::path_t,
    }
    {
        public func create(path: fsys::path_t)
        {
            let self = ParticalContext{
                m_frame_count = mut 24,
                m_frame_size = mut (64, 64),
                m_frame_rate = mut 1./24.,
                m_repeat_round = mut 1,
                m_frames_caches = mut [],
                m_script = CodeEditorContext::create(),
                m_path = path,
            };

            self.m_script->SetText(DEFAULT_SOURCE);
            self.m_script->SetLanguageDefinition(WOOLANG_LANGUAGE_DEFINITION);

            return self;
        }
        public func save(self: ParticalContext)
        {
            return fsys::writeall(
                self.m_path,
                {
                    ["framecount"] = self.m_frame_count: dynamic,
                    ["framesize"] = [self.m_frame_size[0], self.m_frame_size[1]]: dynamic,
                    ["framerate"] = self.m_frame_rate: dynamic,
                    ["repeatround"] = self.m_repeat_round: dynamic,
                    ["script"] = self.m_script->GetText: dynamic,
                }: string,
            );
        }
        public func load(path: fsys::path_t)
        {
            return fsys::readall(path)
                =>> \dat = dict::deserialize(dat);
                ->> func(dat)
                    {
                        let fdata = dat->> \k, v = (k as string, v); as dict<string, dynamic>;
                        let self = ParticalContext{
                            m_frame_count = mut fdata["framecount"] as int,
                            m_frame_size = mut (fdata["framesize"] as array<dynamic>[0] as int, fdata["framesize"] as array<dynamic>[1] as int),
                            m_frame_rate = mut fdata["framerate"] as real,
                            m_repeat_round = mut fdata["repeatround"] as int,
                            m_frames_caches = mut [],
                            m_script = CodeEditorContext::create(),
                            m_path = path,
                        };

                        self.m_script->SetText <| fdata["script"] as string;
                        self.m_script->SetLanguageDefinition(WOOLANG_LANGUAGE_DEFINITION);

                        return self;
                    }
                ;
        }
    }

    let PARTICALBAKER = 
@"// Partical baker
// (C)Cinogama project.

import woo::std;
import pkg::math;
import je;

using _EditorContext = struct{
    m_last_update_time: mut real,
    m_frame_index: mut int,
    m_enable_bake: mut bool, 
    
    m_target_launch_count: mut int,
    m_solved_launch_count: mut int,
};

using ParticalContext = struct{
    m_frame_count : mut int,
    m_frame_size : mut (int, int),
    m_frame_rate : mut real,    // Sec per frame
    m_repeat_round : mut int,
    m_frames_caches : mut array<je::graphic::texture>,
    m_script : void, // Not used
    m_path : void, // Not used
};

let mut partical_context = nil->unsafe::cast:<ParticalContext>();
let mut baking_cache = []: array<je::graphic::texture>;
let baking_launch_record = []mut: vec<(int, int)>;

public func u2p(upos: (real, real))=> (real, real)
{
    let (w, h) = partical_context.m_frame_size;
    let (px, py) = upos;
    return (px / 2. * w: real, py / 2. * h: real);
}
public func p2u(upos: (real, real))=> (real, real)
{
    let (w, h) = partical_context.m_frame_size;
    let (ipx, ipy) = upos;
    return (ipx / w: real * 2.0, ipy / h: real * 2.0);
}
public func clamp(v: real)
{
    if (v < 0.) return 0.;
    else if (v > 1.) return 1.;
    return v;
}

func draw(mut frame: int, pos: (real, real), color: (real, real, real, real))
{
    let fcount = partical_context.m_frame_count;
    while (frame < 0)
        frame += fcount;

    let (w, h) = partical_context.m_frame_size;
    let (ipx, ipy) = pos...
        -> \px, py = (px + 1., py + 1.);
        -> u2p...
        -> \px, py = (math::round(px), math::round(py));
        ;

    if (ipx >= 0 && ipx < w && ipy >= 0 && ipy < h)
    {
        let pix = baking_cache[frame % fcount]->pix((ipx, ipy));
        let (or, og, ob, oa) = pix->get_color();
        let (r, g, b, a) = color;
        let cr = clamp(r), cg = clamp(g), cb = clamp(b), ca = clamp(a);

        // Mix
        pix->set_color((
            or * (1. - ca) + cr * ca,
            og * (1. - ca) + cg * ca,
            ob * (1. - ca) + cb * ca,
            oa * (1. - ca) + ca * ca,
        ));
    }
}
public func deltatime()
{
    return partical_context.m_frame_rate;
}
public func pixelsize()
{
    let (w, h) = partical_context.m_frame_size;
    return (1. / w: real, 1./ h: real);
}
public func launch(frame_place: int, partical_count: int)
{
    baking_launch_record->add((frame_place, partical_count));
}
func _launch(frame_place: int, partical_count: int)
{
    for (let mut i = 0; i < partical_count; i += 1)
    {
        let user_data = perparticle(frame_place);
        for (let mut f = 0; f < partical_context.m_frame_count * partical_context.m_repeat_round; f += 1)
        {
            let fid = f + frame_place;
            let poses = position(fid, user_data) as array<(real, real)>;
            let col = color(fid, user_data) as (real, real, real, real);

            // Apply!
            for (let pos : poses)
                draw(fid, pos, col);
        }
    }
}
extern public func _start_baking(context: ParticalContext, econtext: _EditorContext)
{
    partical_context = context;

    for (let mut i = 0; i < partical_context.m_frame_count; i += 1)
    {
        using je::graphic;

        let new_tex_cache = texture::create(partical_context.m_frame_size...);
        baking_cache->unsafe::cast:<vec<texture>>->add(new_tex_cache);
    }
        

    assert(baking_cache->len == partical_context.m_frame_count);

    context.m_frames_caches = baking_cache;
    launcher(partical_context.m_frame_count);
    
    econtext.m_target_launch_count = baking_launch_record->len;
    for (let mut i = 0; i < baking_launch_record->len; i += 1)
    {
        _launch(baking_launch_record[i]...);
        econtext.m_target_launch_count = baking_launch_record->len;
        econtext.m_solved_launch_count = i + 1;

        if (econtext.m_enable_bake)
            break;
    }

    // Make sure ok, force update all texture.
    for (let t : baking_cache)
        t->pix((0, 0))->set_color(t->pix((0, 0))->get_color());
}
"@;
    do vm::create_virtual_script("je/particalbacker.wo", PARTICALBAKER, false);

    let DEFAULT_SOURCE = 
@"// Particalbaker Script

import woo::std;
import pkg::worst;
import je::particalbacker;

using std;

public func launcher(total_frame: int)
{
    for (let mut i = 0; i < total_frame; i += 1)
        launch(i, 1);
}

using PerparticleContext = struct{
    pos: mut (real, real),
    speed: mut (real, real),
    life: mut real,
    maxlife: real
};

public func perparticle(_ /*launch_frame*/: int)
{
    return PerparticleContext{
        pos = mut u2p((0., 0.)),
        speed = mut(rand(-32., 32.), rand(-32., 32.)),
        life = mut 1. + deltatime(),
        maxlife = 1.,
    };
}

public func stamp(x: real, y: real)
{
    return [
        p2u((x + 1.0, y)),
        p2u((x - 1.0, y)),
        p2u((x, y)),
        p2u((x, y + 1.0)),
        p2u((x, y - 1.0)),
    ];
}

public func position(_ /*frame*/: int, context: PerparticleContext)
{
    let (x, y) = context.pos;
    let (sx, sy) = context.speed;

    context.pos = (x + sx * deltatime(), y + sy * deltatime());
    context.life -= deltatime();

    // Make a star shape.
    return stamp(x, y);
}

public func color(_/*frame*/: int, context: PerparticleContext)
{
    return (1., 1., 1., context.life / context.maxlife);
}
"@;
    func _particalbaker_editor(
        partical_context: ParticalContext, 
        econtext: _EditorContext,
        openform: std::mutable<bool>)
    {
        let mut open = true;

        let attrib = econtext.m_first_show
            ? WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
            | 0: WindowsAttribute
            ;

        econtext.m_first_show = false;

        match (BeginAttrOpen(F"粒子动画烘焙器 {partical_context.m_path}", 
            attrib + WindowsAttribute::ImGuiWindowFlags_MenuBar))
        {
        value(show)?
            if (show)
            {
                if (BeginMenuBar())
                {
                    if (BeginMenu("文件"))
                    {
                        if (MenuItem("保存"))
                        {
                            if (!partical_context->save())
                                jeapi::gui::form::errmsg("动画保存失败", F"动画未能保存到{partical_context.m_path}");
                        }
                        if (MenuItem("导出"))
                        {
                            if (partical_context.m_frames_caches->empty)
                                jeapi::gui::form::errmsg("动画导出失败", F"当前没有烘焙结果可供导出，请先执行烘焙操作");

                            let filename = fsys::purename(partical_context.m_path);
                            let outimgpath = fsys::parent(partical_context.m_path) / (filename + ".png");
                            let outanimpath = fsys::parent(partical_context.m_path) / (filename + ".je4animation");
                            jeapi::gui::form::ask("确认导出", F"即将导出并覆盖到{outimgpath->tostring} 和 {outanimpath->tostring}，是否确认导出当前烘焙结果？",
                                func(ok)
                                {
                                    if (ok)
                                    {
                                        let framecount = partical_context.m_frames_caches->len;
                                        let width = math::round(math::sqrt(framecount: real));
                                        let height = width * width >= framecount ? width | width + 1;
                                        let (w, h) = partical_context.m_frame_size;

                                        let animationimg = new! image(w * width, h * height);

                                        for (let mut i = 0; i < framecount; i += 1)
                                        {
                                            let img = partical_context.m_frames_caches[i];

                                            for (let mut x = 0; x < w; x += 1)
                                            {
                                                for (let mut y = 0; y < h; y += 1)
                                                {
                                                    let placex = i % width;
                                                    let placey = height - (i / width + 1);
                                                    let (r, g, b, a) = img->pix((x, y))->get_color();
                                                    animationimg->setpix((x + placex * w, y + placey * h), (r,g,b,a));
                                                }
                                            }
                                        }

                                        assert(animationimg->save(outimgpath->tostring()));

                                        let fanimdat = new! animation2d::AnimationContext(outanimpath);
                                        fanimdat->fast_create_for_partical(width, height, framecount, partical_context.m_frame_rate);
                                        assert(fanimdat->save);
                                    }
                                });
                            
                        }

                        EndMenu();
                    }
                    if (econtext.m_enable_bake)
                    {
                        if (MenuItem("烘焙"))
                        {
                            match (new! vm("je/particalbacker/baker.wo", 
                                partical_context.m_script->GetText: buffer))
                            {
                            ok(vmm)?
                                {
                                    do vmm->jit;
                                    if (!vmm->run()->is_value)
                                        jeapi::gui::form::errmsg("烘焙失败", F"烘焙脚本运行终止，可能存在错误，请检查日志");
                                    
                                    econtext.m_frame_index = 1;

                                    do new! thread(func(){
                                        econtext.m_enable_bake = false;
                                        if (!vmm->invoke("_start_baking", [partical_context: dynamic, econtext: dynamic])->is_value)
                                            jeapi::gui::form::errmsg("烘焙失败", F"烘焙脚本运行终止，可能存在错误，请检查日志");
                                        econtext.m_enable_bake = true;
                                    }, ());
                                }
                            err(msg)?
                                jeapi::gui::form::errmsg("烘焙失败", F"烘焙脚本存在错误\n{msg}");
                            }
                        }
                    }
                    else
                    {
                        func _show_bake_progress(econtext: _EditorContext)
                        {
                            return F"烘焙中({econtext.m_solved_launch_count}/{econtext.m_target_launch_count})";
                        }
                        
                        if (MenuItem(_show_bake_progress(econtext)))
                            econtext.m_enable_bake = true;
                    }
                
                    EndMenuBar();
                }

                BeginGroup();
                do BeginChildSize("##prof", 410., GetContentRegionAvail()[1]);
                    Text("帧数");
                    SameLine();
                    do InputInt("##framecount", partical_context.m_frame_count)
                        ->> \c = c > 0 ? (partical_context.m_frame_count = c) | (nil: void);;

                    Text("尺寸");
                    SameLine();
                    do InputInt2("##framesize", partical_context.m_frame_size...)
                        ->> \s = (x > 0 && y > 0) ? (partical_context.m_frame_size = s) | (nil: void)
                            where (x, y) = s
                            ;;

                    Text("帧速率(秒/帧)");
                    SameLine();
                    do InputFloatFormat("##framerate", partical_context.m_frame_rate, "%.6f")
                        ->> \r = r > 0. ? (partical_context.m_frame_rate = r) | (nil: void);;

                    Text("粒子渲染趟数");
                    SameLine();
                    do InputInt("##repeatcount", partical_context.m_repeat_round)
                        ->> \r = r > 0 ? (partical_context.m_repeat_round = r) | (nil: void);;
                
                    let (w, h) = partical_context.m_frame_size;

                    let frames = partical_context.m_frames_caches;
                    ProgressBar(frames->empty ? 0. | econtext.m_frame_index: real / frames->len: real);
                
                    do BeginChildSize("##review", 395., h: real * 395. / w: real);
                
                    if (std::time() - econtext.m_last_update_time >= partical_context.m_frame_rate)
                    {
                        econtext.m_frame_index += 1;
                        econtext.m_last_update_time = std::time();
                    }

                    econtext.m_frame_index = frames->empty
                        ? 0
                        | econtext.m_frame_index % frames->len;
                
                    let drawlist = GetWindowDrawList();
                    do InvisibleButton("##draw_space", GetContentRegionAvail());

                    let (p0, p1) = GetItemRect();
                    let (lux, luy) = p0;
                    let (rbx, rby) = p1;

                    PushClipRect(p0, p1);
                    drawlist->AddRectFilled(p0, p1, (75, 75, 75, 255));
                    if (!frames->empty)
                        drawlist->AddImage(
                            (lux, luy), 
                            (rbx, rby), 
                            frames[econtext.m_frame_index],
                            (255, 255, 255, 255));

                    PopClipRect();
                    
                    EndChild();
                EndChild();
                EndGroup();
                SameLine();
                BeginGroup();
                
                let (avail_w, avail_h) = GetContentRegionAvail();

                SetWindowFontScale(1.2);
                CodeEditorSize(partical_context.m_script, "##source", (math::max(400., avail_w), avail_h), true);
                SetWindowFontScale(1.0);

                EndGroup();
            }
        none?
            open = false;
        }

        if (! open)
        {
            jeapi::gui::form::ask("是否保存粒子动画", F"是否将粒子配置保存到{partical_context.m_path}",
                func(ok)
                {
                    openform->set(false);
                    if (!ok)
                        return;
                        
                    if (! partical_context->save())
                    {
                        jeapi::gui::form::errmsg("动画保存失败", F"动画未能保存到{partical_context.m_path}");
                        openform->set(true);
                    }
                });
        }
        End();

        return openform->get;
    }
    public func show(
        _: EditorContext, 
        partical_context: ParticalContext)
    {
        launch(_particalbaker_editor, (partical_context, 
            _EditorContext{
                m_last_update_time = mut std::time(),
                m_frame_index = mut 0,
                m_enable_bake = mut true,

                m_target_launch_count = mut 0,
                m_solved_launch_count = mut 0,

                m_first_show = mut true,
            },
            new! std::mutable(true)));
    }
}