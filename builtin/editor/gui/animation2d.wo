import pkg.buffer;
import pkg.try;

namespace editor::gui::animation2d
{
    enum DataValueType
    {
        INT,
        FLOAT,
        VEC2,
        VEC3,
        VEC4,
        QUAT4,
    }
    union DataValue
    {
        INT(int),
        FLOAT(real),
        VEC2((real, real)),
        VEC3((real, real, real)),
        VEC4((real, real, real, real)),
        QUAT4((real, real, real, real)),
    }
    namespace DataValue
    {
        func tostring(self: DataValue)
        {
            match (self)
            {
            INT(i)? return i: string;
            FLOAT(r)? return r: string;
            VEC2((x, y))? return F"({x}, {y})";
            VEC3((x, y, z))? return F"({x}, {y}, {z})";
            VEC4((x, y, z, w))? return F"({x}, {y}, {z}, {w})";
            QUAT4((x, y, z, w))? return F"({x}, {y}, {z}, {w})";
            }
        }
    }

    using FrameComponentData = struct{
        m_component_name: mut string,
        m_member_name: mut string,
        m_value: mut DataValue,
    }
    {
        func tostring(self: FrameComponentData)
        {
            return F"{self.m_component_name}::{self.m_member_name}={self.m_value->tostring}";
        }
    }
    using FrameUniformData = struct{
        m_uniform_name: mut string,
        m_value: mut DataValue,
    }
    {
        func tostring(self: FrameUniformData)
        {
            return F"{self.m_uniform_name}={self.m_value->tostring}";
        }
    }
    using Animation2dFrameData = struct{
        m_component_dats: vec<FrameComponentData>,
        m_uniform_dats: vec<FrameUniformData>,
        m_time: mut real,
    };
    using AnimationActionData = struct{
        m_frames: vec<Animation2dFrameData>,
    };
    union SelectedComponentOrUniformData
    {
        ComponentIndex(int),
        UniformIndex(int),
        None,
    }
    namespace SelectedComponentOrUniformData
    {
        func is_selected_component_idx(self: SelectedComponentOrUniformData, id: int)
        {
            match (self)
            {
            ComponentIndex(idx)? return idx == id;
            _? return false;
            }
        }
        func is_selected_uniform_idx(self: SelectedComponentOrUniformData, id: int)
        {
            match (self)
            {
            UniformIndex(idx)? return idx == id;
            _? return false;
            }
        }
    }

    using AnimationContext = struct{
        m_animations: map<string, AnimationActionData>,
        m_path: filesys::path_t,

        // 下面这些是编辑中状态信息
        m_selected_action_name: mut string,
        m_selected_frame: mut int,
        m_selected_c_or_u_data: mut SelectedComponentOrUniformData,
    }
    {
        public func init(path: filesys::path_t)
        {
            if (filesys::exist(path))
                return false;

            return AnimationContext{
                    m_animations = {}mut, 
                    m_path = path, 
                    m_selected_action_name = mut "",
                    m_selected_frame = mut -1,
                    m_selected_c_or_u_data = mut SelectedComponentOrUniformData::None,
                }->save();
        }
        public func open(path: filesys::path_t)
        {
            try! bufdata = buffer::builder::fromfile(path->tostring, 0, -1);

            let self = AnimationContext{
                m_animations = {}mut,
                m_path = path,
                m_selected_action_name = mut "",
                m_selected_frame = mut -1,
                m_selected_c_or_u_data = mut SelectedComponentOrUniformData::None,
            };

            func read_typed_value(bufdata: buffer::builder)
            {
                let value_type = bufdata->readui8(): DataValueType;
                if (value_type == DataValueType::INT)
                    return DataValue::INT(bufdata->readi32());
                else if (value_type == DataValueType::FLOAT)
                    return DataValue::FLOAT(bufdata->readf32());
                else if (value_type == DataValueType::VEC2)
                {
                    let x = bufdata->readf32();
                    let y = bufdata->readf32();
                    
                    return DataValue::VEC2((x, y));
                }
                else if (value_type == DataValueType::VEC3)
                {
                    let x = bufdata->readf32();
                    let y = bufdata->readf32();
                    let z = bufdata->readf32();

                    return DataValue::VEC3((x, y, z));
                }
                else if (value_type == DataValueType::VEC4)
                {
                    let x = bufdata->readf32();
                    let y = bufdata->readf32();
                    let z = bufdata->readf32();
                    let w = bufdata->readf32();
                    
                    return DataValue::VEC4((x, y, z, w));
                }
                else if (value_type == DataValueType::QUAT4)
                {
                    let x = bufdata->readf32();
                    let y = bufdata->readf32();
                    let z = bufdata->readf32();
                    let w = bufdata->readf32();
                    
                    return DataValue::QUAT4((x, y, z, w));
                }
                std::panic(F"Unknown type: {value_type}");
            }

            // 0. 读取魔数
            if (bufdata->readui32 != 0xA213A710)
                return result::err(0: buffer::builder::errno_t);

            // 1. 读取动作数量
            let animation_count = bufdata->readi64;
            for (let mut i = 0; i < animation_count; i += 1)
            {
                // 2. 读取当前动作的帧数量和名称
                let frame_count = bufdata->readi64;
                let frame_name_len = bufdata->readi64;
                let frame_name = bufdata->readbuffer(frame_name_len) as buffer: string;

                let frames = AnimationActionData{m_frames = []mut};
                self.m_animations->set(frame_name, frames);

                for (let mut j = 0; j < frame_count; j += 1)
                {
                    // 3. 读取一帧的持续时间，以及组件数据和一致变量数据
                    let time = bufdata->readf32();
                    
                    let frame_data = Animation2dFrameData{
                        m_time = mut time,
                        m_component_dats = []mut,
                        m_uniform_dats = []mut,
                    };

                    let component_data_count = bufdata->readi64();
                    for (let mut k = 0; k < component_data_count; k += 1)
                    {
                        // 4. 读取帧组件数据
                        let component_name_len = bufdata->readi64();
                        let component_name = bufdata->readbuffer(component_name_len) as buffer: string;

                        let member_name_len = bufdata->readi64();
                        let member_name = bufdata->readbuffer(component_name_len) as buffer: string;

                        let value = read_typed_value(bufdata);
                        
                        frame_data.m_component_dats->add(FrameComponentData{
                            m_component_name = mut component_name,
                            m_member_name = mut member_name,
                            m_value = mut value,
                        });
                    }

                    let uniform_data_count = bufdata->readi64();
                    for (let mut k = 0; k < component_data_count; k += 1)
                    {
                        // 5. 读取一致变量数据
                        let uniform_name_len = bufdata->readi64();
                        let uniform_name = bufdata->readbuffer(uniform_name_len) as buffer: string;

                        let value = read_typed_value(bufdata);

                        frame_data.m_uniform_dats->add(FrameUniformData{
                            m_uniform_name = mut uniform_name,
                            m_value = mut value,
                        });
                    }

                    frames.m_frames->add(frame_data);
                }
            }
            // OK

            return result::ok(self);
        }
        public func save(self: AnimationContext)
        {
            // 1. 保存动作数量
            let mut result = buffer::createui32(0xA213A710);

            result = result->appendi64(self.m_animations->len);

            for (let action_name, action_data : self.m_animations)
            {
                // 2. 保存当前动作的帧数量和名称
                result = result
                    ->appendi64(action_data.m_frames->len)
                    ->appendi64(action_name->bytelen)
                    + action_name as string : buffer;

                for (let _, frame: action_data.m_frames)
                {
                    // 3. 保存一帧的持续时间，以及组件数据和一致变量数据
                    result = result->appendf32(frame.m_time);

                    result = result->appendi64(frame.m_component_dats->len);
                    for (let _, cdata : frame.m_component_dats)
                    {
                        result = result->appendi64(cdata.m_component_name->bytelen)
                            + cdata.m_component_name as string: buffer;
                        result = result->appendi64(cdata.m_member_name->bytelen)
                            + cdata.m_member_name as string: buffer;
                        
                        match (cdata.m_value)
                        {
                        INT(n)?
                            {
                                result = result->appendui8(DataValueType::INT : int);
                                result = result->appendi32(n);
                            }
                        FLOAT(x)?
                            {
                                result = result->appendui8(DataValueType::FLOAT : int);
                                result = result->appendf32(x);
                            }
                        VEC2((x, y))?
                            {
                                result = result->appendui8(DataValueType::VEC2 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                            }
                        VEC3((x, y, z))?
                            {
                                result = result->appendui8(DataValueType::VEC3 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                                result = result->appendf32(z);
                            }
                        VEC4((x, y, z, w))?
                            {
                                result = result->appendui8(DataValueType::VEC4 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                                result = result->appendf32(z);
                                result = result->appendf32(w);
                            }
                        QUAT4((x, y, z, w))?
                            {
                                result = result->appendui8(DataValueType::QUAT4 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                                result = result->appendf32(z);
                                result = result->appendf32(w);
                            }
                        }
                    }

                    result = result->appendi64(frame.m_uniform_dats->len);
                    for (let _, udata : frame.m_uniform_dats)
                    {
                        result = result->appendi64(udata.m_uniform_name->bytelen)
                            + udata.m_uniform_name as string: buffer;

                        match (udata.m_value)
                        {
                        INT(n)?
                            {
                                result = result->appendui8(DataValueType::INT : int);
                                result = result->appendi32(n);
                            }
                        FLOAT(x)?
                            {
                                result = result->appendui8(DataValueType::FLOAT : int);
                                result = result->appendf32(x);
                            }
                        VEC2((x, y))?
                            {
                                result = result->appendui8(DataValueType::VEC2 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                            }
                        VEC3((x, y, z))?
                            {
                                result = result->appendui8(DataValueType::VEC3 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                                result = result->appendf32(z);
                            }
                        VEC4((x, y, z, w))?
                            {
                                result = result->appendui8(DataValueType::VEC4 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                                result = result->appendf32(z);
                                result = result->appendf32(w);
                            }
                        QUAT4((x, y, z, w))?
                            {
                                result = result->appendui8(DataValueType::QUAT4 : int);
                                result = result->appendf32(x);
                                result = result->appendf32(y);
                                result = result->appendf32(z);
                                result = result->appendf32(w);
                            }
                        }
                    }
                }

            }
            // save 函数结束
            return filesys::writeall(self.m_path, result as buffer: string);
        }
    }
    func _animation_edit_form(context: EditorContext, animation_context: AnimationContext)
    {
        using je::gui;

        let mut open = BeginAttrOpen(F"2D帧动画编辑器 {animation_context.m_path}", 
            WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
            + WindowsAttribute::ImGuiWindowFlags_MenuBar);

        if (BeginMenuBar())
        {
            if (BeginMenu("编辑"))
            {
                if (MenuItem("新建动画"))
                {
                    jeapi::gui::form::input("新建动画", "请输入动画名称", "NewAction", 
                        func(name)
                        {
                            if (animation_context.m_animations->contain(name))
                                jeapi::gui::form::errmsg("无法创建动画", F"名为{name}的动画已经存在");
                            if (name == "")
                                jeapi::gui::form::errmsg("无法创建动画", "动画名不能为空");

                            animation_context.m_animations->set(name, AnimationActionData{m_frames = []mut});
                        });
                }
                Separator();
                if (MenuItem("保存"))
                {
                    if (animation_context->save())
                        jeapi::gui::form::msg("保存动画成功", F"动画已经保存到{animation_context.m_path}");
                    else
                        jeapi::gui::form::msg("保存动画失败", F"发生了一些错误，动画未能成功保存");
                }
                EndMenu();
            }
            EndMenuBar();
        }

        BeginGroup();
        Text("动画");
        if (BeginListBox("##action_list", 200., 600.))
        {
            for (let action_name, action_data : animation_context.m_animations)
            {
                if (SelectableSelected(action_name, 
                    animation_context.m_selected_action_name == action_name))
                    animation_context.m_selected_action_name = action_name;

                if (BeginPopupContextItem())
                {
                    if (MenuItem("新建帧"))
                    {
                        animation_context.m_selected_action_name = action_name;
                        action_data.m_frames->add(Animation2dFrameData{
                            m_time = mut 0.1,
                            m_component_dats = []mut,
                            m_uniform_dats = []mut,
                        });
                    }
                    if (MenuItem("重命名"))
                    {
                        jeapi::gui::form::input("重命名动画", "请输入动画的新名称", action_name, 
                            func(newname)
                            {
                                if (newname != action_name)
                                {
                                    if (animation_context.m_animations->contain(newname))
                                        jeapi::gui::form::errmsg("无法创建动画", F"名为{newname}的动画已经存在");
                                    if (newname == "")
                                        jeapi::gui::form::errmsg("无法创建动画", "动画名不能为空");

                                    assert(animation_context.m_animations->remove(action_name));
                                    animation_context.m_animations->set(newname, action_data);
                                }
                            });
                    }
                    if (MenuItem("删除"))
                    {
                        jeapi::gui::form::ask("是否删除动画", F"确认要删除动画{action_name}吗？", 
                            func(ok)
                            {
                                if (ok)
                                    do animation_context.m_animations->remove(action_name);
                            });
                    }
                    EndPopup();
                }
            }
            EndListBox();
        }
        EndGroup();
        SameLine();

        BeginGroup();
        Text("帧");

        let selected_animation = animation_context.m_animations->get(animation_context.m_selected_action_name);

        if (BeginListBox("##frame_list", 50., 600.))
        {
            match (selected_animation)
            {
            value(animation)?
                {
                    for (let i, frame_data : animation.m_frames)
                    {
                        if (SelectableSelected(i: string, animation_context.m_selected_frame == i))
                            animation_context.m_selected_frame = i;

                        if (BeginPopupContextItem())
                        {
                            if (MenuItem("新建组件数据"))
                            {
                                let all_components = je::typeinfo::editor::get_all_components_types()
                                    -> forall(\t = ! t->name()->beginwith("Editor::");)
                                    -> std::sort(\at, bt = at->name() < bt->name();)
                                    ;

                                let selecting_id = mutable::create(0);
                                let selecting_member_id = mutable::create(0);
                                let editing_value = mutable::create(DataValue::INT(0));
                                let editing_value_type = mutable::create(je::typeinfo::int);

                                launch(func(){
                                    let mut open = BeginAttrOpen(F"添加组件数据 {animation_context.m_path}##{JobID()}", 
                                        WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize);

                                    do Combo("组件", all_components->>\t = t->name();, selecting_id->get)
                                        ->> \nid = do selecting_id->set(nid);
                                        ;

                                    let members = all_components->get(selecting_id->get)
                                        ->> \t = t->members;
                                        ->  valor([]);

                                    SameLine();

                                    do Combo("成员", members->>\nametype = nametype[1]->name + " " + nametype[0];, selecting_member_id->get)
                                        ->> \ nid = do selecting_member_id->set(nid);
                                        ;

                                    match (members->get(selecting_member_id->get))
                                    {
                                    value((member_name, member_type))?
                                        if (member_type != je::typeinfo::int &&
                                            member_type != je::typeinfo::float &&
                                            member_type != je::typeinfo::float2 &&
                                            member_type != je::typeinfo::float3 &&
                                            member_type != je::typeinfo::float4 &&
                                            member_type != je::typeinfo::quat)
                                            TextDisabled(F"不能作为动画控制值，需要为int、float、vec2、vec3、vec4或quat，但是这里是{member_type->name}");
                                        else 
                                        {
                                            if (editing_value_type->get != member_type)
                                            {
                                                do editing_value_type->set(member_type);

                                                if (member_type == je::typeinfo::int)
                                                    editing_value->set(DataValue::INT(0));
                                                else if (member_type == je::typeinfo::float)
                                                    editing_value->set(DataValue::FLOAT(0.));
                                                else if (member_type == je::typeinfo::float2)
                                                    editing_value->set(DataValue::VEC2((0., 0.)));
                                                else if (member_type == je::typeinfo::float3)
                                                    editing_value->set(DataValue::VEC3((0., 0., 0.)));
                                                else if (member_type == je::typeinfo::float4)
                                                    editing_value->set(DataValue::VEC4((0., 0., 0., 0.)));
                                                else if (member_type == je::typeinfo::quat)
                                                    editing_value->set(DataValue::QUAT4((0., 0., 0., 0.)));
                                            }

                                            match (editing_value->get)
                                            {
                                            INT(n)?
                                                do InputInt("值", n)->>\nv = do editing_value->set(INT(nv));;
                                            FLOAT(x)?
                                                do InputFloat("值", x)->>\nv = do editing_value->set(FLOAT(nv));;
                                            VEC2((x, y))?
                                                do InputFloat2("值", x, y)->>\nv = do editing_value->set(VEC2(nv));;
                                            VEC3((x, y, z))?
                                                do InputFloat3("值", x, y, z)->>\nv = do editing_value->set(VEC3(nv));;
                                            VEC4((x, y, z, w))?
                                                do InputFloat4("值", x, y, z, w)->>\nv = do editing_value->set(VEC4(nv));;
                                            QUAT4((x, y, z, w))?
                                                do InputFloat4("值", x, y, z, w)->>\nv = do editing_value->set(QUAT4(nv));;
                                            }

                                            if (Button("创建"))
                                            {
                                                frame_data.m_component_dats->add(FrameComponentData{
                                                    m_component_name = mut all_components[selecting_id->get]->name(),
                                                    m_member_name = mut member_name,
                                                    m_value = mut editing_value->get,
                                                });

                                                open = false;
                                            }
                                        }
                                    none?
                                        TextDisabled("请选择组件和成员名");
                                    }

                                    End();
                                    return open;
                                }, ());
                            }
                            if (MenuItem("新建着色器变量数据"))
                            {
                                 
                            }
                            Separator();
                            if (MenuItem("删除帧"))
                            {
                                jeapi::gui::form::ask("是否删除帧", F"确认要删除帧{i}吗？", 
                                    func(ok)
                                    {
                                        if (ok)
                                            do animation.m_frames->remove(i);
                                    });
                            }
                            EndPopup();
                        }
                    }
                }
            none?;
            }
            EndListBox();
        }
        EndGroup();
        SameLine();

        let selected_frame = selected_animation=>>\a = a.m_frames->get(animation_context.m_selected_frame);;
        BeginGroup();
            Text("帧时间");
            SameLine();
            do InputFloat("##frame_time", selected_frame->>\f = f.m_time;->valor(0.))
                ->> \nv = selected_frame
                    ->> \f = f.m_time = nv;
                    ;
                ;

            BeginGroup();
                Text("组件数据");
                if (BeginListBox("##component_data", 400., 400.))
                {
                    match (selected_frame)
                    {
                    value(f)?
                        for (let cindex, cdata: f.m_component_dats)
                        {
                            if (SelectableSelected(cdata->tostring(), 
                                animation_context.m_selected_c_or_u_data->is_selected_component_idx(cindex)))
                                animation_context.m_selected_c_or_u_data = SelectedComponentOrUniformData::ComponentIndex(cindex);
                            if (BeginPopupContextItem())
                            {
                                if (MenuItem("删除"))
                                {
                                    jeapi::gui::form::ask("是否删除组件数据", F"确认要删除{cdata->tostring}吗？", 
                                    func(ok)
                                    {
                                        if (ok)
                                            do f.m_component_dats->remove(cindex);
                                    });
                                }
                                EndPopup();
                            }
                        }
                    none?;
                    }
                    EndListBox();
                }

            EndGroup();
            SameLine();
            BeginGroup();
                Text("着色器变量");
                if (BeginListBox("##uniform_data", 400., 400.))
                {
                    match (selected_frame)
                    {
                    value(f)?
                        for (let uindex, udata: f.m_uniform_dats)
                        {
                            if (SelectableSelected(udata->tostring(), 
                                animation_context.m_selected_c_or_u_data->is_selected_component_idx(uindex)))
                                animation_context.m_selected_c_or_u_data = SelectedComponentOrUniformData::ComponentIndex(uindex);
                            if (BeginPopupContextItem())
                            {
                                if (MenuItem("删除"))
                                {
                                    jeapi::gui::form::ask("是否删除着色器变量数据", F"确认要删除{udata->tostring}吗？", 
                                    func(ok)
                                    {
                                        if (ok)
                                            do f.m_uniform_dats->remove(uindex);
                                    });
                                }
                                EndPopup();
                            }
                        }
                    none?;
                    }
                    EndListBox();
                }
            EndGroup();

        EndGroup();

        End();

        return open;
    }
    public func show(context: EditorContext, animation_context: AnimationContext)
    {
        je::gui::launch(_animation_edit_form, (context, animation_context));
    }
}