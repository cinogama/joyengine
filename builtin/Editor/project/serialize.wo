// 序列化，提供对实体/世界的序列化
// 实体不保存所有Editor组件，有额外的字段保存实体的Editor::Name
// 世界不保存Invisable的实体，不保存Editor系统和Graphic系统，此系统由编辑器负责重新创建和附加

import woo.std;
import je;
import config;

using je;

namespace editor::Serialize
{
	public func save_entity(saving_entity: entity)
	{	
		return
        // TODO: 实体使用的shader和纹理路径亦需要额外做一下保存
            saving_entity
                ->editor::get_components_types()
                ->forall(\t: typeinfo = !t->name->beginwith("Editor::");)
                ->collect(\t: typeinfo = component->has ? [(t, component->val)] | []
                    where
                        component = saving_entity->editor::get_component(t);)
                ->trans(\tc: (typeinfo, component) = (t->name, collect_members())
                    where 
                        collect_members = func(){
                            let result = {}mut: map<string, mut string>; 
                            for (let name, type, addr : c->editor::iter_member())
                                result[name] = addr->to_string(type);
                            return result->todict;
                        },
                        (t, c) = tc;)
                ->mapping
                ->\m : dict<string, dict<string, mut string>> = m->empty? option::none | option::value(m);
                ->map(\m: dict<string, dict<string, mut string>> = 
                    {
                        ["name"] = saving_entity->editor::name: dynamic, 
                        ["components"] = m: dynamic
                    };);
	}
    public func restore_entity(world: je::world, entity_dat: map)
    {      
        let component_types_dat = entity_dat
                ->get("components": dynamic)
                ->map(\cs: dynamic = cs as map
                    ->unmapping
                    ->trans(\kv:(dynamic, dynamic) = (kv[0] as string, kv[1] as map);)
                    ->trans(\td:(string, map) = (je::typeinfo(td[0]), td[1]
                            ->unmapping
                            ->trans(\p:(dynamic, dynamic) = (p[0] as string, p[1] as string);)
                            ->mapping);)
                    ->forall(\td:(option<je::typeinfo>, dict<string, string>) = td[0]->has;)
                    ->trans(\td:(option<je::typeinfo>, dict<string, string>) = (td[0]->val, td[1]);)
                    ;)
                ->valor([]) as array<(je::typeinfo, dict<string, string>)>;

        if (component_types_dat->empty)
            return option::none;

        let entity = world->add_entity(component_types_dat->trans(\tp: (je::typeinfo,anything) = tp[0];));
        
        // 如果数据里面有name字段，那就设置一下实体名字
        entity_dat
            ->get("name": dynamic)
            ->map(\n:dynamic = entity->editor::name(n as string););

        // 开始应用数据
        component_types_dat
            ->trans(\cdata: (je::typeinfo, dict<string, string>) = 
                comp
                    ->map(\comp: je::component = 
                        comp->editor::members
                            ->unmapping
                            ->trans(\pair: (string,(je::typeinfo, je::native_value)) = 
                                dat->get(mname)
                                    ->map(\mdat: string = mvalue->parse(mtype, mdat);)
                                where (mname,(mtype, mvalue)) = pair;)
                    ;)
                where comp = entity->editor::get_component(type)
                    , (type, dat) = cdata;);

        return option::value(entity);
    }

    public func save_project_world(world: Project::World)
    {
        static let INVISABLE = je::typeinfo("Editor::Invisable")->val;

        alias entity_info_t = dict<string, dynamic>;

        let w = world.instance;

        let entities_json_list = 
            w->editor::get_all_entities
                // 跳过编辑器上的不可见实体
                ->forall(\e: entity = !e->editor::get_component(INVISABLE)->has;)
                ->trans(\e: entity = save_entity(e);)
                ->collect(\oe: option<entity_info_t> = oe->has ? [oe->val] | [];);

        let editing_systems_type_list = 
            w->editor::get_systems_types
                ->trans(\st: typeinfo = st->name;)
                ->forall(\n: string = !n->beginwith("Graphic::") && !n->beginwith("Editor::"););

        let runtime_systems_type_list = 
            world.runtime_systems
                ->trans(\st: typeinfo = st->name;)
                ->forall(\n: string = !n->beginwith("Graphic::") && !n->beginwith("Editor::"););
 
        return {
            ["name"] = w->editor::name: dynamic,
            // 不是所有world都有path值，如果没有说明这个world不是从文件中载入的，塞一个nil进去意思一下
            ["path"] = world.path->has ? world.path->val: dynamic | nil: dynamic,
            ["entities"] = entities_json_list: dynamic,
            ["edit_systems"] = editing_systems_type_list: dynamic,
            ["runtime_systems"] = runtime_systems_type_list: dynamic,
        };
    }
    public func restore_world(project: Project, dat: dict)
    {
        match (dat->get("name": dynamic))
        {
        value(name)?
        {
            let world = project->CreateWorld();
            world.instance->editor::name(name as string);
            world.path = dat
                ->get("path": dynamic)
                ->bind(\s:dynamic = s is string 
                    ? option::value(s as string) 
                    | option::none;);
            world.runtime_systems->copy(
                dat->get("runtime_systems": dynamic)
                    ->map(\d: dynamic = d as array<dynamic>;)
                    ->map(\rtsyss: array<dynamic> = rtsyss
                        ->trans(\tname: dynamic = je::typeinfo(tname as string);)
                        ->forall(\t: option<je::typeinfo> = t->has;)  // TODO: 类型没找到弹个框
                        ->trans(\t: option<je::typeinfo> = t->val;);)
                    ->valor([]));
            dat->get("edit_systems": dynamic)
                ->map(\d: dynamic = (d as array<dynamic>)
                    ->trans(\tname: dynamic = je::typeinfo(tname as string);)
                    ->forall(\t: option<je::typeinfo> = t->has;)
                    ->trans(\t: option<je::typeinfo> = world.instance->add_system(t->val);););

            dat->get("entities": dynamic)
                ->map(\es: dynamic = es as array<dynamic>
                    ->trans(\edat: dynamic = edat as map;)
                    ->trans(\edat: map = Serialize::restore_entity(world.instance, edat);););

            return value(world);
        }
        none?
            return none;
        }
    }
}