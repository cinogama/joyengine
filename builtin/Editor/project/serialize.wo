// 序列化，提供对实体/世界的序列化
// 实体不保存所有Editor组件，有额外的字段保存实体的Editor::Name
// 世界不保存Invisable的实体，不保存Editor系统和Graphic系统，此系统由编辑器负责重新创建和附加

import woo.std;
import je;
import config;

using je;

namespace editor::Serialize
{
    alias texture_inform = string;
    func get_entity_texture_passes(saving_entity: entity)=> dict<int, option<texture_inform>>
    {
        // 获取实体绑定的通道和纹理信息
        return saving_entity
            ->editor::graphic::get_textures
            ->map(\pass: int, tex: graphic::texture = (pass, tex->path););
    }

    alias shader_inform = dict<string, array<dynamic>>;
    //                          uniform_name uniform_vals
    func get_entity_shaders_informs(saving_entity: entity)=> array<array/*(string, shader_inform)*/>
    {
        // 获取实体绑定的shader和uniform信息, uniform 信息仅包括int/float/float2，3，4类型的信息
        // {[shader_path] = shader_inform}
        return saving_entity
            ->editor::graphic::get_shaders
            ->map(\shad: graphic::shader = [shad->path: dynamic, shad_uniforms_dats(): dynamic]
                where shad_uniforms_dats = func(){
                    let result = {}mut: map<string, array<dynamic>>;
                    for(let name, uniform_val : shad->get_uniforms())
                    {
                        if (name->beginwith("JOYENGINE_"))
                            continue; // 引擎的内置shader-uniform变量，跳过
                        match (uniform_val)
                        {
                            integer(n)? 
                                result->set(name, [n: dynamic]);
                            float(x)?
                                result->set(name, [x: dynamic]);
                            float2((x, y))?
                                result->set(name, [x: dynamic, y: dynamic]);
                            float3((x, y, z))?
                                result->set(name, [x: dynamic, y: dynamic, z: dynamic]);
                            float4((x, y, z, w))?
                                result->set(name, [x: dynamic, y: dynamic, z: dynamic, w: dynamic]);
                            texture(id)? /* do nothing */;
                            others? /* do nothing */;
                        }
                    }
                    return result->todict;
                };);
    }

	public func save_entity(saving_entity: entity)
	{	
		return
        // TODO: 实体使用的shader和纹理路径亦需要额外做一下保存
            saving_entity
                ->editor::get_components_types()
                ->forall(\t: typeinfo = !t->name->beginwith("Editor::");)
                ->bind(\t: typeinfo = component->has ? [(t, component->val)] | []
                    where
                        component = saving_entity->editor::get_component(t);)
                ->map(\tc: (typeinfo, component) = (t->name, collect_members())
                    where 
                        collect_members = func(){
                            let result = {}mut: map<string, mut string>; 
                            for (let name, (type, addr) : c->editor::members())
                                result[name] = addr->to_string(type);
                            return result->todict;
                        },
                        (t, c) = tc;)
                ->mapping
                ->\m : dict<string, dict<string, mut string>> = m->empty? option::none | option::value(m);
                ->map(\m: dict<string, dict<string, mut string>> = 
                    {
                        ["name"] = saving_entity->editor::name: dynamic, 
                        ["components"] = m: dynamic,
                        // 如果纹理是内置的，也就是说这个纹理实际上没有路径，那么跳过它
                        ["textures"] = saving_entity->get_entity_texture_passes
                            =>> \k, v = v->has ? {[k] = v->val} | {}; : dynamic,
                        ["shaders"] = saving_entity->get_entity_shaders_informs: dynamic,
                    };);
	}

    // 用于设置实体中shader的uniform参数，如果shader是挂掉的，那么设置uniform到BadShadersUniform里等待更新
    func restore_shader_of_entity(e: je::entity, shad: je::graphic::shader, uname: string, val: array)
    {
        assert(val->len > 0);
        if (val[0] is int)
        {
            assert(val->len == 1);
            shad->isvalid
                ? shad->set_uniform(uname, val[0] as int)
                | e->editor::store_uniform_dat_for_bad_shader_update(shad, uname, val[0] as int);
        }
        else if (val[0] is real)
        {
            if (val->len == 1)
                 shad->isvalid
                    ? shad->set_uniform(uname, val[0] as real)
                    | e->editor::store_uniform_dat_for_bad_shader_update(shad, uname,  val[0] as real);
            else if (val->len == 2)
                shad->isvalid
                    ? shad->set_uniform(uname, (val[0] as real, val[1] as real))
                    | e->editor::store_uniform_dat_for_bad_shader_update(shad, uname, (val[0] as real, val[1] as real));
            else if (val->len == 3)
                shad->isvalid
                    ? shad->set_uniform(uname, (val[0] as real, val[1] as real, val[2] as real))
                    | e->editor::store_uniform_dat_for_bad_shader_update(shad, uname, (val[0] as real, val[1] as real, val[2] as real));
            else if (val->len == 4)
                shad->isvalid
                    ? shad->set_uniform(uname, (val[0] as real, val[1] as real, val[2] as real, val[3] as real))
                    | e->editor::store_uniform_dat_for_bad_shader_update(shad, uname, (val[0] as real, val[1] as real, val[2] as real, val[3] as real));
            else
                std::panic("invalid uniform value length when restore.");
        }
        else
            std::panic("invalid uniform type when restore.");
    }
    func _typeinfo_or_warning(typename: string)
    {
        let tinfo = je::typeinfo::load_from_name(typename);
        if (!tinfo->has)
        {
            je::logerr(F"无法找到{typename}，请检查是否有模块未加载成功");
            generic::msgbox("找不到类型", F"无法找到{typename}，请检查是否有模块未加载成功");
        }
        return tinfo;
    }
    public func restore_entity(world: je::world, entity_dat: dict)
    {      
        let component_types_dat = entity_dat
                ->get("components": dynamic)
                ->map(\cs: dynamic = cs as dict
                    ->unmapping
                    ->map(\kv:(dynamic, dynamic) = (kv[0] as string, kv[1] as dict);)
                    ->map(\td:(string, dict) = (_typeinfo_or_warning(td[0]), td[1]
                            ->unmapping
                            ->map(\p:(dynamic, dynamic) = (p[0] as string, p[1] as string);)
                            ->mapping);)
                    ->forall(\td:(option<je::typeinfo>, dict<string, string>) = td[0]->has;)
                    ->map(\td:(option<je::typeinfo>, dict<string, string>) = (td[0]->val, td[1]);)
                    ;)
                ->valor([]) as array<(je::typeinfo, dict<string, string>)>;

        if (component_types_dat->empty)
            return option::none;

         // 开始加载shader
        let shaders_and_dat = entity_dat->get("shaders": dynamic)
            ->map(func(shaders: dynamic)
                {
                    let shads = []mut: vec<(graphic::shader, dict)>;
                    for (let _, shader_path_dat_pair : shaders: array)
                    {
                        let s = graphic::shader::load(shader_path_dat_pair: array[0] as string);
                        shads->add((s, shader_path_dat_pair: array[1] as dict));
                    }
                    return shads->toarray;
                });

        // 检查加载的shader是否有非法的，如果有，那么实体要带上一个BadShadersUniform组件
        let entity_has_bad_shader = shaders_and_dat
            ->bind(\sds: array<(graphic::shader, dict)> = sds
                ->map(\sd: (graphic::shader, dict) = !sd[0]->isvalid;)
                ->reduce(\l: bool, r: bool = l?l|r;);)
            ->valor(false);

        let entity = world->add_entity(
            component_types_dat
                ->map(\tp: (je::typeinfo,anything) = tp[0];)
                ->connect(entity_has_bad_shader ? [je::typeinfo::load_from_name("Editor::BadShadersUniform")->val] | []));
        
        // 开始应用数据
        component_types_dat
            ->map(\cdata: (je::typeinfo, dict<string, string>) = 
                comp
                    ->map(\comp: je::component = 
                        comp->editor::members
                            ->unmapping
                            ->map(\pair: (string,(je::typeinfo, je::native_value)) = 
                                dat->get(mname)
                                    ->map(\mdat: string = mvalue->parse(mtype, mdat);)
                                where (mname,(mtype, mvalue)) = pair;)
                    ;)
                where comp = entity->editor::get_component(type)
                    , (type, dat) = cdata;);

        // 考虑一下异步加载？
        // 开始加载shader
        entity->editor::graphic::set_shaders(
            shaders_and_dat
                ->valor([])
                ->map(func(sd: (graphic::shader, dict))
                    {
                        let s = sd[0];
                        for (let uname, uval : sd[1])
                            restore_shader_of_entity(entity, s, uname as string, uval as array);
                        return s;
                    })
            );

        // 开始加载texture
        entity_dat->get("textures": dynamic)
            ->map(func(textures: dynamic)
                {
                    for (let passid, path : textures: dict)
                        graphic::texture::load(path as string)
                            ->> \tex = entity->editor::graphic::bind_texture(passid as int, tex);
                            ;
                });

        // 如果数据里面有name字段，那就设置一下实体名字
        // 这种蛋疼操作只能最后做，因为在加载世界时，实体变更组件的同步可能会立即生效
        // （因为当前世界还在update，其他世界可能在fflush），所以只能放这里
        entity_dat
            ->get("name": dynamic)
            ->map(\n:dynamic = entity->editor::set_name(n as string););

        return option::value(entity);
    }

    public func save_project_world(world: Project::World)
    {
        static let INVISABLE = je::typeinfo::load_from_name("Editor::Invisable")->val;

        alias entity_info_t = dict<string, dynamic>;

        let w = world.instance;

        let entities_json_list = 
            w->editor::get_all_entities
                // 跳过编辑器上的不可见实体
                ->forall(\e: entity = !e->editor::get_component(INVISABLE)->has;)
                ->map(\e: entity = save_entity(e);)
                ->bind(\oe: option<entity_info_t> = oe->has ? [oe->val] | [];);

        let editing_systems_type_list = 
            w->editor::get_systems_types
                ->map(\st: typeinfo = st->name;)
                ->forall(\n: string = !n->beginwith("Graphic::") && !n->beginwith("Editor::"););

        let runtime_systems_type_list = 
            world.runtime_systems
                ->map(\st: typeinfo = st->name;)
                ->forall(\n: string = !n->beginwith("Graphic::") && !n->beginwith("Editor::"););
 
        return {
            ["name"] = w->editor::name: dynamic,
            // 不是所有world都有path值，如果没有说明这个world不是从文件中载入的，塞一个nil进去意思一下
            ["path"] = world.path->has ? world.path->val: dynamic | nil: dynamic,
            ["entities"] = entities_json_list: dynamic,
            ["edit_systems"] = editing_systems_type_list: dynamic,
            ["runtime_systems"] = runtime_systems_type_list: dynamic,
        };
    }
    public func restore_world(project: Project, dat: dict)
    {
        match (dat->get("name": dynamic))
        {
        value(name)?
        {
            let world = project->CreateWorld();
            world.instance->editor::set_name(name as string);
            world.path = dat
                ->get("path": dynamic)
                ->bind(\s:dynamic = s is string 
                    ? option::value(s as string) 
                    | option::none;);
            world.runtime_systems->copy(
                dat->get("runtime_systems": dynamic)
                    ->map(\d: dynamic = d as array<dynamic>;)
                    ->map(\rtsyss: array<dynamic> = rtsyss
                        ->map(\tname: dynamic = _typeinfo_or_warning(tname as string);)
                        ->forall(\t: option<je::typeinfo> = t->has;)  // TODO: 类型没找到弹个框
                        ->map(\t: option<je::typeinfo> = t->val;);)
                    ->valor([]));
            dat->get("edit_systems": dynamic)
                ->map(\d: dynamic = (d as array<dynamic>)
                    ->map(\tname: dynamic = _typeinfo_or_warning(tname as string);)
                    ->forall(\t: option<je::typeinfo> = t->has;)
                    ->map(\t: option<je::typeinfo> = world.instance->add_system(t->val);););

            dat->get("entities": dynamic)
                ->map(\es: dynamic = es as array<dynamic>
                    ->map(\edat: dynamic = edat as dict;)
                    ->map(\edat: dict = Serialize::restore_entity(world.instance, edat);););

            return value(world);
        }
        none?
            return none;
        }
    }
}