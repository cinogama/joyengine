import woo.std;
import je;

namespace editor
{
    using Project = struct {
        config : Project::Config,
        worlds : array<Project::World>,
    };
}

namespace editor::Project
{
    // 用于储存项目中的世界信息，包括世界所在的路径和运行时系统信息
    using World = struct {
        name : option<string>, // 世界名称，保存项目/加载项目才有，新建世界没有这个值
        path : option<string>,    // 已经保存的世界会有路径，在关闭世界时，如果一个世界没有路径，那么这个世界会从项目里移除
        instance : option<je::world>, // 世界实例，只有正在编辑器里的世界会有这个值
        runtime_systems : array<je::typeinfo>, // 运行时系统列表，世界载入作为游戏运行时就会把里面的系统实例化出来
    };

    namespace World
    {
        func get_instance(self: World)
        {
            match(self.instance)
            {
                value(ins)? return ins;
                none? std::panic("Not impl now!"); // TODO: 当前World还没有实例，从path对应的文件加载出来
            }
        }
    }

    // 用于储存项目的配置信息
    using Config = struct {
        name : string,                    // 项目的名称
        graphic_system : je::typeinfo,    // 默认使用的图形系统类型
        editor_system  : je::typeinfo,    // 默认使用的编辑器系统类型
    };

    // 在当前项目中创建一个世界，世界会被保存进项目的世界列表中
    func CreateWorld(self: Project)
    {
        let world_instance = je::universe::current()->create_world();

        // 创建调试摄像机组
        // 父对象，负责带着摄像机运动，同时负责y轴旋转
        let camera_walker = world_instance->add_entity([
            // Transform 族组件
            je::typeinfo("Transform::LocalPosition")->val(),
            je::typeinfo("Transform::LocalRotation")->val(),
            je::typeinfo("Transform::LocalToWorld")->val(),
            je::typeinfo("Transform::Translation")->val(),
            je::typeinfo("Transform::ChildAnchor")->val(),
            // Editor 族组件
            je::typeinfo("Editor::Invisable")->val(),
            je::typeinfo("Editor::EditorWalker")->val(),
        ]);
        // 摄像机，同时负责x轴旋转
        let editor_camera = world_instance->add_entity([
            // Transform 族组件
            je::typeinfo("Transform::LocalPosition")->val(),
            je::typeinfo("Transform::LocalRotation")->val(),
            je::typeinfo("Transform::LocalToParent")->val(),
            je::typeinfo("Transform::Translation")->val(),
            // Editor 族组件
            je::typeinfo("Editor::Invisable")->val(),
            je::typeinfo("Editor::EditorWalker")->val(),
            // Camera 族组件
            je::typeinfo("Camera::PerspectiveProjection")->val(),
            je::typeinfo("Camera::Projection")->val(),
        ]);
        editor_camera->editor::set_parent(camera_walker);
        camera_walker->editor::name("调试摄像机组");
        editor_camera->editor::name("调试摄像机");

        // 移动器，这里只创建根实体，具体的轴由编辑器系统生成
        let entity_mover = world_instance->add_entity([
            // Transform 族组件
            je::typeinfo("Transform::LocalPosition")->val(),
            je::typeinfo("Transform::LocalRotation")->val(),
            je::typeinfo("Transform::ChildAnchor")->val(),
            je::typeinfo("Transform::Translation")->val(),
            je::typeinfo("Transform::LocalToWorld")->val(),
            // Editor 族组件
            je::typeinfo("Editor::Invisable")->val(),
            je::typeinfo("Editor::EntityMoverRoot")->val(),
        ]);

        let world = World{
            name = option::none,
            path = option::none,
            instance = option::value(world_instance),
            runtime_system = [],
        };

        self.worlds->add(world);
        return world;
    }

    func FindWorld(self: Project, world: je::world)=> option<World>
    {
        for (let project_world : self.worlds)
            match(project_world.instance)
            {
                value(w)?
                    if (w == world)
                        return option::value(project_world);
                none?;
            }
        je::logwarn("发现一个未被列入项目中的游离世界：", world->editor::name());
        return option::none;
    }

    private let mut _current_project = option::none : option<Project>;

    func SetCurrentProject(self: Project)
    {
        _current_project = option::value(self);
        return self;
    }

    func CreateDefaultProject()
    {
        return SetCurrentProject(Project{
            config = Config {
                name = "Empty project",
                // NOTE: 默认系统应该内置在引擎里，如果获取不到这里直接爆炸
                graphic_system = je::typeinfo("Graphic::DefaultGraphicPipelineSystem")->val(),
                editor_system = je::typeinfo("Editor::DefaultEditorSystem")->val(),
            },
            worlds = [],
        });
    }

    func GetCurrentProject()=> Project
    {
        match(_current_project)
        {
            value(proj)?
                return proj;
            none?
            {
                je::logwarn("没有正在编辑中的项目，将创建默认的项目上下文");
                return CreateDefaultProject();
            }
        }
    }
}