import woo.std;
import je;
import je.gui;

import serialize;

namespace editor
{
    public using Project = struct {
        name : string,          // 项目名称
        path : option<string>,  // 项目文件的路径，默认项目没有这个值
        worlds : vec<Project::World>,

        mut graphic_system : je::typeinfo,    // 默认使用的图形系统类型
        mut editor_system  : je::typeinfo,    // 默认使用的编辑器系统类型

        native_modules : map<string /* path */, CxxProject>,
        mut about_info : string,        // 无聊小功能，可以给项目加个关于信息，版权信息也可以写里面
    };
}

const let  
    DEFAULT_GRAPHIC_SYSTEM_NAME = "Graphic::DefaultGraphicPipelineSystem",
    DEFAULT_EDITOR_SYSTEM_NAME = "Editor::DefaultEditorSystem";

let mut hooked_log_handle = (-1): handle;

namespace editor::Project
{
    // 用于储存项目中的世界信息，包括世界所在的路径和运行时系统信息
    public using World = struct {
        mut path : option<string>, // 已经保存的世界会有路径，在关闭世界时，如果一个世界没有路径，那么这个世界会从项目里移除
        instance : je::world,  // 世界实例
        runtime_systems : vec<je::typeinfo>, // 运行时系统列表，世界载入作为游戏运行时就会把里面的系统实例化出来
    }
    {
        public func Save(self: World)
        {
            // Saving 
            // 肯定要有路径，不然直接爆炸
            if (!je::file::writeall(self.path->val, 
                Serialize::save_project_world(self): string))
            {
                je::gui::launch(generic::MsgBox, 
                    (F"保存世界{self.instance->editor::name()}失败",
                     F"无法写入世界数据到{self.path->val}"));
                return false;
            }
            return true;
        }
        public func SaveTo(self: World, path: string)
        {
            using je::filesys;

            let real_saving_path = normalize(je::filesys::isdir(path) 
                ? F"{path}/{self.instance->editor::name()}.jeworld" 
                | path);
            let save_request =
                self.path
                    ->map(\oldpath: string = 
                        oldpath == real_saving_path 
                        ? result::ok(normalize(oldpath))
                        | result::err((normalize(oldpath), normalize(real_saving_path)));)
                    ->or(\=result::ok(normalize(real_saving_path));)
                    ->val;

            let mut ask_msg = "";

            match(save_request)
            {
            ok(saving_path)?
            {
                // 目录符合或者干脆是尚未保存的世界，简单询问一下
                ask_msg = F"正在将世界{self.instance->editor::name()}保存到{
                     saving_path}\n是否继续？";
            }
            err((oldpath, saving_path))?
                // 目录存疑，弹个框框问一下
                ask_msg = 
                     F"正在将世界{self.instance->editor::name()}保存到{
                     saving_path}\n但此前这个世界已被保存到{
                     oldpath}\n是否继续？";
            }

            generic::askbox("保存世界？", ask_msg, func(sure: bool)
            {
                if (!sure) return;
                self.path = option::value(real_saving_path);
                self->Save();
                Browser::force_update();
            });
        }
    }

    public func StartDebug(self: Project)
    {
        for (let world : self.worlds)
        {
            for (let rt_sys : world.runtime_systems)
                world.instance->add_system(rt_sys);

            // 干掉所有Editor系统和所有Editor实体
            for (let e : world.instance->editor::get_all_entities())
            {
                let static editor_invisable = je::typeinfo::load_from_name("Editor::Invisable")->val;
                if (e->editor::get_component(editor_invisable)->has)
                    e->close();
            }

            for (let s : world.instance->editor::get_systems_types())
            {
                if (s->name->beginwith("Editor::"))
                    world.instance->editor::remove_system(s);
            }
        }
    }

    // 在当前项目中创建一个世界，世界会被保存进项目的世界列表中
    public func CreateWorld(self: Project)
    {
        let world_instance = je::universe::current()->create_world();

        // 创建调试摄像机组
        // 父对象，负责带着摄像机运动，同时负责y轴旋转
        let camera_walker = world_instance->add_entity([
            // Transform 族组件
            je::typeinfo::load_from_name("Transform::LocalPosition")->val,
            je::typeinfo::load_from_name("Transform::LocalRotation")->val,
            je::typeinfo::load_from_name("Transform::LocalToWorld")->val,
            je::typeinfo::load_from_name("Transform::Translation")->val,
            je::typeinfo::load_from_name("Transform::ChildAnchor")->val,
            // Editor 族组件
            je::typeinfo::load_from_name("Editor::Invisable")->val,
            je::typeinfo::load_from_name("Editor::EditorWalker")->val,
        ]);
        // 摄像机，同时负责x轴旋转
        let editor_camera = world_instance->add_entity([
            // Transform 族组件
            je::typeinfo::load_from_name("Transform::LocalRotation")->val,
            je::typeinfo::load_from_name("Transform::LocalToParent")->val,
            je::typeinfo::load_from_name("Transform::Translation")->val,
            // Editor 族组件
            je::typeinfo::load_from_name("Editor::Invisable")->val,
            je::typeinfo::load_from_name("Editor::EditorWalker")->val,
            // Camera 族组件
            je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val,
            je::typeinfo::load_from_name("Camera::Projection")->val,
            je::typeinfo::load_from_name("Camera::RendToFramebuffer")->val,
        ]);
        editor_camera->je::editor::apply_camera_framebuf_setting(320, 240);
        editor_camera->editor::set_parent(camera_walker, true);
        camera_walker->editor::set_name("调试摄像机组");
        editor_camera->editor::set_name("调试摄像机");

        // 移动器，这里只创建根实体，具体的轴由编辑器系统生成
        let entity_mover = world_instance->add_entity([
            // Transform 族组件
            je::typeinfo::load_from_name("Transform::LocalPosition")->val,
            je::typeinfo::load_from_name("Transform::LocalRotation")->val,
            je::typeinfo::load_from_name("Transform::LocalScale")->val,
            je::typeinfo::load_from_name("Transform::ChildAnchor")->val,
            je::typeinfo::load_from_name("Transform::Translation")->val,
            je::typeinfo::load_from_name("Transform::LocalToWorld")->val,
            // Editor 族组件
            je::typeinfo::load_from_name("Editor::Invisable")->val,
            je::typeinfo::load_from_name("Editor::EntityMoverRoot")->val,
        ]);

        let world = World{
            path = option::none,
            instance = world_instance,
            runtime_systems = []mut,
        };

        self.worlds->add(world);
        return world;
    }

    // 从文件中读取世界数据
    public func LoadWorld(self: Project, path: string)=> option<World>
    {
        // 检查一下项目里是不是已经有同路径的世界在运行了
        let index = self.worlds->findif(\w: World = w.path->has 
            ? w.path->val == path
            | false;);
        if (index != -1)
        {
            generic::msgbox("加载世界失败", F"世界'{path}'已在编辑中，不能重复加载");
            return option::none;
        }

        return je::file::readall(path)
            ->bind(\d: string = d->todict;)
            ->bind(\d: dict<dynamic, dynamic> = Serialize::restore_world(self, d););
    }

    public func CloseWorld(self: Project, world: je::world)
    {
        self->FindWorld(world)
            ->map(\w: World = self.worlds->remove(self.worlds->find(w)););

        world->close;
    }

    public func DumpAllWorlds(self: Project)
    {
        return
            self.worlds
                ->map(\w: World = Serialize::save_project_world(w);): string;
    }

    public func CloseAllWorlds(self: Project)
    {
        EntityList::set_current_entity(option::none);
        self.worlds
            ->dup
            ->map(\w: World = self->CloseWorld(w.instance););
    }

    public func RestoreAllWorlds(self: Project, worlds: string)
    {
        worlds->toarray->val->map(\d: dynamic = Serialize::restore_world(self, d as dict););
        if (!self.worlds->empty)
            self.worlds[0].instance->WorldList::SwitchEditingWorld;
    }

    public func FindWorld(self: Project, world: je::world)=> option<World>
    {
        for (let project_world : self.worlds)
            if (project_world.instance == world)
                return option::value(project_world);

        je::logwarn("发现一个未被列入项目中的游离世界：", world->editor::name());
        return option::none;
    }

    private let mut _current_project = option::none : option<Project>;

    public func SetCurrentProject(self: Project)
    {
        // 不可以重复设置当前项目，设置前应当清除旧的项目
        assert(false == _current_project->has);

        _current_project = option::value(self);
        return self;
    }

    func RemoveCurrentProject()
    {
        assert(_current_project->has);

        let proj = _current_project->val;
        je::loginfo(F"关闭当前项目: {proj.name}");
        for (let w : proj.worlds)
        {
            je::loginfo(F"关闭项目中所属的世界：{w.instance->editor::name}");
            w.instance->close;
        }

        _current_project = option::none;
    }

    private func CreateDefaultProject()
    {
        return SetCurrentProject(Project{
            name = "Default project",
            path = option::none, // 默认项目不带有path信息，这种项目是不可以被用于保存的
            // NOTE: 默认系统应该内置在引擎里，如果获取不到这里直接爆炸
            graphic_system = je::typeinfo::load_from_name(DEFAULT_GRAPHIC_SYSTEM_NAME)->val,
            editor_system = je::typeinfo::load_from_name(DEFAULT_EDITOR_SYSTEM_NAME)->val,
            worlds = []mut,
            native_modules = {}mut,
            about_info = "此项目为默认项目，不可用于实际使用\n(C)Cinogama.",
        });
    }

    public func CreateProject(name: string, path: string, create_file: bool)
    {
        let created_project = Project{
            name = name,
            path = option::value(je::filesys::normalize(path)),
            graphic_system = je::typeinfo::load_from_name(DEFAULT_GRAPHIC_SYSTEM_NAME)->val,
            editor_system = je::typeinfo::load_from_name(DEFAULT_EDITOR_SYSTEM_NAME)->val,
            worlds = []mut,
            native_modules = {}mut,
            about_info = "你可以在这里放一些对项目的描述信息\n(C)Copyright.",
        };

        if (create_file)
        {
            // 1. 创建项目目录，把所需的文件拷贝进去
            match (je::filesys::mkdir(path))
            {
            err(reason)?
                return result::err(F"创建项目目录失败: {reason}");
            ok(_)?;
            }

            // 2. 写入项目数据文件
            match (created_project->SaveProject)
            {
            ok(projdat)?
                ;
            err(msg)?
                return result::err(msg);
            }
        }
        else
            assert(je::filesys::isdir(path));

        // ok 创建完成，销毁之前的项目上下文
        RemoveCurrentProject();

        if (hooked_log_handle == (-1): handle)
            hooked_log_handle = je::editor::hooklog();
        return result::ok(SetCurrentProject(created_project));
    }
    public func UnhookLogWhenExit()
    {
        if (hooked_log_handle != (-1): handle)
            je::editor::unhooklog(hooked_log_handle);
        hooked_log_handle = (-1): handle;
    }
    public func LoadProject(data: dict<dynamic, dynamic>)
    {
        using je;

        // 从项目信息加载并创建项目
        let proj_name = data["name": dynamic] as string->trim;
        let proj_path = data["path": dynamic] as string;

        match (CreateProject(proj_name, proj_path, false))
        {
        ok(proj)?
        {
            let failed_loading_module = 
                data->getdefault("native_module": dynamic, []: dynamic) as array
                    ->map(\d: dynamic = d as string;)
                    ->map(\p: string = (p, CxxProject::load(p)->error);)
                    ->forall(\r: (string, option<string>) = r[1]->has;)
                    ->map(\r: (string, option<string>) = (r[0], r[1]->val););

            if (!failed_loading_module->empty)
            {
                let failed_informations = 
                    failed_loading_module
                        ->map(\r: (string, string) = r[0] + " " + r[1];)
                        ->reduce(\l: string, r:string = l+"\n"+r;)
                        ->val;
                let option_msg = @"
选择'是'进入安全模式，尝试更新模块文件后重新编译
选择'否'不做任何操作，立即退出编辑器
选择'取消'放弃所有无法加载的数据，继续编辑操作"@;

                GameDebug::start_safe_mode();

                generic::checkbox(F"{failed_loading_module->len}个模块加载失败",
                    F"{failed_informations}{option_msg}", 
                    func (check: generic::CheckResult){
                        if (check == generic::CheckResult::YES)
                        {
                            for (let (path, _) : failed_loading_module)
                                match (CxxProject::open_for_loading(path))
                                {
                                ok(mod)?
                                {
                                    let update_result = 
                                        CxxProject::update_engine_file(path)
                                            ->bind(\r: map<string, bool> = 
                                                CxxProject::generate_module_config(mod.name, path, r);
                                            );
                                    if (update_result->isok)
                                        mod->update_compile(je::editor::platform());
                                    else
                                        generic::msgbox("重新编译失败", F"{path}更新引擎文件失败：\n{update_result->error->val}");
                                }
                                err(reason)?
                                    generic::msgbox("重新编译失败", F"{path}无法加载：\n{reason}");
                                }
                        }
                        else if (check == generic::CheckResult::NO)
                            je::exit();
                        else
                            GameDebug::stop_safe_mode();
                    });
            }
            
            let runtime_worlds = data["worlds": dynamic] as array<dynamic>;

            let window_info = data->getdefault("window": dynamic, {}: dynamic) as dict<dynamic, dynamic>;
            let window_size = window_info->getdefault("size": dynamic, [640, 480]: dynamic) as array<dynamic>;

            proj.about_info = data->getdefault("about_info": dynamic, "": dynamic) as string;


            // 加载自定义的图形和编辑时系统
            proj.graphic_system = data
                ->get("graphic_system": dynamic)
                ->bind(\n: dynamic = typeinfo::load_from_name(n as string);)
                ->or(\ = je::typeinfo::load_from_name(DEFAULT_GRAPHIC_SYSTEM_NAME)->val;)
                ->reduce
                ->val;
            proj.editor_system = data
                ->get("editor_system": dynamic)
                ->bind(\n: dynamic = typeinfo::load_from_name(n as string);)
                ->or(\ = je::typeinfo::load_from_name(DEFAULT_EDITOR_SYSTEM_NAME)->val;)
                ->reduce
                ->val;

            je::editor::restart_graphic_interface(F"JoyEngine 4.0 - {proj_name}",
                window_size[0]: int, window_size[1]: int, 60, false);
            // je::input::set_window_size(window_size[0]: int, window_size[1]: int);

            runtime_worlds
                ->map(\p: dynamic = p as string;)
                ->map(\path: string = proj->LoadWorld(path););

            if (proj.worlds->empty)
            {
                // 无论何种原因导致没有正在编辑的世界，给他创建一个
                let default_world = proj->CreateWorld().instance;
                default_world->editor::set_name("Root");
                default_world->add_system(je::typeinfo::load_from_name("Translation::TranslationUpdatingSystem")->val);
            }

            // 选一个世界去渲染， TODO: 在项目里记录一下？
            let rendworld = proj.worlds[0].instance;
            rendworld->add_system(proj.graphic_system);
            rendworld->add_system(proj.editor_system);

            EditFormsConfig::shown_world_list = window_info->getdefault("shown_world_list": dynamic, false: dynamic) as int: bool;
            EditFormsConfig::shown_entity_list = window_info->getdefault("shown_entity_list": dynamic, false: dynamic) as int: bool;
            EditFormsConfig::shown_inspector_list = window_info->getdefault("shown_inspector_list": dynamic, false: dynamic) as int: bool;
            EditFormsConfig::shown_browser_list = window_info->getdefault("shown_browser_list": dynamic, false: dynamic) as int: bool;

            return ok(proj);
        }
        err(msg)?
            return err(msg);
        }
    }

    public func GetCurrentProject()=> Project
    {
        match(_current_project)
        {
            value(proj)?
                return proj;
            none?
            {
                je::logwarn("没有正在编辑中的项目，将创建默认的项目上下文，此项目上下文不可以用于保存");
                return CreateDefaultProject();
            }
        }
    }

    public func SaveProject(self: Project)=>result<dict<string, dynamic>, string>
    {
        match(self.path)
        {
        value(path)?
        {
            using Serialize;
            let worlds_dumped_data = 
                self.worlds
                    ->map(\w: World = save_project_world(w););

            // 1. 检查所有世界是否已经有路径信息，如果没有则说明有新建的世界没有保存过，要求保存
            let worlds = []mut: vec<string>;
            for (let world_data : worlds_dumped_data)
            {
                if (world_data["path"] is typeof(nil))
                    return result::err(F"存在尚未保存的世界: {world_data["name"]}");

                worlds->add(world_data["path"] as string);
            }

            // OK，看上去该保存的都保存上了，调World的Save方法写入世界数据
            self.worlds
                ->map(\w: World = w->Save(););

            let (win_width, win_height) = je::input::window_size();

            let window_info = {
                ["size"] = [win_width, win_height]: dynamic,
                ["shown_world_list"] = EditFormsConfig::shown_world_list: dynamic,
                ["shown_entity_list"] = EditFormsConfig::shown_entity_list: dynamic,
                ["shown_inspector_list"] = EditFormsConfig::shown_inspector_list: dynamic,
                ["shown_browser_list"] = EditFormsConfig::shown_browser_list: dynamic,
            };

            let project_dat = {
                // 这四个字段必须存在，其他的都是可选的，之后再说
                ["name"] = self.name: dynamic,
                ["path"] = path: dynamic,
                ["worlds"] = worlds: dynamic,

                // 可选的项目信息
                ["window"] = window_info: dynamic,
                ["graphic_system"] = self.graphic_system->name: dynamic,
                ["editor_system"] = self.editor_system->name: dynamic,

                ["native_module"] = self.native_modules->unmapping
                    ->map(\m: (string, anything) = m[0];): dynamic,

                ["about_info"] = self.about_info: dynamic,
            };

            if (!je::file::writeall(F"{path}/{self.name}.jeproj4", project_dat: string))
                return result::err(F"项目工程文件'{path}/{self.name}.jeproj4'写入失败");

            return result::ok(project_dat);
        }
        none?
            // 没有保存路径，直接抛点东西让外边处理
            return result::err("当前项目是编辑器创建的默认项目，无法保存");
        }
    }
}