import rscene.std;
import je.gui;
import je.editor;

namespace editor
{
    protected func EntityMenu(var entity:je::editor::entity)
    {
        using je::gui;
        OpenPopupOnItemClick("entity_edit_menu" + "##" + entity->get_desc_str());
        if (BeginPopup("entity_edit_menu" + "##" + entity->get_desc_str()))
        {
            MenuItem(F"实体 {entity->get_desc_str()}", false);
            Separator();
            MenuItem(F"删除 {entity->name()}");
            EndPopup();
        }
    }
    protected func DisplayEntity(
        var all_entity  :array< je::editor::entity >,
        var entitys     :array< je::editor::entity >,
        var displayed   :map< je::editor::entity, bool >)
    {
        using je::gui;

        for (var entity : entitys)
        {
            if (displayed->contain(entity))
                continue;
            displayed[entity] = true;

            Button(entity->name() + "##" + entity->get_desc_str());
            EntityMenu(entity);

            var all_child = entity->select_all_child(all_entity);
            if (all_child->len())
            {
                SameLine();
                if (TreeNode("##" + entity->get_desc_str()))
                {
                    DisplayEntity(all_entity, all_child, displayed);

                    TreePop();
                }
            }
        }
    }

    func Form_EntityList(ref open:bool)
    {
        using je::gui;
        if (!open) return !open;

        Begin("层级面板", WindowsAttribute::ImGuiWindowFlags_MenuBar
                        + WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                        , ref open);

            if (BeginMenuBar())
            {
                if (BeginMenu("新建..."))
                {
                    if (MenuItem("新建实体"))
                        ; // TODO

                    EndMenu();
                }
                EndMenuBar();
            }
            var rendworld = je::editor::world::rend();

            var all_entitys = rendworld->get_all_entity();
            DisplayEntity(all_entitys, all_entitys, {}:map< je::editor::entity, bool >);
        End();
        return !open;
    }
}
