import woo.std;

import je;

namespace utils
{
    // 序列化操作
    func serialize(e: je::entity)
    {
        // 实体的序列化格式如下：
        /*
        {
            "component_1" : { "member" : "...", ... },
            ...
        }
        */
        if (e->editor::valid())
        {
            let entity_info = {}: map<string, map<string, string>>;


            // 如果实体合法，则遍历全部所有组件类型
            for (let component_type : e->editor::get_components_types())
            {
                let component_map = {}: map<string, string>;
                entity_info[component_type->name()] = component_map;

                for (let name, type, addr : e->editor::get_component(component_type)
                                             ->val()->editor::iter_member(component_type))
                {
                    component_map[name] = addr->to_string(type);
                }
            }

            return entity_info;
        }
        return {}: map<string, map<string, string>>;
    }

    func serialize(w: je::world)
    {
        // 世界的序列化格式如下:
        /*
        {
            "entities" : ["", ...],
            "systems" : ["", ...],
            "shareds" : ["", ...]
        }
        */

        let entities_list = []: array<string>;
        for (let entity : w->editor::get_all_entities())
            entities_list->add(serialize(entity): string);

        let systems_list = []: array<string>;
        for (let system_type : w->editor::get_systems_types())
            systems_list->add(system_type->name());
        
        return {
            {"entities",    entities_list},
            {"systems",        systems_list},
        };
    }
}