// OpenFile Dialog
// 传统意义上的打开文件对话框，但是是用imgui实现的
// 
import woo.std;
import je.gui;
import je.filesys;

using je::gui;

namespace generic
{
	using Path = struct	{
		path: string,
		name: string,
		childs: option<array<Path>>
	};

	namespace Path
	{
		private func _GetChildPaths(path: Path, update: bool)
		{
			if (update || !path.childs->has)
			{
				let arr = []: array<Path>;
				for (let child_path : je::filesys::path(path.path))
					// 只允许放入目录，文件不能放进来嗝
					if (je::filesys::isdir(child_path))
						arr->add(Path{
							name = je::filesys::filename(child_path),
							path = child_path,
							childs = option::none});
				path.childs = option::value(arr);            
			}

			return path.childs->val;
		}
	}

	func show_path_trees(context: Path)
	{	
		func display_tree_nodes(context: Path)
		{
			let show_childs = TreeNodeEx(context.name,
				TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnArrow 
                + TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnDoubleClick 
                + TreeNodeAttribute::ImGuiTreeNodeFlags_SpanAvailWidth);

			if (show_childs)
			{
				for (let child_path : context->_GetChildPaths(false))
					display_tree_nodes(child_path);

				TreePop();
			}
		}
		// 从指定目录开始展开显示树状图
		BeginChild("paths");
			display_tree_nodes(context);
		EndChild();
	}

	// 从指定的目录作为根目录，只显示符合类型的文件，如果符合类型为空，则意思是选择打开目录
	public func OpenFile(root_path: string, type: string,  accept_type: option<array<string>>, action: (string)=>void)
	{
		let context = Path{ path=root_path, name=je::filesys::filename(root_path), childs=option::none};
		while (true)
		{
			Begin(F"打开{type}");

			// 显示一下子目录
			show_path_trees(context);

			match (accept_type)
			{
			none?
			{
				// 仅显示目录
			}
			value(filetypes)?
			{
				// 显示指定类型的文件
			}
			} // End of match

			End();

			std::yield();
		}

		return FormAction::Close;
	}
}