import woo.std;
import woo.debug;

import je.gui;
import je;
import je.filesys;

import ecsviewer.worldlist;
import ecsviewer.entitylist;
import ecsviewer.inspector;

import system.browser;

import script_editor;

import generic.form.askfor;
import generic.serialize;

import project.config;
import project.init;

import test.memleak_component_modify;
import test.memleak_world_lifecycle;
import test.memleak_graphic_resource;
                    
// 这个是编辑器上方的主菜单栏
func Editor_MainMenuBar()
{
    using je::gui;

    let mut show_main_menu = true;

    BeginMainMenuBar();
    if (BeginMenu("JoyEngine"))
    {
        MenuItem("打开");
        Separator();
        if (MenuItem("退出"))
            launch(generic::AskFor, ("确认退出", "即将关闭JoyEngine，是否继续？", 
                        func()
                        {
                            je::exit();
                        }));

        EndMenu();
    }
    if (BeginMenu("编辑", false))
    {
        EndMenu();
    }
    if (BeginMenu("视图"))
    {
        static let mut active_worlds_shown = false;
        static let mut active_world_entities_shown = false;
        static let mut active_inspector_shown = false;
        static let mut active_browser_shown = false;

        if (MenuItem("世界列表", ref active_worlds_shown, true) && active_worlds_shown)
            launch(editor::WorldList::show, (ref active_worlds_shown,));
        if (MenuItem("层级面板", ref active_world_entities_shown, true) && active_world_entities_shown)
            launch(editor::EntityList::show, (ref active_world_entities_shown,));
        if (MenuItem("检视面板", ref active_inspector_shown, true) && active_inspector_shown)
            launch(editor::Inspector::show, (ref active_inspector_shown,));
        Separator();
        if (MenuItem("文件管理器", ref active_browser_shown, true) && active_browser_shown)
            launch(editor::Browser::show, (ref active_browser_shown,));


        EndMenu();
    }
     if (BeginMenu("脚本"))
    {
        static let mut editor_opened = false;

        if (MenuItem("打开快捷编辑器", ref editor_opened, true) && editor_opened)
            launch(Editor_ScriptEditor, (ref editor_opened,));

        EndMenu();
    }
    if (BeginMenu("帮助"))
    {
        static let mut about_shown = false;
        if (MenuItem("关于", ref about_shown, true) && about_shown)
            je::gui::launch(Editor_Welcome, (ref about_shown,));

        EndMenu();
    }
    if (BeginMenu("DEBUG"))
    {
        if (MenuItem("关闭主菜单栏"))
            show_main_menu = false;

        if (MenuItem("序列化当前世界"))
            match (je::world::rend())
            {
                value(w)?
                    std::println(utils::serialize(w));
                none?
                    std::println("序列化个锤子！没有世界！");
            }
        if (MenuItem("内存泄漏测试（组件增删改查）"))
            launch(test::memory_leak::ComponentModify::show, ());
        if (MenuItem("内存泄漏测试（世界生命周期）"))
            launch(test::memory_leak::WorldLifecycle::show, ());
        if (MenuItem("内存泄漏测试（图形系统资源）"))
            launch(test::memory_leak::GraphicResource::show, ());
            
        EndMenu();
    }
    EndMainMenuBar();

    if (!show_main_menu)
        return FormAction::Close;
    return FormAction::Nothing;
}

// 关于信息窗口
func Editor_Welcome(ref open: bool)
{
    using je::gui;

    if (!open)
        return FormAction::Close;

    Begin("欢迎", WindowsAttribute::ImGuiWindowFlags_NoResize);
    Text("欢迎使用JoyEngineECS.");
    Separator();
    Text("Copyright (C)Cinogama project. 2022.");
    Text("Powered by WooLang (C)Cinogama project. 2022.");
    Text("所使用的第三方库包括glew、glfw、imgui及stb的相关信息见版权页");
    if (Button("确认"))
        open = false;
    End();

    if (!open)
        return FormAction::Close;
    return FormAction::Nothing;
}

/////////////////////


/////////////////////
editor::Project::Start(Editor_MainMenuBar, ());
