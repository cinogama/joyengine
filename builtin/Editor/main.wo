import woo.std;
import woo.debug;

import je.gui;
import je;
import je.filesys;

import ecsviewer.worldlist;
import ecsviewer.entitylist;
import ecsviewer.inspector;

import system.browser;

import script_editor;

import generic.form.askbox;           
import generic.form.msgbox;
import generic.shortcut;

import project.config;
import project.init;
import project.serialize;

import test.memleak_component_modify;
import test.memleak_world_lifecycle;
import test.memleak_graphic_resource;

using je::gui;
using editor;
using generic;

namespace EditFormsConfig
{
    public 
        let mut shown_world_list = false,
            mut shown_entity_list = false,
            mut shown_inspector_list = false,
            mut shown_browser_list = false;
}

shortcut::register([je::keycode::L_CTRL, je::keycode::W,], func(){
    EditFormsConfig::shown_world_list = !EditFormsConfig::shown_world_list;
});
shortcut::register([je::keycode::L_CTRL, je::keycode::E,], func(){
    EditFormsConfig::shown_entity_list = !EditFormsConfig::shown_entity_list;
});
shortcut::register([je::keycode::L_CTRL, je::keycode::I,], func(){
    EditFormsConfig::shown_inspector_list = !EditFormsConfig::shown_inspector_list;
});
shortcut::register([je::keycode::L_CTRL, je::keycode::B,], func(){
    EditFormsConfig::shown_browser_list = !EditFormsConfig::shown_browser_list;
});

static let mut display_debug_camera_viewport = true;

shortcut::register([je::keycode::L_CTRL, je::keycode::A,], 
    \=je::logfatal("TODO: 添加实体菜单尚未实现"););
shortcut::register([je::keycode::L_CTRL, je::keycode::P,], 
    \= display_debug_camera_viewport = !display_debug_camera_viewport;);
shortcut::register([je::keycode::L_CTRL, je::keycode::S,], func(){
    match(Project::GetCurrentProject()->SaveProject())
    {
    ok(_)?
        launch(MsgBox, ("保存项目成功", "项目及世界的变更已应用"));
    err(msg)?
        launch(MsgBox, ("保存项目失败", msg));
    }
});
shortcut::register([je::keycode::L_CTRL, je::keycode::ESC,], func(){
    if (GameDebug::is_debugging())
        GameDebug::stop_debug();
});

namespace logmgr
{
    let log_buffers = {
        [je::editor::loglevel::NORMAL]  = []mut,
        [je::editor::loglevel::INFO]    = []mut,
        [je::editor::loglevel::WARNING] = []mut,
        [je::editor::loglevel::ERROR]   = []mut,
        [je::editor::loglevel::FATAL]   = []mut,
    }: dict<je::editor::loglevel, vec<string>>;

    let log_level_name = {
        [je::editor::loglevel::NORMAL]  = "普通",
        [je::editor::loglevel::INFO]    = "信息",
        [je::editor::loglevel::WARNING] = "警告",
        [je::editor::loglevel::ERROR]   = "错误",
        [je::editor::loglevel::FATAL]   = "致命",
    };

    let mut last_log = option::none: option<(je::editor::loglevel, string)>;

    // 拉取日志，更新到buffers里面
    func update_buffers()
    {
        let this_time_log = je::editor::getlogs();
        for (let _, (t, s) : this_time_log)
            log_buffers[t]->insert(0, s);

        if (!this_time_log->empty)
        {
            let (level, msg) = this_time_log[this_time_log->len - 1];
            return last_log = option::value((level, msg->utils::ShortStringCutEnd(60)));
        }

        return last_log;
    }
    // 获取日志的数量
    func get_log_count()=> (int, int, int, int, int)
    {
        let result = [mut 0, 0, 0, 0, 0];

        // 如果level超出0-5的范围，直接panic
        log_buffers
            ->unmapping
            ->map(\logs: (je::editor::loglevel, vec<string>) = 
                result[logs[0]:int] = logs[1]->len;);

        return (result[0], result[1], result[2], result[3], result[4]);
    }

    // log显示菜单，仅用于展示log列表信息
    func show_log()
    {
        if (MenuItem("清除所有"))
        {
            last_log = option::none;
            log_buffers
                ->vals
                ->map(\v: vec<anything> = v->clear;);
        }
        Separator();
        for (let k, v : log_buffers)
        {
            if (BeginMenuEnabled(F"{log_level_name[k]}({v->len})", !v->empty))
            {
                func get_title_of_error(msg: string)
                {
                    let switch_line_place = msg->find("\n");
                    if (switch_line_place !=- 1)
                        return msg->subto(0, switch_line_place);
                    return msg;
                }
                for (let _, msg : v)
                {
                    MenuItem(msg->get_title_of_error->utils::ShortStringCutEnd(60));
                    if (IsItemHovered())
                        SetTooltip(msg);
                }
                EndMenu();
            }
        }
        return FormAction::Nothing;
    }
}

namespace GameDebug
{
    let mut edit_context = option::none: 
        option<typeof(std::declval:<editor::Project>()->DumpAllWorlds)>;

    let mut safe_mode = false;

    public func is_safe_mode()
    {
        return safe_mode;
    }
    public func stop_safe_mode()
    {
        safe_mode = false;
    }
    public func start_safe_mode()
    {
        safe_mode = true;
    }

    func is_debugging()
    {
        return edit_context->has;
    }
    func stop_debug()
    {
        match (edit_context)
        {  
        value(dump_worlds)?
        {
            let p = editor::Project::GetCurrentProject();
            edit_context = option::none;
            p->CloseAllWorlds();

            p->RestoreAllWorlds(dump_worlds);
        }
        none? 
            std::panic("编辑器未处于调整状态");
        }
    }
    func start_debug()
    {
        match (edit_context)
        {  
        none?
        {
            let p = editor::Project::GetCurrentProject();
            edit_context = option::value(p->DumpAllWorlds);
            p->StartDebug();
        }
        value(_)? 
            std::panic("不可重复调试");
        }
    }
}

func Editor_CameraViewport()
{
    // 编辑视口区域，编辑时的主要操作都在这里完成

    if (!display_debug_camera_viewport)
        return;

    static let mut windows_moveable = true;

    display_debug_camera_viewport = BeginAttrOpen("调试器视口", 
        WindowsAttribute::ImGuiWindowFlags_MenuBar
        + (windows_moveable 
            ? WindowsAttribute::ImGuiWindowFlags_None
            | WindowsAttribute::ImGuiWindowFlags_NoMove));

    if (BeginMenuBar())
    {
        if (MenuItem("调试运行"))
            GameDebug::start_debug();

        EndMenuBar();
    }

    let debug_camera_entity = je::world::rend()
        =>> \w = w->editor::get_all_entities
            ->forall(\e = 
                e->editor::get_component(je::typeinfo::load_from_name("Editor::EditorWalker")->val)->has
                && e->editor::get_component(je::typeinfo::load_from_name("Camera::RendToFramebuffer")->val)->has
            ;)
            ->reduce(\l, r = l;)
            ;
    ;

    match(debug_camera_entity =>> \camera = je::editor::get_framebuf_texture(camera, 0);)
    {
    value(frametex)?
    {
        let (frame_tex_width, frame_tex_height) = frametex->size;

        let (available_width, available_height) = GetContentRegionAvail();

        let (wx, wy) = GetWindowPos();
        let (lupx, lupy) = GetCursorPos();

        ImageSize(frametex, available_width: int, available_height: int);

        let (itemw, itemh) = GetItemRectSize();
        let (mx, my) = GetMousePos();
        let (offsetx, offsety) = (mx - lupx - wx, my - lupy - wy);

        if (IsItemHovered())
        {
            // 在渲染区域内！

            windows_moveable = false;

            let uniform_mpos_x = 2. * ((offsetx:int - itemw:int/2):real / itemw), 
                uniform_mpos_y = -2. * ((offsety:int - itemh:int/2):real / itemh);

            je::editor::enable_editor_system(true);
            je::editor::update_editor_mouse_pos(
                uniform_mpos_x, 
                uniform_mpos_y, 
                wx:int + lupx:int + (itemw:int/2), 
                wy:int + lupy:int + (itemh:int/2));
        }
        else
        {
            windows_moveable = true;
            je::editor::enable_editor_system(false);
        }

        if (frame_tex_width != available_width: int || frame_tex_height != available_height: int)
        {
            debug_camera_entity
                ->val
                ->je::editor::apply_camera_framebuf_setting(available_width: int, available_height: int);
        }
        if (BeginPopupContextWindow())
        {
            if (MenuItem("新建实体"))
                launch(EntityCreator::show, (EntityCreator::create_context(),));
            Separator();
            editor::EntityList::context_for_entity(je::entity::editor::editing());

            EndPopup();
        }
        
    }
    none?
        Text("未找到编辑器渲染使用的摄像机或无法获取摄像机的渲染结果，因此无法执行渲染操作");
    }

    End();
}

// 这个是编辑器上方的主菜单栏
func Editor_MainMenuBar()
{
    let mut show_main_menu = true;

    if (GameDebug::is_safe_mode())
        return FormAction::Nothing;

    // 刷新检测热键
    shortcut::update();

    if (EditFormsConfig::shown_world_list)
        EditFormsConfig::shown_world_list = WorldList::show(EditFormsConfig::shown_world_list);
    if (EditFormsConfig::shown_entity_list)
        EditFormsConfig::shown_entity_list = EntityList::show(EditFormsConfig::shown_entity_list);
    if (EditFormsConfig::shown_inspector_list)
        EditFormsConfig::shown_inspector_list = Inspector::show(EditFormsConfig::shown_inspector_list);
    if (EditFormsConfig::shown_browser_list)
        EditFormsConfig::shown_browser_list = Browser::show(EditFormsConfig::shown_browser_list);

    // 拉取一下log信息
    let last_log_info = logmgr::update_buffers();

    if (!GameDebug::is_debugging())
    {
        Editor_CameraViewport();

        BeginMainMenuBar();
        if (BeginMenu("JoyEngine"))
        {
            MenuItem("新建");
            MenuItem("打开");
            if (MenuItemShortcut("保存", "Ctrl + S"))
                shortcut::active([je::keycode::L_CTRL, je::keycode::S]);

            Separator();
            if (MenuItem("退出"))
                checkbox("确认退出", "即将关闭JoyEngine，是否需要保存项目？", 
                // 选择是，执行保存操作，完成后退出
                func(check: generic::CheckResult){
                    if (check == generic::CheckResult::YES)
                        match(Project::GetCurrentProject()->SaveProject())
                        {
                        ok(_)?
                            je::exit();
                        err(msg)?
                            launch(MsgBox, ("保存项目失败", msg));
                        }
                    else if (check == generic::CheckResult::NO)
                        je::exit();
                });

            EndMenu();
        }
        if (BeginMenu("编辑"))
        {
            if (MenuItemShortcut("调试运行", "使用Ctrl+Esc终止调试"))
                GameDebug::start_debug();
            if (MenuItem("项目设置"))
                editor::Project::GetCurrentProject()->config_form();
            EndMenu();
        }
        if (BeginMenu("视图"))
        {
            if (MenuItemShortcut("世界列表", "Ctrl + W"))
                shortcut::active([je::keycode::L_CTRL, je::keycode::W]);
            if (MenuItemShortcut("层级面板", "Ctrl + E"))
                shortcut::active([je::keycode::L_CTRL, je::keycode::E]);
            if (MenuItemShortcut("检视面板", "Ctrl + I"))
                shortcut::active([je::keycode::L_CTRL, je::keycode::I]);
            if (MenuItemShortcut("调试视口", "Ctrl + P"))
                shortcut::active([je::keycode::L_CTRL, je::keycode::P]);
            Separator();
            if (MenuItemShortcut("文件管理器", "Ctrl + B"))
                shortcut::active([je::keycode::L_CTRL, je::keycode::B]);


            EndMenu();
        }
         if (BeginMenu("脚本"))
        {
            static let editor_opened = mutable::create(false);

            match (MenuItemSelectedEnabled("打开快捷编辑器", editor_opened->get, true))
            {
            value(opened)?
            {
                editor_opened->set(opened);
                if (opened)
                     launch(Editor_ScriptEditor, (editor_opened,));
            }
            none?
                ;
            }
            EndMenu();
        }
        if (BeginMenu("帮助"))
        {
            static let about_shown = mutable::create(false);

            match (MenuItemSelectedEnabled("关于", about_shown->get, true))
            {
            value(selected)?
            {
                about_shown->set(selected);
                if (selected)
                     launch(Editor_Welcome, (about_shown,));
            }
            none?
                ;
            }
                    
            EndMenu();
        }
        if (BeginMenu("DEBUG"))
        {
            if (MenuItem("关闭主菜单栏"))
                show_main_menu = false;

            if (MenuItem("序列化当前世界"))
                match (je::world::rend())
                {
                    value(w)?
                        std::println(
                            editor::Serialize::save_project_world(
                                Project::GetCurrentProject()->FindWorld(w)->val()));
                    none?
                        std::println("序列化个锤子！没有世界！");
                }
            if (MenuItem("内存泄漏测试（组件增删改查）"))
                launch(test::memory_leak::ComponentModify::show, ());
            if (MenuItem("内存泄漏测试（世界生命周期）"))
                launch(test::memory_leak::WorldLifecycle::show, ());
            if (MenuItem("内存泄漏测试（图形系统资源）"))
                launch(test::memory_leak::GraphicResource::show, ());
            if (MenuItem("启用全屏"))
                je::editor::restart_graphic_interface("DEBUG",
                    1920, 1080, 60, true);
            if (MenuItem("还原窗口"))
            {
                let (win_width, win_height) = je::input::window_size();
                je::editor::restart_graphic_interface("DEBUG",
                    win_width, win_height, 60, false);
            }
            if (MenuItem("重载全部世界"))
            {
                let proj = Project::GetCurrentProject();
                let dat = proj->DumpAllWorlds();
                proj->CloseAllWorlds();
                proj->RestoreAllWorlds(dat);
            }
            let mut show_hiding_editor_entity = EntityList::get_enable_show_invisable_entity();
            match (MenuItemSelectedEnabled("显示编辑器隐藏实体", show_hiding_editor_entity, true))
            {
            value(selected)?
                EntityList::set_enable_show_invisable_entity(selected);
            none?
                ;
            }
            match (MenuItemSelectedEnabled("资源管理器隐藏内置资源",
                editor::Browser::editor_need_hiding_file, true))
            {
            value(selected)?
                editor::Browser::editor_need_hiding_file = selected;
            none?
                ;
            }
            EndMenu();
        }
        let (normal, info, warning, error, fatal) = logmgr::get_log_count();

        // todo 这个返回一个元组的设计太蠢了
        let msg = [("普通", normal), ("信息", info), ("警告", warning), ("错误", error), ("致命", fatal)]
            ->forall(\msg: (string, int) = msg[1] > 0;)
            ->map(\msg: (string, int) = F"{msg[0]}:{msg[1]} ";)
            ->reduce(\lmsg: string, rmsg: string = lmsg + rmsg;);

        if (BeginMenu(msg->valor("暂无日志")->trim 
            + last_log_info
                ->map(\loginfo:(je::editor::loglevel, string)=
                    F" [{logmgr::log_level_name[loginfo[0]]}: {loginfo[1]}]";)
                ->valor("")))
        {
            logmgr::show_log();
            EndMenu();
        } 

        EndMainMenuBar();
    }

    if (!show_main_menu)
        return FormAction::Close;
    return FormAction::Nothing;
}

// 关于信息窗口
func Editor_Welcome(open: mutable<bool>)
{
    if (!open->get)
        return FormAction::Close;

    BeginAttr("欢迎", WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize);
    Text("欢迎使用JoyEngineECS.");
    Separator();
    Text("Copyright (C)Cinogama project. 2022.");
    Text("Powered by WooLang (C)Cinogama project. 2022.");
    Text("所使用的第三方库包括glew、glfw、imgui及stb的相关信息见版权页");

    Separator();

    Text("关于项目"); 
    SameLine(); 
    if (Button("修改项目的关于信息"))
    {
        launch(func()
        {
            BeginAttr("修改项目的关于信息", WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize);
                InputTextMultilineSize("##", editor::Project::GetCurrentProject().about_info, 400., 200.)
                    ->> \newtext = editor::Project::GetCurrentProject().about_info = newtext;
                    ;
                let close = Button("完成");
            End();
            if (close)
                return FormAction::Close;
            return FormAction::Nothing;
        }, ());
    }

    let (available_width, _) = GetContentRegionAvail();

    InputTextMultilineSize("##", editor::Project::GetCurrentProject().about_info, available_width, 100.0);

    if (Button("确认"))
        open->set(false);
    End();

    if (!open->get)
        return FormAction::Close;
    return FormAction::Nothing;
}

/////////////////////

func display_icon_in_console()
{
    using je::graphic;

    func display_text(f: font, msg: string)
    {
        let chtex = f->load_string(msg);
        let (width, height) = chtex->size;

        let mut display_bar = "-";
        for (let mut x = 0; x < width; x += 1)
            display_bar += "--";

        je::log(display_bar);
        for (let mut y = 0; y < height; y += 1)
        {
            let mut out_line = "";
            for (let mut x = 0; x < width; x += 1)
                out_line += chtex->pix(x, y)->get_color[3] <= 0.175 ? "  " | "■";

            je::log(F"{out_line}|");
        }
        je::log(display_bar);

        chtex: gchandle->close();
        f: gchandle->close();
    }

    font::load(@"builtin/cino_ipix_12px.ttf"@, 14)
        ->map(\f: font = display_text(f, text)
                where text = "Joy{scale:0.75}{offset:(0.2, -0.1)}4.x{scale:1}\nEngine";);
    je::log("");
    je::log("JoyEngine 4.x (C)Cinogama project. 2022.");
    je::log("Powered by woolang, (C)Cinogama project. 2021-2022.");
}

/////////////////////

/////////////////////

display_icon_in_console();
editor::Project::Start(Editor_MainMenuBar, ());
