import woo.std;
import je.gui;
import je;

import View.worldlist;
import View.entitylist;
import View.inspector;

import script_editor;

import generic.AskFor;

// 这个是编辑器上方的主菜单栏
func Editor_MainMenuBar()
{
    using je::gui;

    BeginMainMenuBar();
    if (BeginMenu("JoyEngine"))
    {
        MenuItem("打开");
        Separator();
        if (MenuItem("退出"))
            launch(generic::AskFor, "确认退出", "即将关闭JoyEngine，是否继续？", 
                        func()
                        {
                            je::exit();
                        });

        EndMenu();
    }
    if (BeginMenu("编辑", false))
    {
        EndMenu();
    }
    if (BeginMenu("视图"))
    {
        static var active_worlds_shown = false;
        static var active_world_entities_shown = false;
        static var active_inspector_shown = false;

        if (MenuItem("世界列表", ref active_worlds_shown, true) && active_worlds_shown)
            launch(editor::WorldList::show, ref active_worlds_shown);
        if (MenuItem("层级面板", ref active_world_entities_shown, true) && active_world_entities_shown)
            launch(editor::EntityList::show, ref active_world_entities_shown);
        if (MenuItem("检视面板", ref active_inspector_shown, true) && active_inspector_shown)
            launch(editor::Inspector::show, ref active_inspector_shown);

        EndMenu();
    }
     if (BeginMenu("脚本"))
    {
        static var editor_opened = false;

        if (MenuItem("打开快捷编辑器", ref editor_opened, true) && editor_opened)
            launch(Editor_ScriptEditor, ref editor_opened);

        EndMenu();
    }
    if (BeginMenu("帮助"))
    {
        if (MenuItem("关于"))
            je::gui::launch(Editor_Welcome);

        EndMenu();
    }
    EndMainMenuBar();
}

// 关于信息窗口
func Editor_Welcome()
{
    using je::gui;

    var exit = false;

    Begin("欢迎", WindowsAttribute::ImGuiWindowFlags_NoResize);
    Text("欢迎使用JoyEngineECS.");
    Separator();
    Text("Copyright (C)Cinogama project. 2022.");
    Text("Powered by WooLang (C)Cinogama project. 2022.");
    Text("所使用的第三方库包括glew、glfw、imgui及stb的相关信息见版权页");
    if (Button("确认"))
        exit = true;
    End();

    return exit;
}

je::gui::launch(Editor_MainMenuBar);
je::gui::launch(Editor_Welcome);

/////////////////////////////////////////////////////////////

func test_components()
{
    using je::gui;

    var opened = true;

    Begin("测试窗口", 0, ref opened);
        if (Button("测试组件反射"))
        {
            std::println("呜呜呜 我被点了");

            var all_worlds = je::universe::current()->editor::worlds_list();
            for (var world : all_worlds)
            {
                std::println(F"在世界{world->editor::name()}中：");

                var all_entities = world->editor::get_all_entities();
                for (var entity : all_entities)
                {
                    std::println(F"  在实体{entity->editor::chunk_info()}中：");

                    var all_components_types = entity->editor::get_components_types();
                    for (var component_type : all_components_types)
                    {
                        std::println(F"    在组件{component_type->name()}中：");
                        var component = entity->editor::get_component(component_type)->val();
                        for (var name, type, addr : component->editor::iter_member(component_type))
                        {
                            std::println(F"      成员{name}: {type->name()}");
                        }
                    }
                }
            }
        }
    End();

    return !opened;
}
je::gui::launch(test_components);
