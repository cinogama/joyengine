import woo.std;
import woo.debug;

import je.gui;
import je;
import je.filesys;

import ecsviewer.worldlist;
import ecsviewer.entitylist;
import ecsviewer.inspector;

import system.browser;

import script_editor;

import generic.form.askbox;                  
import generic.shortcut;

import project.config;
import project.init;
import project.serialize;

import test.memleak_component_modify;
import test.memleak_world_lifecycle;
import test.memleak_graphic_resource;

using je::gui;
using editor;

shortcut::register([je::keycode::L_CTRL, je::keycode::W,], func(){
    static let mut shown = false;
    shown = !shown;
    if (shown)
        launch(WorldList::show, (ref shown,));
});
shortcut::register([je::keycode::L_CTRL, je::keycode::E,], func(){
    static let mut shown = false;
    shown = !shown;
    if (shown)
        launch(EntityList::show, (ref shown,));
});
shortcut::register([je::keycode::L_CTRL, je::keycode::I,], func(){
    static let mut shown = false;
    shown = !shown;
    if (shown)
        launch(Inspector::show, (ref shown,));
});
shortcut::register([je::keycode::L_CTRL, je::keycode::B,], func(){
    static let mut shown = false;
    shown = !shown;
    if (shown)
        launch(Browser::show, (ref shown,));
});
shortcut::register([je::keycode::L_CTRL, je::keycode::A,], \=je::logfatal("TODO: 添加实体菜单尚未实现"););
shortcut::register([je::keycode::L_CTRL, je::keycode::S,], \=je::logfatal("TODO: 保存工程尚未实现"););

// 这个是编辑器上方的主菜单栏
func Editor_MainMenuBar()
{
    using je::gui;

    let mut show_main_menu = true;

    // 刷新检测热键
    shortcut::update();

    BeginMainMenuBar();
    if (BeginMenu("JoyEngine"))
    {
        MenuItem("打开");
        Separator();
        if (MenuItem("退出"))
            launch(generic::AskBox, ("确认退出", "即将关闭JoyEngine，是否继续？", je::exit));

        EndMenu();
    }
    if (BeginMenu("编辑", false))
    {
        EndMenu();
    }
    if (BeginMenu("视图"))
    {
        if (MenuItem("世界列表", "Ctrl + W"))
            shortcut::active([je::keycode::L_CTRL, je::keycode::W]);
        if (MenuItem("层级面板", "Ctrl + E"))
            shortcut::active([je::keycode::L_CTRL, je::keycode::E]);
        if (MenuItem("检视面板", "Ctrl + I"))
            shortcut::active([je::keycode::L_CTRL, je::keycode::I]);
        Separator();
        if (MenuItem("文件管理器", "Ctrl + B"))
            shortcut::active([je::keycode::L_CTRL, je::keycode::B]);


        EndMenu();
    }
     if (BeginMenu("脚本"))
    {
        static let mut editor_opened = false;

        if (MenuItem("打开快捷编辑器", ref editor_opened, true) && editor_opened)
            launch(Editor_ScriptEditor, (ref editor_opened,));

        EndMenu();
    }
    if (BeginMenu("帮助"))
    {
        static let mut about_shown = false;
        if (MenuItem("关于", ref about_shown, true) && about_shown)
            launch(Editor_Welcome, (ref about_shown,));

        EndMenu();
    }
    if (BeginMenu("DEBUG"))
    {
        if (MenuItem("关闭主菜单栏"))
            show_main_menu = false;

        if (MenuItem("序列化当前世界"))
            match (je::world::rend())
            {
                value(w)?
                    std::println(
                        editor::Serialize::save_project_world(
                            Project::FindWorld(Project::GetCurrentProject(), w)->val()));
                none?
                    std::println("序列化个锤子！没有世界！");
            }
        if (MenuItem("内存泄漏测试（组件增删改查）"))
            launch(test::memory_leak::ComponentModify::show, ());
        if (MenuItem("内存泄漏测试（世界生命周期）"))
            launch(test::memory_leak::WorldLifecycle::show, ());
        if (MenuItem("内存泄漏测试（图形系统资源）"))
            launch(test::memory_leak::GraphicResource::show, ());
            
        EndMenu();
    }
    EndMainMenuBar();

    if (!show_main_menu)
        return FormAction::Close;
    return FormAction::Nothing;
}

// 关于信息窗口
func Editor_Welcome(ref open: bool)
{
    if (!open)
        return FormAction::Close;

    Begin("欢迎", WindowsAttribute::ImGuiWindowFlags_NoResize);
    Text("欢迎使用JoyEngineECS.");
    Separator();
    Text("Copyright (C)Cinogama project. 2022.");
    Text("Powered by WooLang (C)Cinogama project. 2022.");
    Text("所使用的第三方库包括glew、glfw、imgui及stb的相关信息见版权页");
    if (Button("确认"))
        open = false;
    End();

    if (!open)
        return FormAction::Close;
    return FormAction::Nothing;
}

/////////////////////

func display_icon_in_console()
{
    using je::graphic;

    func display_text(f: font, msg: string)
    {
        let chtex = f->load_string(msg);
        let (width, height) = chtex->size();

        let mut display_bar = "-";
        for (let mut x = 0; x < width; x += 1)
            display_bar += "--";

        je::log(display_bar);
        for (let mut y = 0; y < height; y += 1)
        {
            let mut out_line = "";
            for (let mut x = 0; x < width; x += 1)
                out_line += chtex->pix(x, y)->color()[3] <= 0.175 ? "  " | "■";

            je::log(F"{out_line}|");
        }
        je::log(display_bar);
    }

    font(@"builtin/cino_ipix_12px.ttf"@, 14)
        ->map(\f: font = display_text(f, "Joy{scale:0.75}{offset:(0.2, -0.1)}4.x{scale:1}\nEngine"););
    je::log("");
    je::log("JoyEngine 4.x (C)Cinogama project. 2022.");
    je::log("Powered by woolang, (C)Cinogama project. 2021-2022.");
}

/////////////////////
display_icon_in_console();
editor::Project::Start(Editor_MainMenuBar, ());


