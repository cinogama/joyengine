import woo.std;
import je.gui;
import je;

namespace test::memory_leak::WorldLifecycle
{
	using test_context = struct {
		mut count : int,
		worlds : vec<je::world>,
	};
	func _test_co(context: test_context, run: mutable<bool>)
	{
		if (run->get)
		{
			// 0. 创建世界
			let world = je::universe::current()->create_world();
			world->add_system(je::typeinfo::load_from_name("Translation::TranslationUpdatingSystem")->val());

			// 1. 在世界中创建不同的实体
			world->add_entity([je::typeinfo::load_from_name("Editor::Name")->val(),
							je::typeinfo::load_from_name("Transform::LocalPosition")->val(),
							je::typeinfo::load_from_name("Transform::LocalRotation")->val(),
							je::typeinfo::load_from_name("Transform::LocalToWorld")->val(),
							je::typeinfo::load_from_name("Transform::LocalToParent")->val(),
							je::typeinfo::load_from_name("Transform::Translation")->val(),
							je::typeinfo::load_from_name("Camera::Clip")->val(),
							je::typeinfo::load_from_name("Camera::Projection")->val(),
							je::typeinfo::load_from_name("Camera::OrthoProjection")->val(),
							je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val(),
							je::typeinfo::load_from_name("Camera::Viewport")->val(),]);
			world->add_entity([je::typeinfo::load_from_name("Editor::Name")->val(),
							je::typeinfo::load_from_name("Transform::LocalPosition")->val(),
							je::typeinfo::load_from_name("Transform::LocalRotation")->val(),
							je::typeinfo::load_from_name("Transform::LocalScale")->val(),
							je::typeinfo::load_from_name("Transform::ChildAnchor")->val(),
							je::typeinfo::load_from_name("Transform::LocalToWorld")->val(),
							je::typeinfo::load_from_name("Transform::LocalToParent")->val(),
							je::typeinfo::load_from_name("Transform::Translation")->val(),
							je::typeinfo::load_from_name("Renderer::Rendqueue")->val(),
							je::typeinfo::load_from_name("Renderer::Shape")->val(),
							je::typeinfo::load_from_name("Renderer::Shaders")->val(),
							je::typeinfo::load_from_name("Renderer::Textures")->val(),]);
			world->add_entity([je::typeinfo::load_from_name("Editor::Name")->val(),
							je::typeinfo::load_from_name("Transform::LocalPosition")->val(),
							je::typeinfo::load_from_name("Transform::LocalRotation")->val(),
							je::typeinfo::load_from_name("Transform::LocalScale")->val(),
							je::typeinfo::load_from_name("Transform::ChildAnchor")->val(),
							je::typeinfo::load_from_name("Transform::LocalToWorld")->val(),
							je::typeinfo::load_from_name("Transform::LocalToParent")->val(),
							je::typeinfo::load_from_name("Transform::Translation")->val(),
							je::typeinfo::load_from_name("Renderer::Rendqueue")->val(),
							je::typeinfo::load_from_name("Renderer::Shape")->val(),
							je::typeinfo::load_from_name("Renderer::Shaders")->val(),
							je::typeinfo::load_from_name("Renderer::Textures")->val(),
							je::typeinfo::load_from_name("Camera::Clip")->val(),
							je::typeinfo::load_from_name("Camera::Projection")->val(),
							je::typeinfo::load_from_name("Camera::OrthoProjection")->val(),
							je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val(),
							je::typeinfo::load_from_name("Camera::Viewport")->val(),]);
			world->add_entity([je::typeinfo::load_from_name("Editor::Name")->val(),
							je::typeinfo::load_from_name("Transform::LocalPosition")->val(),
							je::typeinfo::load_from_name("Transform::LocalRotation")->val(),
							je::typeinfo::load_from_name("Camera::OrthoProjection")->val(),
							je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val(),
							je::typeinfo::load_from_name("Camera::Viewport")->val(),]);
			world->add_entity([je::typeinfo::load_from_name("Editor::Name")->val(),
							je::typeinfo::load_from_name("Transform::LocalPosition")->val(),
							je::typeinfo::load_from_name("Transform::LocalRotation")->val(),
							je::typeinfo::load_from_name("Transform::LocalScale")->val(),
							je::typeinfo::load_from_name("Transform::ChildAnchor")->val(),
							je::typeinfo::load_from_name("Transform::LocalToWorld")->val(),
							je::typeinfo::load_from_name("Camera::OrthoProjection")->val(),
							je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val(),
							je::typeinfo::load_from_name("Camera::Viewport")->val(),]);

			// 2. 添加进上下文中
			context.worlds->add(world);
			// 3. 决定是否清除全部测试世界
			context.count += 1;
			if (context.count % 100 == 0)
			{
				for (let _, w : context.worlds)
					w->close();
				context.worlds->clear();
			}

			return je::gui::FormAction::Nothing;
		}

		for (let _, w : context.worlds)
			w->close();
		context.worlds->clear();
		return je::gui::FormAction::Close;
	}

	public func show()
	{
		using je::gui;

		static let testing = mutable::create(false);

		let open = BeginAttrOpen("内存泄漏检查（世界生命周期）", WindowsAttribute::ImGuiWindowFlags_None);
			Text("这个窗口被用于世界的生命周期循循环是否造成内存泄漏");
			Text("关闭窗口即停止测试，不要重复开启窗口");
		End();

		if (!testing->get)
		{
			testing->set(true);
			launch(_test_co, (test_context{count = 0, worlds = []mut}, testing));
		}

		if (!open)
		{
			testing->set(false);
			return FormAction::Close;
		}
		return FormAction::Nothing;
	}
}