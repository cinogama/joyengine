import woo.std;
import je.gui;
import je;

namespace test::memory_leak::ComponentModify
{
	using test_context = struct {
		e     : je::entity,
		mut count : int
	};
	func _test_co(context: test_context, run: mutable<bool>)
	{
		if (run->get)
		{
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::LocalPosition")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::LocalRotation")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::LocalScale")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::ChildAnchor")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::LocalToWorld")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::LocalToParent")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Transform::Translation")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Renderer::Rendqueue")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Renderer::Shape")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Renderer::Shaders")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Renderer::Textures")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Camera::Clip")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Camera::Projection")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Camera::OrthoProjection")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val());
			context.e->editor::remove_component(je::typeinfo::load_from_name("Camera::Viewport")->val());

			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalPosition")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalRotation")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalScale")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::ChildAnchor")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalToWorld")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalToParent")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::Translation")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Rendqueue")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Shape")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Shaders")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Textures")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::Clip")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::Projection")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::OrthoProjection")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::Viewport")->val());

			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalPosition")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalRotation")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalScale")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::ChildAnchor")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalToWorld")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::LocalToParent")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Transform::Translation")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Rendqueue")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Shape")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Shaders")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Renderer::Textures")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::Clip")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::Projection")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::OrthoProjection")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val());
			context.e->editor::add_component(je::typeinfo::load_from_name("Camera::Viewport")->val());

			context.count += 1;
			context.e->editor::set_name(F"test_memleak_{context.count}");

			return je::gui::FormAction::Nothing;
		}

		context.e->close();
		return je::gui::FormAction::Close;
	}

	public func show()
	{
		using je::gui;

		static let testing = mutable::create(false);

		let open = BeginAttrOpen("内存泄漏检查（组件变更）", WindowsAttribute::ImGuiWindowFlags_None);
			Text("这个窗口被用于测试组件的变更是否造成内存泄漏");
			Text("关闭窗口即停止测试，不要重复开启窗口");
		End();

		if (!testing)
		{
			testing->set(true);
			launch(_test_co, (test_context{
								e = je::world::rend()
										->val()
										->add_entity([je::typeinfo::load_from_name("Editor::Name")->val(),
										je::typeinfo::load_from_name("Transform::LocalPosition")->val(),
										je::typeinfo::load_from_name("Transform::LocalRotation")->val(),
										je::typeinfo::load_from_name("Transform::LocalScale")->val(),
										je::typeinfo::load_from_name("Transform::ChildAnchor")->val(),
										je::typeinfo::load_from_name("Transform::LocalToWorld")->val(),
										je::typeinfo::load_from_name("Transform::LocalToParent")->val(),
										je::typeinfo::load_from_name("Transform::Translation")->val(),
										je::typeinfo::load_from_name("Renderer::Rendqueue")->val(),
										je::typeinfo::load_from_name("Renderer::Shape")->val(),
										je::typeinfo::load_from_name("Renderer::Shaders")->val(),
										je::typeinfo::load_from_name("Renderer::Textures")->val(),
										je::typeinfo::load_from_name("Camera::Clip")->val(),
										je::typeinfo::load_from_name("Camera::Projection")->val(),
										je::typeinfo::load_from_name("Camera::OrthoProjection")->val(),
										je::typeinfo::load_from_name("Camera::PerspectiveProjection")->val(),
										je::typeinfo::load_from_name("Camera::Viewport")->val(),]),
								count = 0,
							  }, testing));
		}

		if (!open)
		{
			testing->set(false);
			return FormAction::Close;
		}
		return FormAction::Nothing;
	}
}