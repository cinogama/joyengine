import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.InputBox;
import builtin.Editor.generic.AskFor;

namespace editor
{
	namespace WorldList
	{
		func show(ref open: bool)
		{
			using je::gui;
			if(!open) return !open;

			Begin("世界列表", WindowsAttribute::ImGuiWindowFlags_MenuBar
							+ WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize, ref open);
				if (BeginListBox("##", 200, 400))
				{
					var worlds = je::universe::current()->editor::worlds_list();
					for (var world : worlds)
					{
						Selectable(world->editor::name() + "##" + world: string);
						world_context_menu(world);
					}
					EndListBox();
				}
			End();

			return !open;
		}

		private func world_context_menu(var world: je::world)
		{
			using je::gui;
			if (BeginPopupContextItem())
			{
				MenuItem(F"世界 {world->editor::name()}", false);
				Separator();
				if (MenuItem(F"删除 {world->editor::name()}"))
				{
					launch(generic::AskFor, "确认删除世界",
											F"确定要删除世界{world->editor::name()}吗？未保存的世界将永久丢失！",
											func(){
												EntityList::set_current_entity(option::none:<je::entity>);
												world->close();
											});
				}
				if (MenuItem("重命名世界"))
				{
					launch(generic::InputBox, "重命名世界",
											F"请输入世界的新名称",
											func(var new_name: string){
												if (new_name == "")
													return; // 输入为空，直接跳过

												world->editor::name(new_name);
											});
				}
				EndPopup();
			}
		}
	}
}
