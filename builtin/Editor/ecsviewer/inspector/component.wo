import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askbox;

import builtin.Editor.ecsviewer.entitycreator;

namespace editor::Inspector::Component
{
    let _type_widget_methods = {}mut: map<je::typeinfo, mut (string, je::native_value)=>void>;
            
    using component_chain = struct{
        m_map:              map<string, component_chain>,
        mut m_component_type:   option<je::typeinfo>,
    };

    func show_component_menu(entity: je::entity, component_type: option<je::typeinfo>)
    {
        using je::gui;

        if (BeginPopupContextItem())
        {
            match (component_type)
            {
            value(comp_type)?
                if (MenuItem(F"移除组件: {comp_type->name()}"))
                    entity->editor::remove_component(comp_type);
            none?
                MenuItemEnabled("移除组件", false);
            }
            Separator();

            if (MenuItem("编辑实体组件"))
                    launch(EntityCreator::show, (EntityCreator::edit_context(entity),));

            EndPopup();
        }
    }

    public func show(cur_entity: option<je::entity>, max_height: real)
    {
        using je::gui;

        static let mut _last_display_entity = option::none: option<je::entity>;

        let _display_entity_changed = 
            _last_display_entity
                =>> \e = cur_entity ->> \ce = e != ce;;
                ->valor(true);

        _last_display_entity = cur_entity;

        BeginChildSize("component_editor", 0., max_height);
            match (cur_entity)
            {
                value(current_entity)?
                {
                    // TODO: 在此处显示一下实体信息
                    let current_component_types = 
                        component_chain{ 
                            m_map = {}mut, 
                            m_component_type = option::none:<je::typeinfo> 
                        };
                    for (let _, component_type : current_entity->editor::get_components_types())
                    {
                        let component_type_name = component_type->name();

                        if (component_type_name->beginwith("Editor::"))
                            // 跳过编辑器组件显示
                            continue;

                        let mut current_types = current_component_types;
                        let scope_names = component_type_name->split("::");

                        // 从根开始，找到最终组件所在的节点
                        for (let _, name: scope_names)
                        {
                            current_types = current_types.m_map->getorset(name, 
                                component_chain{
                                    m_map = {}mut,
                                    m_component_type = option::none:<je::typeinfo>
                                });
                        }

                        current_types.m_component_type = option::value(component_type);
                    }
                    func waklthrow_and_display_components(current_node: component_chain, entity: je::entity, expand: bool)=> void
                    {
                        for (let name, chain: current_node.m_map)
                        {
                            if (expand)
                                SetNextItemOpen(true);
                            let show_child_nodes = TreeNode(name);
                            show_component_menu(entity, chain.m_component_type);
                            if (show_child_nodes)
                            {
                                waklthrow_and_display_components(chain, entity, expand);
                                TreePop();
                            }
                        }

                        // 显示组件内的数据信息
                        match (current_node.m_component_type)
                        {
                        value(type)?
                        {
                            let mut member_count = 0;
                            match (entity->editor::get_component(type))
                            {
                            value(component_addr)?
                            {
                                for (let name, (type, addr) : component_addr->editor::members())
                                {
                                    member_count += 1;
                                    _show_edit_widget(name, type, addr);
                                }

                                if (0 == member_count)
                                    TextDisabled("<此组件没有可编辑字段>");
                            }
                            none?
                                ; // 如果实体出现更新，这里会很麻烦
                            }
                        }
                        none?
                            ; // 啥也不干
                        }
                    }
                    waklthrow_and_display_components(current_component_types, current_entity, _display_entity_changed);
                }
                none?
                    Text("<没有选中可编辑的实体>");

            } // end match
        EndChild();
    }

    private func _register_default_method()
    {
        using je::gui;

        _type_widget_methods[je::typeinfo::float] = 
            func(name: string, addr: je::native_value)
            {
                InputFloat(name, addr->float) ->> \value = addr->set_float(value);;
            };
        _type_widget_methods[je::typeinfo::bool] = 
            func(name: string, addr: je::native_value)
            {
                CheckBox(name, addr->bool) ->> \value = addr->set_bool(value);;
            };
        _type_widget_methods[je::typeinfo::int] = 
            func(name: string, addr: je::native_value)
            {
                 InputInt(name, addr->int) ->> \value = addr->set_int(value);;
            };
        _type_widget_methods[je::typeinfo::float2] = 
            func(name: string, addr: je::native_value)
            {
                InputFloat2(name, addr->float2...) ->> \value = addr->set_float2(value...);;
            };
        _type_widget_methods[je::typeinfo::float3] = 
            func(name: string, addr: je::native_value)
            {
                InputFloat3(name, addr->float3...) ->> \value = addr->set_float3(value...);;
            };
        _type_widget_methods[je::typeinfo::float4] = 
            func(name: string, addr: je::native_value)
            {
                InputFloat4(name, addr->float4...) ->> \value = addr->set_float4(value...);;
            };
        _type_widget_methods[je::typeinfo::quat] = 
            func(name: string, addr: je::native_value)
            {
                InputFloat3(name, addr->euler3...) ->> \value = addr->set_euler3(value...);;
            };
        _type_widget_methods[je::typeinfo::string] = 
            func(name: string, addr: je::native_value)
            {
                InputText(name, addr->string) ->> \value = addr->set_string(value);;
            };
    }
    _register_default_method(); // 此处注册常用默认操作
            

    let _custom_component_member_editor = {}mut: map<string, (string)=>option<string>>;

    public func register_custom_editor(typeflag: string, method: (string)=>option<string>)
    {
        if (_custom_component_member_editor->contain(typeflag))
            je::logwarn(F"重复注册的标签：{typeflag}");

        _custom_component_member_editor->set(typeflag, method);
    }

    func _str2vec2(str: string)
    {
        let x = mutable::create(0.), y = mutable::create(0.);
        str->take_token("(")
            =>> \s = s->take_real();
            =>> \snr = s->take_token(",")
                where s = snr[0], r = x->set(snr[1]);
            =>> \s = s->take_real();
            =>> \snr = s->take_token(")")
                where s = snr[0], r = y->set(snr[1]);
            ;
        return (x->get, y->get);
    }

    // 直接在这里注册一下得了

    // 1. 注册2D阴影形状
    register_custom_editor("je_light2d_block_shape", func(dat: string)
    {
        using je::gui;

        let mut need_update = false;
        let datas = dat->split(";")
            =>> \dat = arr->len == 2 ? [(arr[0], arr[1])] | []
                where arr = dat->split(":");
            ;

        let length = datas
            ->  forall(\data = data[0] == "size";)
            ->  reduce(\l, r = l;)
            ->> \data = data[1]: int;
            ->  valor(datas->len)
            ;

        let mut update_str = "size:";

        match (InputInt("size", length))
        {
        value(mut newsize)?
        {
            if (newsize < 0) newsize = 0;
            need_update = true;
            update_str += newsize: string;
        }
        none?
            update_str += length: string;
        }

        for (let index, (layer, factor) : datas->forall(\d = d[0]!="size";))
        {
            Text(F"{layer}:");      
            SameLine();
            let (posx, posy) = _str2vec2(factor);
            let (new_posx, new_posy) = InputFloat2(F"##factor{index}", posx, posy)->valor((posx, posy));

            if (new_posx != posx || new_posy != posy)
                need_update = true;

            update_str += F";{layer}:({new_posx},{new_posy})";
        }
            
        if (need_update)
            return option::value(update_str);
        return option::none;
    });

    private func _show_edit_widget(name: string, type: je::typeinfo, addr: je::native_value)
    {
        using je::gui;

        if (_type_widget_methods->contain(type))
            _type_widget_methods[type](name, addr);
        else
        {
            // 没有注册的特殊控件，使用底层自带的to_string方法处理
            let member_data = addr->to_string(type);
            if (member_data->beginwith("#"))
            {
                // 这个member需要特殊处理
                Text(name);

                let spec_method = member_data->subto(1, member_data->findfrom("#", 1) - 1);
                match (_custom_component_member_editor->get(spec_method))
                {
                none?
                    TextDisabled(F"未找到编辑{spec_method}的自定义编辑器");
                value(method)?
                    method(member_data->sub(spec_method->len + 2))
                        ->> \update_str = addr->parse(type, F"#{spec_method}#" + update_str);
                        ;
                }
            }
            else
                InputText(name, member_data) 
                    ->> \data_str = addr->parse(type, data_str);;
        }
    }

}
