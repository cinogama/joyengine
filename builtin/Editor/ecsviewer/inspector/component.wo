import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askbox;

import builtin.Editor.ecsviewer.entitycreator;

namespace editor::Inspector::Component
{
    let _type_widget_methods = {}mut: map<je::typeinfo, mut (string, je::native_value)=>void>;
            
    using component_chain = struct{
        m_map:              map<string, component_chain>,
        mut m_component_type:   option<je::typeinfo>,
    };

    func show_component_menu(entity: je::entity, component_type: option<je::typeinfo>)
    {
        using je::gui;

        if (BeginPopupContextItem())
        {
            match (component_type)
            {
            value(comp_type)?
                if (MenuItem(F"移除组件: {comp_type->name()}"))
                    entity->editor::remove_component(comp_type);
            none?
                MenuItemEnabled("移除组件", false);
            }
            Separator();

            if (MenuItem("编辑实体组件"))
                    launch(EntityCreator::show, (EntityCreator::edit_context(entity),));

            EndPopup();
        }
    }

    public func show(cur_entity: option<je::entity>, max_height: real)
    {
        using je::gui;

        static let mut _last_display_entity = option::none: option<je::entity>;

        let _display_entity_changed = 
            _last_display_entity
                ->bind(\e: je::entity = cur_entity->map(\ce: je::entity = e != ce;);)
                ->valor(true);

        _last_display_entity = cur_entity; // 

        BeginChildSize("component_editor", 0., max_height);
            match (cur_entity)
            {
                value(current_entity)?
                {
                    // TODO: 在此处显示一下实体信息
                    let current_component_types = 
                        component_chain{ 
                            m_map = {}mut, 
                            m_component_type = option::none:<je::typeinfo> 
                        };
                    for (let component_type : current_entity->editor::get_components_types())
                    {
                        let component_type_name = component_type->name();

                        if (component_type_name->beginwith("Editor::"))
                            // 跳过编辑器组件显示
                            continue;

                        let mut current_types = current_component_types;
                        let scope_names = component_type_name->split("::");

                        // 从根开始，找到最终组件所在的节点
                        for (let name: scope_names)
                        {
                            current_types = current_types.m_map->getorset(name, 
                                component_chain{
                                    m_map = {}mut,
                                    m_component_type = option::none:<je::typeinfo>
                                });
                        }

                        current_types.m_component_type = option::value(component_type);
                    }
                    func waklthrow_and_display_components(current_node: component_chain, entity: je::entity, expand: bool)=> void
                    {
                        for (let name, chain: current_node.m_map)
                        {
                            if (expand)
                                SetNextItemOpen(true);
                            let show_child_nodes = TreeNode(name);
                            show_component_menu(entity, chain.m_component_type);
                            if (show_child_nodes)
                            {
                                waklthrow_and_display_components(chain, entity, expand);
                                TreePop();
                            }
                        }

                        // 显示组件内的数据信息
                        match (current_node.m_component_type)
                        {
                        value(type)?
                        {
                            let mut member_count = 0;
                            match (entity->editor::get_component(type))
                            {
                            value(component_addr)?
                            {
                                for (let name, (type, addr) : component_addr->editor::members())
                                {
                                    member_count += 1;
                                    _show_edit_widget(name, type, addr);
                                }

                                if (0 == member_count)
                                    TextDisabled("<此组件没有可编辑字段>");
                            }
                            none?
                                ; // 如果实体出现更新，这里会很麻烦
                            }
                        }
                        none?
                            ; // 啥也不干
                        }
                    }
                    waklthrow_and_display_components(current_component_types, current_entity, _display_entity_changed);
                }
                none?
                    Text("<没有选中可编辑的实体>");

            } // end match
        EndChild();
    }

    private func _register_default_method()
    {
        using je::gui;

        _type_widget_methods[je::typeinfo::float] = 
            func(name: string, addr: je::native_value)
            {
                let mut value = 0.; addr->float(ref value);

                if (InputFloat(name, ref value))
                    addr->float(value);
            };
        _type_widget_methods[je::typeinfo::int] = 
            func(name: string, addr: je::native_value)
            {
                let mut value = 0; addr->int(ref value);

                if (InputInt(name, ref value))
                    addr->int(value);
            };
        _type_widget_methods[je::typeinfo::float2] = 
            func(name: string, addr: je::native_value)
            {
                let mut x = 0., mut y = 0.;
                addr->float2(ref x, ref y);

                if (InputFloat2(name, ref x, ref y))
                    addr->float2(x, y);
            };
        _type_widget_methods[je::typeinfo::float3] = 
            func(name: string, addr: je::native_value)
            {
                let mut x = 0., mut y = 0., mut z = 0.;
                addr->float3(ref x, ref y, ref z);

                if (InputFloat3(name, ref x, ref y, ref z))
                    addr->float3(x, y, z);
            };
        _type_widget_methods[je::typeinfo::float4] = 
            func(name: string, addr: je::native_value)
            {
                let mut x = 0., mut y = 0., mut z = 0., mut w = 0.;
                addr->float4(ref x, ref y, ref z, ref w);

                if (InputFloat4(name, ref x, ref y, ref z, ref w))
                    addr->float4(x, y, z, w);
            };
        _type_widget_methods[je::typeinfo::quat] = 
            func(name: string, addr: je::native_value)
            {
                let mut x = 0., mut y = 0., mut z = 0.;
                addr->euler3(ref x, ref y, ref z);

                if (InputFloat3(name, ref x, ref y, ref z))
                    addr->euler3(x, y, z);
            };
        _type_widget_methods[je::typeinfo::string] = 
            func(name: string, addr: je::native_value)
            {
                let mut x = "";
                addr->string(ref x);

                if (InputText(name, ref x))
                    addr->string(x);
            };
    }
    _register_default_method(); // 此处注册常用默认操作
            
    private func _show_edit_widget(name: string, type: je::typeinfo, addr: je::native_value)
    {
        using je::gui;

        if (_type_widget_methods->contain(type))
            _type_widget_methods[type](name, addr);
        else
        {
            // 没有注册的特殊控件，使用底层自带的to_string方法处理
            let mut data_str = addr->to_string(type);

            if (InputText(name, ref data_str))
                addr->parse(type, data_str);
        }
    }

}
