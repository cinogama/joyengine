import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askfor;
import builtin.Editor.generic.form.msgbox;

import worldcreator;

import builtin.Editor.project.config;

namespace editor::WorldList
{
    private func menu()
    {
        using je::gui;
        if (BeginMenuBar())
        {
            if (MenuItem("创建新世界"))
                launch(WorldCreator::show, (WorldCreator::create_context(),));

            EndMenuBar();
        }
    }

    func show(ref open: bool)
    {
        using je::gui;
        if(!open) return FormAction::Close;

        Begin("世界列表", WindowsAttribute::ImGuiWindowFlags_MenuBar
                        + WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize, ref open);
            menu();
            if (BeginListBox("##", 200.0, 400.0))
            {
                let worlds = je::universe::current()->editor::worlds_list();
                for (let world : worlds)
                {
                    if (Selectable(world->editor::name() + "##" + world: string))
                    {
                        match (je::world::rend())
                        {
                            value(rend_world)?
                                if (rend_world != world)
                                    launch(generic::AskFor, ("切换渲染世界",
                                                F"即将切换到{world->editor::name()}，是否继续？",
                                                \=world->rend();));
                            none?
                                launch(generic::AskFor, ("切换渲染世界",
                                            F"即将切换到{world->editor::name()}，是否继续？",
                                            \=world->rend();));
                        }
                    }
                    context_menu(world);
                }
                EndListBox();
            }
        End();

        if (!open)
            return FormAction::Close;
        return FormAction::Nothing;
    }

    private func context_menu(world: je::world)
    {
        using je::gui;
        if (BeginPopupContextItem())
        {
            MenuItem(F"世界 {world->editor::name()}", false);
            Separator();
            if (MenuItem(F"删除 {world->editor::name()}"))
            {
                if (je::world::rend()->val() == world)
                    // 不允许删除渲染中的世界
                    launch(generic::MsgBox, ("删除世界失败",
                                            "不能删除正在渲染的世界"));
                else
                {
                    let delete_world_form = 
                        \ = generic::AskFor("确认删除世界",
                                F"确定要删除世界{world->editor::name()}吗？未保存的世界将永久丢失！",
                                func(){
                                    EntityList::set_current_entity(option::none);
                                    world->close();
                                });;
                    let save_world_form = 
                        \ saving_path: string = generic::AskFor("确认关闭世界",
                                F"确定要关闭世界{world->editor::name()}吗？世界将被保存到默认路径！",
                                func(){
                                    EntityList::set_current_entity(option::none);
                                    world->close();
                                    std::panic("TODO: savine not impl");
                                });;
                    match(Project::GetCurrentProject()->FindWorld(world))
                    {
                    value(proj_world)?
                        proj_world.path
                            ->map(\p: string = launch(save_world_form, (p,));) // 如果当前项目有路径，则询问是否关闭
                            ->or(\ = launch(delete_world_form, ()););    
                    none?
                        launch(delete_world_form, ());
                    }
                    
                }
            }
            if (MenuItem("重命名世界"))
                launch(generic::InputBox, ("重命名世界",
                                        F"请输入世界的新名称", "",
                                        func(new_name: string){
                                            if (new_name == "")
                                                return; // 输入为空，直接跳过
                                            world->editor::name(new_name);
                                        }));
            if (MenuItem("变更系统"))
            {
                // 在此处打开世界变更界面，山寨一下实体组件变更界面
                launch(WorldCreator::show, (WorldCreator::edit_context(world),));
            }
            EndPopup();
        }
    }
}
