import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askbox;
import builtin.Editor.generic.form.msgbox;

import worldcreator;

import builtin.Editor.project.config;

namespace editor::WorldList
{
    public func SwitchEditingWorld(aim_world: je::world)
    {
        je::world::rend()->map(\old: je::world = old->editor::remove_system(Project::GetCurrentProject().editor_system););

        aim_world->rend();
        aim_world->add_system(Project::GetCurrentProject().editor_system);
    }

    private func menu()
    {
        using je::gui;
        if (BeginMenuBar())
        {
            if (MenuItem("创建新世界"))
                launch(WorldCreator::show, (WorldCreator::create_context(),));

            EndMenuBar();
        }
    }

    public func show(ref open: bool)
    {
        using je::gui;

        Begin("世界列表", WindowsAttribute::ImGuiWindowFlags_MenuBar
                        + WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize, ref open);
            menu();
            if (BeginListBox("##", 200.0, 400.0))
            {
                let worlds = je::universe::current()->editor::worlds_list;
                for (let world : worlds)
                {
                    if (Selectable(world->editor::name + "##" + world: string, 
                            je::world::rend()->map(\rw:je::world = rw == world;)
                                             ->valor(false)))
                    {
                        match (je::world::rend())
                        {
                            value(rend_world)?
                                if (rend_world != world)
                                    generic::askbox("切换渲染世界",
                                                F"即将切换到{world->editor::name}，是否继续？",
                                                \sure: bool = sure?SwitchEditingWorld(world)|nil;);
                            none?
                                generic::askbox("切换渲染世界",
                                            F"即将切换到{world->editor::name}，是否继续？",
                                            \sure: bool = sure?SwitchEditingWorld(world)|nil;);
                        }
                    }
                    DragItem("JEEDITOR_WORLD", world: string, \=Text(F"World:{world->editor::name}"););
                    context_menu(world);
                }
                EndListBox();
            }
        End();
    }

    private func context_menu(world: je::world)
    {
        using je::gui;
        if (BeginPopupContextItem())
        {
            MenuItem(F"世界 {world->editor::name}", false);
            Separator();
            if (MenuItem(F"删除 {world->editor::name}"))
            {
                if (je::world::rend()->val == world)
                    // 不允许删除渲染中的世界
                    launch(generic::MsgBox, ("删除世界失败",
                                            "不能删除正在渲染的世界"));
                else
                {
                    let delete_world_form = 
                        \ = generic::askbox("确认删除世界",
                                F"确定要删除世界{world->editor::name}吗？未保存的世界将永久丢失！",
                                func(sure: bool){
                                    if (!sure) return;
                                    EntityList::set_current_entity(option::none);
                                    Project::GetCurrentProject()->CloseWorld(world);
                                });;
                    let save_world_form = 
                        \ proj_world: Project::World, saving_path: string = 
                            generic::checkbox("确认关闭世界",
                                F"正在关闭世界{world->editor::name}，是否需要保存？世界将被保存到{saving_path}！",
                                func(check: generic::CheckResult){
                                    if (check == generic::CheckResult::YES)
                                    {
                                        EntityList::set_current_entity(option::none);
                                        proj_world->Save();
                                        Project::GetCurrentProject()->CloseWorld(world);
                                    }
                                    else if (check == generic::CheckResult::NO)
                                        Project::GetCurrentProject()->CloseWorld(world);
                                });;
                    match(Project::GetCurrentProject()->FindWorld(world))
                    {
                    value(proj_world)?
                        proj_world.path
                            ->map(\p: string = save_world_form(proj_world, p);) // 如果当前项目有路径，则询问是否关闭
                            ->or(\ = delete_world_form(););    
                    none?
                        delete_world_form();
                    }
                    
                }
            }
            if (MenuItem("重命名世界"))
                launch(generic::InputBox, ("重命名世界",
                                        F"请输入世界的新名称", "",
                                        func(new_name: string){
                                            if (new_name == "")
                                                return; // 输入为空，直接跳过
                                            world->editor::name(new_name);
                                        }));
            if (MenuItem("变更系统"))
            {
                // 在此处打开世界变更界面，山寨一下实体组件变更界面
                launch(WorldCreator::show, (WorldCreator::edit_context(world),));
            }
            EndPopup();
        }
    }
}
