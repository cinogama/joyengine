import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askfor;

import entitycreator;

namespace editor::EntityList
{
    // 当前世界列表是否显示有当前选中的实体，如果没有就重设当前实体，防止错误的显示
    private let mut _has_selected_entity = false;

    private func menu()
    {
        using je::gui;
        if (BeginMenuBar())
        {
            if (MenuItem("创建新实体"))
                launch(EntityCreator::show, (EntityCreator::create_context(),));

            EndMenuBar();
        }
    }

    private func context_menu(entity: je::entity)
    {
        using je::gui;
        if (BeginPopupContextItem())
        {
            MenuItem(F"实体 {entity->editor::chunkinfo()}", false);
            Separator();
            if (MenuItem(F"删除 {entity->editor::name()}"))
            {
                launch(generic::AskFor, ("删除实体",
                                        F"确认要删除实体{entity->editor::name()}吗？",
                                        \ = entity->close();));
            }
            if (MenuItem("重命名"))
            {
                launch(generic::InputBox, ("重命名实体",
                                        F"请输入新名称",
                                        entity->editor::name(),
                                        \text: string = entity->editor::name(text);));
            }
            if (MenuItem("编辑组件"))
            {
                launch(EntityCreator::show, (EntityCreator::edit_context(entity),));
            }
            EndPopup();
        }
    }

    func show(ref open: bool)
    {
        using je::gui;
        if(!open) return FormAction::Close;

        _has_selected_entity = false;
        Begin("层级面板", WindowsAttribute::ImGuiWindowFlags_MenuBar
                        + WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                    , ref open);
            menu();
                
            match(je::world::rend())
            {
                value(current_world)?
                {
                    let top_entity_walker = current_world->editor::top_entity_iter();
                    if (_display_entity_with_iter(top_entity_walker) == 0)
                        Text("当前世界没有实体");
                } 
                none?
                    ; // do nothing
            }  
                
        End();
        if (!_has_selected_entity)
            set_current_entity(option::none:<je::entity>);
                
        if (!open)
            return FormAction::Close;
        return FormAction::Nothing;
    }

    func set_current_entity(current_entity: option<je::entity>)
    {
        je::entity::editor::set_editing(current_entity);
    }

    func get_current_entity()
    {
        return je::entity::editor::editing();
    }

    // 实体的UID表，根据uid获取实体实例
    private let mut uid_entity_map = {}: map<string, je::entity>;

    // 检查给定checking实体是否是cur实体的祖实体
    private func is_ancestor(cur: je::entity, checking: je::entity)
    {
        match(checking->editor::get_uid())
        {
        value(uid)?
        {
            if (cur->editor::get_uid()
                   ->map(\cuidv: string = puid->map(\puidv: string = puidv == cuidv;)
                        where puid = checking->editor::get_uid();)
                   ->reduce()
                   ->valor(false))
                // 当前实体和目标实体相同，直接返回
                return false;

            let mut e = option::value(cur);
            while(true)
            {
                match (e->map(\ent: je::entity = ent->editor::get_parent_uid();)->reduce())
                {
                value(current_uid)?
                    if (current_uid == uid)
                        return true;
                    else
                        e = e->map(\ent: je::entity = ent->editor::get_uid();)
                             ->reduce()
                             ->map(\puid: string = uid_entity_map->get(puid);)
                             ->reduce();
                none?
                    return false;
                }
            }
        }
        none?
            // 指定的祖实体没有锚点，肯定没有子实体
            return false;
        }
    }

    private func set_parent(child: je::entity, parent: je::entity)
    {
        using je::gui;

        static let ChildAnchor   = je::typeinfo("Transform::ChildAnchor")->val(),
                   LocalToParent = je::typeinfo("Transform::LocalToParent")->val(),
                   LocalToWorld  = je::typeinfo("Transform::LocalToWorld")->val();

        if (is_ancestor(parent, child))
        {
            // 如果正在设置的子实体是父实体的祖先节点，需要先调整顺序
            /*
            ?       ? --- P
            |       |
            C   =>  C
            |  
            P
            */
            // 如果子实体此时有父节点，那么就将目标父节点挂载子节点上，否则就把父节点设置为L2W
            child->editor::get_parent_uid()
                 ->map(\uid: string = parent->editor::set_parent_with_uid(uid, true);)
                 ->or(func(){
                    if (parent->editor::get_component(LocalToParent)->has())
                        parent->editor::remove_component(LocalToParent);
                    if (!parent->editor::get_component(LocalToWorld)->has())
                        parent->editor::add_component(LocalToWorld);
                    return true;
                 });
        }
        child->editor::set_parent(parent, true);
    }
    private func _display_entity_with_iter(entity_iter: je::entity::editor::entity_iter)=> int
    {
        using je::gui;

        let mut current_uid_entity_map = {}: map<string, je::entity>;
        
        let mut display_count = 0;
        for (let entity : entity_iter)
        {
            // 如果当前实体有uid组件，那么添加一下
            entity
                ->editor::get_uid()
                ->map(\x: string = current_uid_entity_map[x] = entity;);

            display_count += 1;
            
            // 如果实体有 Editor::Invisable 这个组件，就跳过显示
            static let INVISABLE = je::typeinfo("Editor::Invisable")->val();
            //if (entity->editor::get_component(INVISABLE)->has())
            //    continue;

            let mut entity_name = entity->editor::name();
            if (entity_name == "")
                entity_name = "<匿名实体>";

            let mut attribute = 
                TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnArrow 
                + TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnDoubleClick 
                + TreeNodeAttribute::ImGuiTreeNodeFlags_SpanAvailWidth;

            match (get_current_entity())
            {
                value(selected_entity)?
                    if (selected_entity == entity)
                    {
                        _has_selected_entity = true;
                        attribute += TreeNodeAttribute::ImGuiTreeNodeFlags_Selected;
                    }
                none?
                    ; // 没有选中的实体，啥也不干
            }

            let shown_child = TreeNodeEx(F"{entity_name}##{entity->editor::chunkinfo()}", attribute);
            // 支持拖动和接受，用于快速变更子实体
            if (BeginDragDropSource())
            {
                SetDragDropPayload("JEDITOR_ENTITY_INSTANCE", entity->editor::chunkinfo());
                    Text(F"Entity: {entity->editor::name()}");
                EndDragDropSource();
            }
            if(BeginDragDropTarget())
            {
                let mut drag_entity_chunkinfo = "";
                if (AcceptDragDropPayload("JEDITOR_ENTITY_INSTANCE", ref drag_entity_chunkinfo))
                {
                    if (drag_entity_chunkinfo != entity->editor::chunkinfo())
                    {
                        // 自己拖到自己身上肯定就寄了，只处理不同的实体。
                        je::entity::editor::find_entity_by_chunkinfo(drag_entity_chunkinfo)
                            ->map(\e: je::entity = set_parent(e, entity););
                    }
                }
                EndDragDropTarget();
            }

            context_menu(entity);
            if (IsItemClicked() && !IsItemToggledOpen())
            {
                _has_selected_entity = true; // 也在这里设置一下
                set_current_entity(option::value(entity));
            }

            if(shown_child)
            {
                _display_entity_with_iter(entity_iter->childs());
                TreePop();
            }
        }
        uid_entity_map = current_uid_entity_map;

        return display_count;
    }
}
