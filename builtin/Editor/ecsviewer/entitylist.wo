import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.InputBox;
import builtin.Editor.generic.AskFor;

namespace editor
{
	namespace EntityList
	{
		func show(ref open: bool)
		{
            using je::gui;
            if(!open) return !open;

			Begin("层级面板", WindowsAttribute::ImGuiWindowFlags_MenuBar
                            + WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize
                        , ref open);

                match(je::world::rend())
                {
                    option::value(current_world)?
                    {
                        var top_entity_walker = current_world->editor::top_entity_iter();
                        if (_display_entity_with_iter(top_entity_walker) == 0)
                            Text("当前世界没有实体");
                    } 
                    option::none?
                        ; // do nothing
                }  
                
            End();
            return !open;
		}

        private var _current_entity = option::none:<je::entity>;

        func set_current_entity(var current_entity: option<je::entity>)
        {
            _current_entity = current_entity;
        }

        func get_current_entity()
        {
            return _current_entity;
        }

        private func _display_entity_with_iter(var entity_iter: je::entity::editor::entity_iter): int
        {
            using je::gui;

            var display_count = 0;
            for (var entity : entity_iter)
            {
                display_count += 1;

                var entity_name = entity->editor::name();
                if (entity_name == "")
                    entity_name = "<匿名实体>";

                var attribute = 
                  TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnArrow 
                + TreeNodeAttribute::ImGuiTreeNodeFlags_OpenOnDoubleClick 
                + TreeNodeAttribute::ImGuiTreeNodeFlags_SpanAvailWidth;

                var shown_child = TreeNodeEx(F"{entity_name}##{entity->editor::chunk_info()}", attribute);
                if (IsItemClicked() && !IsItemToggledOpen())
                    set_current_entity(option::value(entity));

                if(shown_child)
                {
                    _display_entity_with_iter(entity_iter->childs());
                    TreePop();
                }
            }
            return display_count;
        }
	}
}
