import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askbox;
import builtin.Editor.generic.form.msgbox;

namespace editor::EntityCreator
{
    private let icon_image = je::graphic::texture::load(F"{std::exepath()}builtin/Editor/icon/Component.png");
    using EntityContext = struct {
        mut name  : string,
        edit_entity      : option<je::entity>,
        has_append_types : vec<je::typeinfo>,
        not_append_types : vec<je::typeinfo>,
    };
    
    public func edit_context(entity: je::entity)=> EntityContext
    {
        let context = EntityContext{
            name = entity->editor::name,
            edit_entity = option::value(entity),
            has_append_types = []mut,
            not_append_types = je::typeinfo::editor::get_all_components_types()->tovec,
        };

        let comps = []mut: typeof(context.not_append_types);
        context.not_append_types->swap(comps);

        // 不显示所有编辑器组件
        for (let comp : comps)
            if (!comp->name()->beginwith("Editor::"))
                context.not_append_types->add(comp);

        // 把当前已有的组件处理一下
        let all_comps = context.not_append_types->dup();
        for (let comp : all_comps)
            if (entity->editor::get_component(comp)->has)
                add_components(context, comp->name);

        return context;
    }

    public func create_context()=> EntityContext
    {
        let context = EntityContext{
            name = "New entity",
            edit_entity = option::none,
            has_append_types = []mut,
            not_append_types = je::typeinfo::editor::get_all_components_types()->tovec,
        };

        let comps = []mut: typeof(context.not_append_types);
        context.not_append_types->swap(comps);

        // 不显示所有编辑器组件
        for (let comp : comps)
            if (!comp->name->beginwith("Editor::"))
                context.not_append_types->add(comp);

        return context;
    }

    func show_component(typename: string)
    {
        using je::gui;

        BeginGroup();
            PushIDStr(typename);
                ImageButtonScale(icon_image, 0.075);
            PopID();
            if (BeginDragDropSource())
            {
                SetDragDropPayload("JEDITOR_COMPONENT_TYPE", typename);
                    Text(F"Component: {typename}");
                EndDragDropSource();
            }

            SameLine();
            Text(typename);
        EndGroup();
    }

    func show_append_components(context: EntityContext, width: real)
    {
        using je::gui;
        BeginChildSize("append_components", width, 0.);
            Text("新实体组件");
            for(let component_type : context.has_append_types)
                show_component(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            let mut data = "";
            if (AcceptDragDropPayload("JEDITOR_COMPONENT_TYPE", ref data))
            {
                // 有组件被拖动至此
                add_components(context, data);
            }
            EndDragDropTarget();
        }
    }

    func show_usable_components(context: EntityContext, width: real)
    {
        using je::gui;
        BeginChildSize("usable_components", width, 0.);
            Text("可用组件");
            for(let component_type : context.not_append_types)
                show_component(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            let mut data = "";
            if (AcceptDragDropPayload("JEDITOR_COMPONENT_TYPE", ref data))
            {
                // 有组件被拖动至此
                remove_components(context, data);
            }
            EndDragDropTarget();
        }
    }

    func reset_context_cur_components(context: EntityContext)
    {
        for (let append_component : context.has_append_types)
            context.not_append_types->add(append_component);
        context.has_append_types->clear();
    }
    func remove_components(context: EntityContext, type_name: string)
    {
        match(je::typeinfo::load_from_name(type_name))
        {
            value(type)?
                if (context.not_append_types->find(type) == -1)
                {
                    context.not_append_types->add(type);
                    context.has_append_types->remove(context.has_append_types->find(type));
                }
            none?
                je::logfatal("Cannot find component type named: ", type_name);
        }
        
    }
    func add_components(context: EntityContext, type_name: string)
    {
        match(je::typeinfo::load_from_name(type_name))
        {
            value(type)?
                if (context.has_append_types->find(type) == -1)
                {
                    context.has_append_types->add(type);
                    context.not_append_types->remove(context.not_append_types->find(type));
                }
            none?
                je::logfatal("Cannot find component type named: ", type_name);
        }
    }

    func menu_bar(context: EntityContext)=> bool
    {
        using je::gui;
        let mut create_entity = false;

        if (BeginMenuBar())
        {
            let menu_button_text = context.edit_entity->has ? "应用" | "创建";

            if (MenuItemEnabled(menu_button_text, context.name != "" 
                            && !context.has_append_types->empty))
            {
                // TODO: 实例化实体，至少要有一个组件
                create_entity = true;
            }
            if (BeginMenu("常用实体"))
            {
                if (MenuItem("重置列表"))
                    reset_context_cur_components(context);

                Separator();

                if (MenuItem("带有Transform的空实体"))
                {
                    reset_context_cur_components(context);
                    add_components(context, "Transform::LocalPosition");
                    add_components(context, "Transform::LocalRotation");
                    add_components(context, "Transform::LocalScale");
                    add_components(context, "Transform::LocalToWorld");
                    add_components(context, "Transform::Translation");
                }

                if (MenuItem("完整渲染实体"))
                {
                    reset_context_cur_components(context);
                    add_components(context, "Transform::LocalPosition");
                    add_components(context, "Transform::LocalRotation");
                    add_components(context, "Transform::LocalScale");
                    add_components(context, "Transform::LocalToWorld");
                    add_components(context, "Transform::Translation");
                    add_components(context, "Renderer::Shape");
                    add_components(context, "Renderer::Shaders");
                    add_components(context, "Renderer::Textures");
                }

                if (MenuItem("摄像机（透视）"))
                {
                    reset_context_cur_components(context);
                    add_components(context, "Transform::LocalPosition");
                    add_components(context, "Transform::LocalRotation");
                    add_components(context, "Transform::LocalScale");
                    add_components(context, "Transform::LocalToWorld");
                    add_components(context, "Transform::Translation");
                    add_components(context, "Camera::Clip");
                    add_components(context, "Camera::Projection");
                    add_components(context, "Camera::PerspectiveProjection");
                    add_components(context, "Camera::Viewport");
                }

                if (MenuItem("摄像机（平行）"))
                {
                    reset_context_cur_components(context);
                    add_components(context, "Transform::LocalPosition");
                    add_components(context, "Transform::LocalRotation");
                    add_components(context, "Transform::LocalScale");
                    add_components(context, "Transform::LocalToWorld");
                    add_components(context, "Transform::Translation");
                    add_components(context, "Camera::Clip");
                    add_components(context, "Camera::Projection");
                    add_components(context, "Camera::OrthoProjection");
                    add_components(context, "Camera::Viewport");
                }

                EndMenu();
            }

            EndMenuBar();
        }

        return create_entity;
    }

    public func show(context: EntityContext)
    {
        using je::gui;

        let mut open = true;
        BeginAttrOpen(context.edit_entity->has ? F"编辑实体{context.edit_entity->val->editor::name}##{JobID()}"
            | F"创建新实体##{JobID()}", WindowsAttribute::ImGuiWindowFlags_MenuBar, ref open);
   
            if (menu_bar(context))
            {
                match(context.edit_entity)
                {
                value(e)?
                {
                    // TODO: 在此实现实体的组件编辑

                    // 0. 获取准备新增的组件
                    let add_components = context.has_append_types->forall(
                            \type: je::typeinfo = !e->editor::get_component(type)->has;);
                    // 1. 获取即将移除的组件
                    let removing_components = context.not_append_types->forall(
                            \type: je::typeinfo = e->editor::get_component(type)->has;);

                    add_components->trans(\t: je::typeinfo = e->editor::add_component(t););
                    removing_components->trans(\t: je::typeinfo = e->editor::remove_component(t););

                    e->editor::set_name(context.name);
                }
                none?
                    match(je::world::rend())
                    {
                        value(rworld)?
                        {
                            rworld->add_entity(context.has_append_types->toarray)
                                  ->editor::set_name(context.name);
                        }
                        none?
                            launch(generic::MsgBox, ("创建实体失败", "没有找到渲染中的世界",));
                    } 
                }
                // 选择创建实体，开始实例化！
               
                open = false;
            }

            InputText("名称", ref context.name);

            let mut available_width = 0.;
            GetContentRegionAvail(ref available_width, 0./* 不关心高度 */);

            show_append_components(context, available_width / 2.);
            SameLine();
            show_usable_components(context, available_width / 2.);
        End();

        if (!open)
            return FormAction::Close;
        return FormAction::Nothing;
    }
}
