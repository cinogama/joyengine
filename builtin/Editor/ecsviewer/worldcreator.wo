import woo.std;
import je.gui;
import je;

import builtin.Editor.generic.form.inputbox;
import builtin.Editor.generic.form.askfor;
import builtin.Editor.generic.form.msgbox;

import creatorcontext;

namespace editor::WorldCreator
{
    private let icon_image = je::graphic::texture(F"{std::exepath()}builtin/Editor/icon/System.png")->val();

    using WorldContext  = struct {
        name  : string,
        edit_world : option<je::world>,
        has_append_types : array<je::typeinfo>,
        has_active_types : array<je::typeinfo>,
        not_append_types : array<je::typeinfo>,
    };

    func create_context()=> WorldContext
    {
        let context = WorldContext{
            name = "New world",
            edit_world = option::none,
            has_append_types = [],
            has_active_types = [],
            not_append_types = je::typeinfo::editor::get_all_systems_types(),
        };

        let comps = context.not_append_types;
        context.not_append_types = [];
    
        for (let comp : comps)
            // 不显示所有编辑器系统
            if (!comp->name()->beginwith("Editor::"))
                if (comp->name()->beginwith("Translation::"))
                    // 默认添加Translation相关系统
                    context.has_active_types->add(comp);
                else
                    context.not_append_types->add(comp);

        return context;
    }

    func edit_context(world: je::world)=> WorldContext
    {
        let context = WorldContext{
            name = world->editor::name(),
            edit_world = option::value(world),
            has_append_types = [],
            has_active_types = [],
            not_append_types = je::typeinfo::editor::get_all_systems_types(),
        };

        let comps = context.not_append_types;
        context.not_append_types = [];
    
        for (let comp : comps)
            // 不显示所有编辑器系统
            if (!comp->name()->beginwith("Editor::"))
                if (comp->name()->beginwith("Translation::"))
                    context.not_append_types->add(comp);

        // 处理一下已经创建/添加的系统
        for (let actived_sys : world->editor::get_systems_types())
            active_systems(context, actived_sys->name());

        match(Project::GetCurrentProject()->FindWorld(world))
        {
        value(proj_world)?
            for (let actived_sys : proj_world.runtime_systems)
                append_systems(context, actived_sys->name());
        none?
            ;
        }
        return context;
    }

    func show_system(typename: string)
    {
        using je::gui;

        BeginGroup();
            PushID(typename);
                ImageButtom(icon_image, 0.075);
            PopID();
            if (BeginDragDropSource())
            {
                SetDragDropPayload("JEDITOR_SYSTEM_TYPE", typename);
                    Text(F"System: {typename}");
                EndDragDropSource();
            }

            SameLine();
            Text(typename);
        EndGroup();
    }

    func unuse_systems(context: WorldContext, type_name: string)
    {
        match(je::typeinfo(type_name))
        {
            value(type)?
                if (context.not_append_types->find(type) == -1)
                {
                    context.not_append_types->add(type);
                    context.has_append_types->remove(context.has_append_types->find(type));
                    context.has_active_types->remove(context.has_active_types->find(type));
                }
            none?
                je::logfatal("Cannot find system type named: ", type_name);
        }
        
    }
    func active_systems(context: WorldContext, type_name: string)
    {
        match(je::typeinfo(type_name))
        {
            value(type)?
                if (context.has_active_types->find(type) == -1)
                {
                    context.has_active_types->add(type);
                    context.not_append_types->remove(context.not_append_types->find(type));
                    context.has_append_types->remove(context.has_append_types->find(type));
                }
            none?
                je::logfatal("Cannot find system type named: ", type_name);
        }
    }
    func append_systems(context: WorldContext, type_name: string)
    {
        match(je::typeinfo(type_name))
        {
            value(type)?
                if (context.has_append_types->find(type) == -1)
                {
                    context.has_append_types->add(type);
                    context.not_append_types->remove(context.not_append_types->find(type));
                    context.has_active_types->remove(context.has_active_types->find(type));
                }
            none?
                je::logfatal("Cannot find system type named: ", type_name);
        }
    }

    func show_active_systems(context: WorldContext, width: real, height: real)
    {
        using je::gui;
        BeginChild("active_system", width, height);
            Text("环境系统（编辑/运行时生效）");
            for(let component_type : context.has_active_types)
                show_system(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            let mut data = "";
            if (AcceptDragDropPayload("JEDITOR_SYSTEM_TYPE", ref data))
            {
                // 有组件被拖动至此
                active_systems(context, data);
            }
            EndDragDropTarget();
        }
    }

    func show_append_systems(context: WorldContext, width: real, height: real)
    {
        using je::gui;
        BeginChild("append_system", width, height);
            Text("运行时系统（运行时生效）");
            for(let component_type : context.has_append_types)
                show_system(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            let mut data = "";
            if (AcceptDragDropPayload("JEDITOR_SYSTEM_TYPE", ref data))
            {
                // 有组件被拖动至此
                append_systems(context, data);
            }
            EndDragDropTarget();
        }
    }

    func show_usable_systems(context: WorldContext, width: real)
    {
        using je::gui;
        BeginChild("usable_system", width, 0.);
            Text("可用系统");
            for(let component_type : context.not_append_types)
                show_system(component_type->name());
        EndChild();

        if(BeginDragDropTarget())
        {
            let mut data = "";
            if (AcceptDragDropPayload("JEDITOR_SYSTEM_TYPE", ref data))
            {
                // 有组件被拖动至此
                unuse_systems(context, data);
            }
            EndDragDropTarget();
        }
    }

    func menu_bar(context: WorldContext)
    {
        using je::gui;

        let mut create_world = false;

        if (BeginMenuBar())
        {
            if (context.edit_world->has())
            {
                if (MenuItem("更新", context.name != ""))
                    create_world = true;
            }
            else if (MenuItem("创建", context.name != ""))
               create_world = true;
            
            EndMenuBar();
        }

        return create_world;
    }

    func show(context: WorldContext)
    {
        using je::gui;

        let mut open = true;
        if (context.edit_world->has())
            Begin("编辑世界##{JobID()}", WindowsAttribute::ImGuiWindowFlags_MenuBar, ref open);
        else
            Begin("创建新世界##{JobID()}", WindowsAttribute::ImGuiWindowFlags_MenuBar, ref open);

            if (menu_bar(context))
            {
                match(context.edit_world)
                {
                    none?
                    {
                        let project_world = Project::GetCurrentProject()->CreateWorld();
                        let created_world = project_world.instance->val();

                        created_world->editor::name(context.name);

                        for (let active_sys : context.has_active_types)
                            created_world->add_system(active_sys);

                        for (let active_sys : context.has_append_types)
                            project_world.runtime_systems->add(active_sys);
                    }
                    value(world)?
                    {
                        match(Project::GetCurrentProject()->FindWorld(world))
                        {
                        value(project_world)?
                            project_world.runtime_systems = context.has_append_types;
                        none?
                            ;
                        }
                        
                        let active_systems = world->editor::get_systems_types();

                        // 当前世界中还没有这个系统，立即添加
                        context.has_active_types
                            ->forall(\t: je::typeinfo=active_systems->find(t) == -1;)
                            ->trans(\t: je::typeinfo=world->add_system(t););

                        // 系统被移除
                        active_systems
                            ->forall(\t: je::typeinfo=context.has_active_types->find(t) == -1;)
                            ->trans(\t: je::typeinfo=world->editor::remove_system(t););
                        world->editor::name(context.name);
                    }
                }
                open = false;
            }

            InputText("名称", ref context.name);

            let mut available_width = 0., mut available_height = 0.;
            GetContentRegionAvail(ref available_width, ref available_height);

            BeginGroup();
                show_append_systems(context, available_width / 2., available_height * 2. / 3.);
                show_active_systems(context, available_width / 2., available_height / 3.);
            EndGroup();

            SameLine();
            show_usable_systems(context, available_width / 2.);
        End(); // End of Form

        if (!open)
            return FormAction::Close;
        return FormAction::Nothing;
    }
}
