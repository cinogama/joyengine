import je;
import je.gui;

import pkg.image;

import builtin.Editor.generic.form.msgbox;

using je;
using je::gui;
using generic;

namespace drawpannel
{
    alias color4_t = (real, real, real, real);

    func save_texture_to_path(tex: graphic::texture, path: string)
    {
        let (w, h) = tex->size();
        let saving_img = image::create(w, h);

        for (let mut x = 0; x < w; x += 1)
            for (let mut y = 0; y < h; y += 1)
                saving_img->setpix((x, y), tex->pix((x, y))->get_color);

        let result = saving_img->save(path);
        if (!result)
            msgbox("图像保存失败", F"无法保存图像到{path}");
        return result;
    }

    using DrawContextT = struct{
        mut scale: real,
        mut offset_x: real,
        mut offset_y: real,
        mut drawtool: DrawToolT,

        mut mousedown: bool,

        mut usecolor: color4_t,
        mut maincolor: color4_t,
        mut subcolor: color4_t,

        edited_textures: map<graphic::texture, void>, // TODO: 图片的历史记录也放在这里
        // 傻逼键盘迟早得换！
    };

    func _delta_wheel()
    {
        static let mut _w = input::wheel();
        let _nw = input::wheel();
        let delta = _nw - _w;
        _w = _nw;
        return delta;
    }

    using Nothing = ()
    {
        func OnMouseDown(self: Nothing, target: graphic::texture, color: color4_t, pos: (int, int))
        {
        }
        func OnMouseHold(self: Nothing, target: graphic::texture, color: color4_t, pos: (int, int))
        {
        }
        func OnMouseUp(self: Nothing, target: graphic::texture, color: color4_t, pos: (int, int))
        {
        }
    }
    using Pen = ()
    {
        func OnMouseDown(self: Pen, target: graphic::texture, color: color4_t, pos: (int, int))
        {
        }
        func OnMouseHold(self: Pen, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            let (px, py) = pos;
            let (w, h) = target->size;

            if (px >= 0 && px < w && py >= 0 && py < h)
                target->pix(pos)->set_color(color);
        }
        func OnMouseUp(self: Pen, target: graphic::texture, color: color4_t, pos: (int, int))
        {
        }
    }

    using DrawToolT = struct{
        name: string,
        on_mouse_down: (graphic::texture, color4_t, (int, int))=>void,
        on_mouse_hold: (graphic::texture, color4_t, (int, int))=>void,
        on_mouse_up: (graphic::texture, color4_t, (int, int))=>void,
    }
    {
        func create<T>(name: string, instance: T)
        {
            return DrawToolT{
                name = name,
                on_mouse_down = \t: graphic::texture, c: color4_t,p: (int, int) = instance->OnMouseDown(t, c, p);,
                on_mouse_hold = \t: graphic::texture, c: color4_t,p: (int, int) = instance->OnMouseHold(t, c, p);,
                on_mouse_up = \t: graphic::texture, c: color4_t,p: (int, int) = instance->OnMouseUp(t, c, p);,
            };
        }
        func OnMouseDown(self: DrawToolT, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            return self.on_mouse_down(target, color, pos);
        }
        func OnMouseHold(self: DrawToolT, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            return self.on_mouse_hold(target, color, pos);
        }
        func OnMouseUp(self: DrawToolT, target: graphic::texture, color: color4_t, pos: (int, int))
        {
            return self.on_mouse_up(target, color, pos);
        }
    }

    let all_draw_tools = {
        ["无"] = \=DrawToolT::create("无", (): Nothing);,
        ["钢笔"] = \=DrawToolT::create("钢笔", (): Pen);,
    };

    func edittexture(images: array<(int, mut option<graphic::texture>)>, context: DrawContextT)
    {
        let open = BeginAttrOpen(F"绘制##{JobID()}", WindowsAttribute::ImGuiWindowFlags_MenuBar);

        if (BeginMenuBar())
        {
            if (BeginMenu("文件"))
            {
                if (MenuItem("画布尺寸"))
                    std::panic("TODO;");

                EndMenu();
            }

            EndMenuBar();
        }

        if (BeginTabBar("##draw_textures"))
        {
            for (let index, (passid, texture) : images)
            {
                let texture_path = texture->>\t=t->path->valor("<内置>");->valor("不存在");
                if (BeginTabItem(F"通道{passid}: {texture_path}"))
                {
                    // OK 在这里显示一下绘图工具箱
                    BeginGroup();
                    
                    if (ColorButton("##main_color", context.maincolor) )
                        OpenPopup("MainColorPicker");
                    SameLine();
                    if (ColorButton("##sub_color", context.subcolor) )
                        OpenPopup("SubColorPicker");

                    let mut enable_draw = !input::keydown(keycode::L_CTRL);
                    if (BeginPopup("MainColorPicker"))
                    {
                        enable_draw = false;
                        ColorPicker4("##main_color_picker", context.maincolor)
                            ->> \c = context.maincolor = c;;
                        EndPopup();
                    }
                    if (BeginPopup("SubColorPicker"))
                    {
                        enable_draw = false;
                        ColorPicker4("##sub_color_picker", context.subcolor)
                            ->> \c = context.subcolor = c;;
                        EndPopup();
                    }

                    Text(F"当前工具: \n {context.drawtool.name}");
                    for (let name, tool_create_method : all_draw_tools)
                    {
                        if (ButtonSize(name, (100., 0.)))
                            context.drawtool = tool_create_method();
                    }
                    EndGroup();

                    SameLine();

                    match (texture)
                    {
                    value(tex)?
                    {
                        let (tex_width, tex_height) = tex->size;
                        let drawlist = GetWindowDrawList();

                        let (avaliw, avalih) = GetContentRegionAvail();

                        InvisibleButton("##draw_space", (avaliw->\x=x<=100.?100.|x;, avalih->\x=x<=100.?100.|x;));
                        if (IsItemActive() || IsItemHovered())
                        {
                            if (input::keydown(keycode::L_CTRL) 
                                && IsMouseDragging(ImGuiMouseButton::ImGuiMouseButton_Left))
                            {
                                let (mousedelta_x, mousedelta_y) = GetMouseDeltaPos();
                                context.offset_x += mousedelta_x;
                                context.offset_y += mousedelta_y;
                            }
                            context.scale += _delta_wheel();

                            if (context.scale < 1.)
                                context.scale = 1.;
                        }
                        else if (!context.mousedown)
                            enable_draw = false;

                        let (p0, p1) = GetItemRect();
                        let (lux, luy) = p0;
                        let (rbx, rby) = p1;

                        PushClipRect(p0, p1);
                        drawlist->AddRectFilled(p0, p1, (75, 75, 75, 255));
                        drawlist->AddImage(
                            (lux + context.offset_x, luy + context.offset_y), 
                            (lux + context.scale * tex_width:real + context.offset_x, 
                            luy + context.scale * tex_height:real + context.offset_y), 
                            tex);
                        
                        // OK 如果缩放大于5，就顺手画一下网格
                        if (context.scale >= 5.)
                        {
                            for (let mut yoffset = 0.; yoffset <= tex_height:real * context.scale; yoffset += context.scale)
                                drawlist->AddLine(
                                    (lux + context.offset_x, luy + context.offset_y + yoffset), 
                                    (lux + context.offset_x + tex_width:real * context.scale, luy + context.offset_y + yoffset), 
                                    (0, 0, 0, 20));
                            for (let mut xoffset = 0.; xoffset <= tex_width:real * context.scale; xoffset += context.scale)
                                drawlist->AddLine(
                                    (lux + context.offset_x + xoffset, luy + context.offset_y), 
                                    (lux + context.offset_x + xoffset, luy + context.offset_y + tex_height:real * context.scale), 
                                    (0, 0, 0, 20));
                        }

                        // 获取鼠标所在的像素位置，高亮这一块儿
                        let (mposx, mposy) = GetMousePos();
                        let mpixx = ((mposx - lux - context.offset_x) / context.scale): int: real;
                        let mpixy = ((mposy - luy - context.offset_y) / context.scale): int: real;

                        if (mpixx >= 0. && mpixx < tex_width:real && mpixy >= 0. && mpixy < tex_height:real)
                        {
                            // Ok 鼠标指向的像素位置是合法的，高亮！
                            let highlight_p0 = (mpixx * context.scale + context.offset_x + lux, mpixy * context.scale + context.offset_y + luy);
                            let highlight_p1 = ((mpixx + 1.) * context.scale + context.offset_x + lux, (mpixy + 1.) * context.scale + context.offset_y + luy);
                            drawlist->AddRectFilled(highlight_p0, highlight_p1, (255, 255, 255, 100));
                        }

                        // 不过需要注意的是，引擎使用的像素坐标原点不是左上角，而是左下角，所以这里需要做一次简单变换
                        let mepixx = mpixx: int;
                        let mepixy = tex_height - 1 - mpixy: int;

                        if (input::keydown(keycode::MOUSE_M_BUTTION)
                            && mepixx >= 0 && mepixx < tex_width
                            && mepixy >= 0 && mepixy < tex_height)
                            context.maincolor = tex->pix((mepixx, mepixy))->get_color;

                        // 对接绘制工具，针对鼠标刚刚点下、按住、和松开分别回调
                        if (enable_draw)
                        {
                            let mut first_click = false;
                            if (context.mousedown == false)
                            {
                                first_click = true;
                                if (input::keydown(keycode::MOUSE_L_BUTTION))
                                    context.usecolor = context.maincolor;
                                else if (input::keydown(keycode::MOUSE_R_BUTTION))
                                    context.usecolor = context.subcolor;
                                else
                                    first_click = false;
                            }
                            if (input::keydown(keycode::MOUSE_L_BUTTION) || input::keydown(keycode::MOUSE_R_BUTTION))
                            {
                                // 图片被编辑过了，储存起来，窗口关闭时询问保存！
                                if (!context.edited_textures->find(tex))
                                    context.edited_textures->set(tex, nil);

                                context.mousedown = true;
                                if (first_click)
                                    context.drawtool->OnMouseDown(tex, context.usecolor, (mepixx, mepixy));
                                else
                                    context.drawtool->OnMouseHold(tex, context.usecolor, (mepixx, mepixy));
                            }
                            else
                            {
                                if (context.mousedown)
                                    context.drawtool->OnMouseUp(tex, context.usecolor, (mepixx, mepixy));
                                context.mousedown = false;
                            }
                        }

                        PopClipRect();
                    }
                    none?
                        Text("不存在对应通道的纹理");
                    }
                    

                    EndTabItem();
                }
            }
            EndTabBar();
        }
        End();

        if (open)
            return FormAction::Nothing;

        // 遍历所有被编辑过的图片，询问是否需要保存
        for (let edited_texture, _ : context.edited_textures)
        {
            alias float = real;
            
            launch(func(){
                let mut open = true;
                BeginAttr(F"是否需要保存##{JobID()}", WindowsAttribute::ImGuiWindowFlags_AlwaysAutoResize);
                {
                    Text(F"纹理:\n{edited_texture->path->valor("<内置>")}\n已经被编辑了，是否需要保存？");
                    let (avali_width, _) = GetContentRegionAvail();
                    if (ButtonSize("是，覆盖原图片", (avali_width: float, 0.)) )
                    {
                        if (je::filesys::externname(edited_texture->path->valor("<内置>"))->lower != "png")
                            msgbox("无法保存文件", 
                                F"仅支持保存png文件，原文件为{je::filesys::externname(edited_texture->path->valor("<内置>"))}");
                        else if (save_texture_to_path(edited_texture, edited_texture->path->valor("<内置>")))
                            open = false;
                    }
                    if (ButtonSize(F"另存为/Draw/{je::filesys::purename(edited_texture->path->valor("<内置>"))}.png", (avali_width: float, 0.)) )
                    {
                        let projpath = editor::Project::GetCurrentProject().path->val;

                        je::filesys::mkdir(F"{projpath}/Draw");

                        if (save_texture_to_path(edited_texture, F"{projpath}/Draw/{je::filesys::purename(edited_texture->path->valor("<内置>"))}.png"))
                            open = false;
                    }
                    if (ButtonSize("不保存此文件", (avali_width: float, 0.)) )
                        open = false;
                }
                End();

                if (!open)
                    return FormAction::Close;
                return FormAction::Nothing;            
            }, ());
        }

        return FormAction::Close;
    }

    public func drawedit(e: entity)
    {
        // 检查实体有没有纹理组件，然后遍历检查所有纹理是否都存在，有没有没有路径的问题
        // 如果发现不正常的纹理就给个提示

        if (!e->editor::get_component(typeinfo::load_from_name("Renderer::Textures")->val)->has)
        {
            msgbox("无法绘制当前实体", "当前实体不包含 Renderer::Textures 组件，无法绘制");
            return;
        }

        let textures = e->editor::graphic::get_textures();

        // 这个大大的傻逼代码作用是获取当前实体使用的所有纹理通道
        let used_texture_id_pass = e->editor::graphic::get_shaders()
            =>> \shader = shader->get_uniforms()
                    ->  unmapping
                    ->> \nv = nv[1];
                    =>> func(uniformval)
                        {
                            match (uniformval)
                            {
                            texture(id)?
                                return [id];
                            integer(_)?;
                            float(_)?;
                            float2(_)?;
                            float3(_)?;
                            float4(_)?;
                            others?;
                            }
                            return [];
                        }
            ;
            ->> \id = (id, nil);
            ->  mapping
            ->  unmapping // remove all repeated elems.
            ->> \idn = idn[0];
        ;

        if (used_texture_id_pass->empty)
        {
            msgbox("无法绘制当前实体", "当前实体不使用任何纹理，因此无法编辑");
            return;
        }

        // OK
        launch(edittexture, (
            used_texture_id_pass 
                ->> \id = (id, mut textures->get(id));,
            DrawContextT{
                scale = mut 10.,
                offset_x = mut 0.,
                offset_y = mut 0.,
                drawtool = mut all_draw_tools["无"](),

                mousedown = mut false,

                usecolor = mut (1., 1., 1., 1.),
                maincolor = mut (1., 1., 1., 1.),
                subcolor = mut (0., 0., 0., 0.),

                edited_textures = {}mut,
            }
        ));
    }
}
