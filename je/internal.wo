// Joyengine 4.x
import woo::std;
import je;

namespace je
{
    namespace woolang
    {
        extern("libjoyecs", "wojeapi_get_all_internal_scripts")
        public func get_all_internal_scripts()=> dict<string, string>;
    }
    namespace typeinfo
    {
        extern("libjoyecs", "wojeapi_typemgr_get_unregister_count")
        public func get_unregister_count()=> ::int;
    }
        
    namespace graphic
    {
        namespace texture
        {
            namespace internal
            {
                public using snapshot_t = gchandle;

                extern("libjoyecs", "wojeapi_texture_take_snapshot")
                public func snapshot(self: texture)=> option<snapshot_t>;

                extern("libjoyecs", "wojeapi_texture_restore_snapshot")
                public func restore_snapshot(self: texture, snapshot: snapshot_t)=> bool;
            }
        }
    }
    namespace world
    {
        namespace internal
        {
            extern("libjoyecs", "wojeapi_world_is_valid")
            public func is_valid(self: world)=> bool;
        }
    }
    namespace entity
    {
        namespace internal
        {
            public using euid_t = handle;

            extern("libjoyecs", "wojeapi_get_entity_uid")
            public func get_entity_uid(self: entity)=> option<euid_t>;

            extern("libjoyecs", "wojeapi_get_editing_entity_uid")
            public func get_editing_uid()=> option<euid_t>;

            extern("libjoyecs", "wojeapi_set_parent")
            public func set_parent(self: entity, parent: entity, force: bool)=> bool;

            extern("libjoyecs", "wojeapi_get_entity_anchor_uuid")
            public func get_anchor_uid(self: entity)=> option<string>;

            extern("libjoyecs", "wojeapi_set_parent_with_uid")
            public func set_parent_with_uid(self: entity, parent_uid: string, force: bool)=> bool;

            extern("libjoyecs", "wojeapi_get_parent_anchor_uid")
            public func get_parent_anchor_uid(self: entity)=> option<string>;

            extern("libjoyecs", "wojeapi_get_entity_name")
            public func name(self: entity)=> string;

            extern("libjoyecs", "wojeapi_set_entity_name")
            public func set_name(self: entity, name: string)=> void;

            extern("libjoyecs", "wojeapi_find_entity_with_chunk_info")
            public func find_entity_by_chunkinfo(chunkinfo: string)=> entity;

            extern("libjoyecs", "wojeapi_entity_get_prefab_path")
            public func get_prefab_path(self: entity)=> option<string>;

            extern("libjoyecs", "wojeapi_entity_set_prefab_path")
            public func set_prefab_path(self: entity, path: string)=> void;

            public func get_components(self: entity)
            {
                return self->get_components_types()
                    // If current entity died, we can still get types from chunk, but 
                    // failed to get component instance. Check here.
                    =>> \tid = comp->is_value ? [(tid, comp->unwrap)] | []
                        where comp = self->get_component(tid);
                    ->  mapping;
            }

            extern("libjoyecs", "wojeapi_get_all_components_types_from_entity")
            public func get_components_types(self: entity)=> array<typeinfo>;

            extern("libjoyecs", "wojeapi_is_top_entity")
            public func is_top(self: entity)=> bool;

            extern("libjoyecs", "wojeapi_is_child_of_entity")
            public func is_child_of(self: entity, parent: entity)=> bool;

            namespace graphic
            {
                // Used for reload specify shader; called when shader updated or moved;
                // RETURN TRUE MEANS OK
                extern("libjoyecs", "wojeapi_reload_shader_of_entity", slow)
                public func try_reload_shaders(self: entity, old_shad: string, new_shad: string)=> bool;

                extern("libjoyecs", "wojeapi_reload_texture_of_entity", slow)
                public func try_reload_textures(self: entity, old_tex: string, new_tex: string)=> bool;
            }

            using bad_shader_handle_t = handle;

            extern("libjoyecs", "wojeapi_get_bad_shader_list_of_entity")
                public func get_bad_shader_paths(e: entity)=> array<string>;

            extern("libjoyecs", "wojeapi_store_bad_shader_name")
                public func store_name_for_bad_shader_update(e: entity, shad_path: string)=> bad_shader_handle_t;

            extern("libjoyecs", "wojeapi_remove_bad_shader_name")
                public func remove_name_for_bad_shader_update(e: entity, shad_path: string)=> void;

            namespace bad_shader_handle_t
            {
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_int")
                func _set_uniform_int(shadhandle: bad_shader_handle_t, name: string, val: int)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_int2")
                func _set_uniform_int2(shadhandle: bad_shader_handle_t, name: string, x: int, y: int)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_int3")
                func _set_uniform_int3(shadhandle: bad_shader_handle_t, name: string, x: int, y: int, z: int)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_int4")
                func _set_uniform_int4(shadhandle: bad_shader_handle_t, name: string, x: int, y: int, z: int, w: int)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_float")
                func _set_uniform_float(shadhandle: bad_shader_handle_t, name: string, val: real)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_float2")
                func _set_uniform_float2(shadhandle: bad_shader_handle_t, name: string, x: real, y: real)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_float3")
                func _set_uniform_float3(shadhandle: bad_shader_handle_t, name: string, x: real, y: real, z: real)=> void;
                extern("libjoyecs", "wojeapi_store_bad_shader_uniforms_float4")
                func _set_uniform_float4(shadhandle: bad_shader_handle_t, name: string, x: real, y: real, z: real, w: real)=> void;

                public func store_uniform_dat_for_bad_shader_update<T>(shadhandle: bad_shader_handle_t, name: string, val: T)
                    where val is int
                        || val is (int, int)
                        || val is (int, int, int)
                        || val is (int, int, int, int)
                        || val is real
                        || val is (real, real)
                        || val is (real, real, real)
                        || val is (real, real, real, real);
                {
                    if (val is int)
                        _set_uniform_int(shadhandle, name, val);
                    else if (val is (int, int))
                        _set_uniform_int2(shadhandle, name, val...);
                    else if (val is (int, int, int))
                        _set_uniform_int3(shadhandle, name, val...);
                    else if (val is (int, int, int, int))
                        _set_uniform_int4(shadhandle, name, val...);
                    else if (val is real)
                        _set_uniform_float(shadhandle, name, val);
                    else if (val is (real, real))
                        _set_uniform_float2(shadhandle, name, val...);
                    else if (val is (real, real, real))
                        _set_uniform_float3(shadhandle, name, val...);
                    else if (val is (real, real, real, real))
                        _set_uniform_float4(shadhandle, name, val...);
                    else
                        std::panic("Here should not been exec.");
                }
            }
            public func set_editing_uid(id: option<euid_t>)
            {
                extern("libjoyecs", "wojeapi_set_editing_entity_uid")
                    public func _set_editing_entity(eid: euid_t)=> void;

                extern("libjoyecs", "wojeapi_reset_editing_entity_uid")
                    public func _reset_editing_entity()=> void;

                match(id)
                {
                value(e)? _set_editing_entity(e);
                none? _reset_editing_entity();
                }
            }
        }
    }
    namespace internal
    {
        extern("libjoyecs", "wojeapi_editor_register_panic_hook")
        public func register_panic_hook(f: (string, int, string, int, string, string)=> void)=> void;

        extern("libjoyecs", "wojeapi_mark_shared_glresource_outdated")
        public func mark_shared_glresource_outdated(respath: string)=> bool;

        extern("libjoyecs", "wojeapi_init_graphic_pipeline_for_editor")
        public func init_graphic_pipeline_for_editor(u: universe)=> void;

        extern("libjoyecs", "wojeapi_set_runtime_path")
        public func set_runtime_path(path: string)=> void;

        extern("libjoyecs", "wojeapi_input_update_window_size")
        public func set_window_size(x: int, y: int)=> void;

        extern("libjoyecs", "wojeapi_input_update_window_title")
        public func set_window_title(title: string)=> void;

        public using fimage_packer = handle
        {
            extern("libjoyecs", "wojeapi_create_fimg_packer")
            public func create(saving_path: string, max_img_size: int)=> fimage_packer;

            extern("libjoyecs", "wojeapi_pack_file_to_fimg_packer")
            public func pack(self: fimage_packer, file_path: string, pack_path: string)=> bool;

            extern("libjoyecs", "wojeapi_pack_buffer_to_fimg_packer")
            public func pack_buffer(self: fimage_packer, buffer: handle, len: int, pack_path: string)=> bool;

            extern("libjoyecs", "wojeapi_finish_fimg_packer")
            public func finish(self: fimage_packer)=> void;
        }

        extern("libjoyecs", "wojeapi_get_sleep_suppression")
        public func get_sleep_suppression()=> real;

        extern("libjoyecs", "wojeapi_set_sleep_suppression")
        public func set_sleep_suppression(tm: real)=> void;

        extern("libjoyecs", "wojeapi_build_version")
        public func build_version()=> string;

        extern("libjoyecs", "wojeapi_build_commit")
        public func build_commit()=> string;
    
        extern("libjoyecs", "wojeapi_woolang_version")
        public func woolang_version()=> string;

        extern("libjoyecs", "wojeapi_crc64_file")
        public func crc64file(file_path: string)=> option<int>;

        extern("libjoyecs", "wojeapi_crc64_string")
        public func crc64str(file_path: string)=> int;

        public enum loglevel
        {
            NORMAL = 0,
            INFO,
            WARNING,
            ERROR,
            FATAL,
        }

        extern("libjoyecs", "wojeapi_register_log_callback")
        public func hooklog()=> handle;

        extern("libjoyecs", "wojeapi_unregister_log_callback")
        public func unhooklog(i: handle)=> void;

        extern("libjoyecs", "wojeapi_get_all_logs")
        public func getlogs()=> array<(loglevel, string)>;

        extern("libjoyecs", "wojeapi_update_editor_mouse_pos")
        public func update_editor_mouse_pos(x: real, y: real)=> void;

        extern("libjoyecs", "wojeapi_setable_editor_system")
        public func enable_editor_system(able: bool)=> void;

        extern("libjoyecs", "wojeapi_apply_camera_framebuf_setting")
        public func apply_camera_framebuf_setting(camera: entity, width: int, height: int)=> void;

        extern("libjoyecs", "wojeapi_get_framebuf_texture")
        public func get_framebuf_texture(camera: entity, index: int)=> option<graphic::texture>;

        extern("libjoyecs", "wojeapi_get_entity_arch_information")
        public func get_entity_arch_information(e: entity)=> (int, int, int); // chunk_size, entity_size, entity_count

        public enum mover_mode
        {
            NOSPECIFY,
            SELECTION,
            MOVEMENT,
            ROTATION,
            SCALE,
        }
        extern("libjoyecs", "wojeapi_get_editing_mover_mode")
        public func get_editing_mover_mode(w: je::world)=> mover_mode;

        extern("libjoyecs", "wojeapi_set_editing_mover_mode")
        public func set_editing_mover_mode(w: je::world, m: mover_mode)=> void;

        public enum coord_mode
        {
            GLOBAL,
            LOCAL
        }
        extern("libjoyecs", "wojeapi_get_editing_coord_mode")
        public func get_editing_coord_mode(w: je::world)=> coord_mode;
        extern("libjoyecs", "wojeapi_set_editing_coord_mode")
        public func set_editing_coord_mode(w: je::world, a: coord_mode)=> void;

        public enum gizmo_mode
        {
            NONE                = 0,

            CAMERA              = 0b0000_0001,
            CAMERA_VISUAL_CONE  = 0b0000_0010,
            LIGHT2D             = 0b0000_0100,
            PHYSICS2D_COLLIDER  = 0b0000_1000,
            SELECTING_HIGHLIGHT = 0b0001_0000,

            ALL                 = 0x7FFFFFFF,
        };
        extern("libjoyecs", "wojeapi_get_editing_gizmo_mode")
        public func get_editing_gizmo_mode(w: je::world)=> gizmo_mode;
        extern("libjoyecs", "wojeapi_set_editing_gizmo_mode")
        public func set_editing_gizmo_mode(w: je::world, a: gizmo_mode)=> void;
    }
    namespace input::internal
    {
        extern("libjoyecs", "wojeapi_input_update_mouse_state")
        public func update_mouse_state(group: int, key: mousecode, down: bool)=> void;

        extern("libjoyecs", "wojeapi_input_update_wheel")
        public func update_wheel(group: int, x: real, y: real)=> void;

        extern("libjoyecs", "wojeapi_input_update_key_state")
        public func update_key_state(key: keycode, down: bool)=> void;
    }
}
