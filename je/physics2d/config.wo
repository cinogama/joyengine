// Joyengine 4.x
import woo::std;
import je;
import je::towoo;

namespace je::physics2d::config
{
    using CollideGroupInfo = struct{
        m_filter_components: vec<(je::typeinfo, CollideGroupInfo::Requirement)>,
        m_collide_mask: mut int,
        
        m_self_gid: int,
    }
    {
        public enum Requirement
        {
            CONTAINS,        // Must have spcify component
            MAYNOT,         // May have or not have
            ANYOF,          // Must have one of 'ANYOF' components
            EXCEPT,         // Must not contain spcify component
        }
        
        public let groups = []mut: vec<CollideGroupInfo>;
        
        public func create()
        {
            let self = CollideGroupInfo{
                m_filter_components = []mut,
                m_collide_mask = mut 0,
                m_self_gid = groups->len,
            };
            
            groups->add(self);
            return self;
        }
        public func add_filter_components(self: CollideGroupInfo, t: je::typeinfo, r: Requirement)
        {
            self.m_filter_components->add((t, r));
        }
        public func collide_each_other(a: CollideGroupInfo, b: CollideGroupInfo)
        {
            a.m_collide_mask = a.m_collide_mask->bor(1->bshl(b.m_self_gid));
            b.m_collide_mask = b.m_collide_mask->bor(1->bshl(a.m_self_gid));
        }
    }
}

#macro PHYSICS2D_GROUP
{
    /*
    PHYSICS2D_GROUP! GroupName
    {
    ComponentA,
    ComponentB,
    }
    */
    using std::token_type;
    
    let group_name = lexer->expect_token(l_identifier)->or("<Empty>");
    if (lexer->next != "{")
    {
        lexer->error("Unexpected token, should be '{'.");
        return "";
    }
    
    let types = []mut: vec<(string, string)>;
    
    parse_filter_components@
        for (;;)
        {
            let mut typename = "";
            let mut mode = option::none: option<string>;
            for (;;)
            {
                let token = lexer->next;
                if (token == ";")
                {
                    if (typename == "")
                    {
                        lexer->error("Unexpected '}', should be typename.");
                        return "";
                    }
                    
                    types->add((typename, mode->or("CONTAINS")));
                    typename = "";
                    break;
                }
                else if (token == "}")
                {
                    if (typename != "")
                    {
                        lexer->error("Unexpected '}', should be ';'.");
                        return "";
                    }
                    break parse_filter_components;
                }
                else if (token == "")
                {
                    lexer->error("Unexpected EOF.");
                    return "";
                }
                else if (token == "except")
                {
                    if (mode->is_value)
                    {
                        lexer->error(F"Duplicately marked attributes have been previously marked as `{mode->unwrap}`");
                        return "";
                    }
                    mode = option::value("EXCEPT");
                }
                else if (token == "contains")
                {
                    if (mode->is_value)
                    {
                        lexer->error(F"Duplicately marked attributes have been previously marked as `{mode->unwrap}`");
                        return "";
                    }
                    mode = option::value("CONTAINS");
                }
                else
                    typename += token;
            }
        }
        
    let mut result = F"let {group_name} = je::physics2d::config::CollideGroupInfo::create();";
    for (let (typename, mode) : types)
    {
        result += F"{group_name}->add_filter_components({
            typename}::type::typeinfo, je::physics2d::config::CollideGroupInfo::Requirement::{mode});";
    }
    return result;
}

#macro PHYSICS2D_COLLISIONS
{
    if (lexer->next != "{")
    {
        lexer->error("Unexpected token, should be '{'.");
        return "";
    }
    
    let mut groups = []mut: vec<vec<string>>;
    let mut group = []mut: vec<string>;
    let mut typename = "";
    
    for (;;)
    {
        let token = lexer->next;
        if (token == "")
        {
            lexer->error("Unexpected EOF.");
            return "";
        }
        else if (token == "}")
            break;
        else if (token == ",")
        {
            if (typename != "")
            {
                group->add(typename);
                typename = "";
            }
        }
        else if (token == ";")
        {
            if (typename != "")
            {
                group->add(typename);
                typename = "";
            }
            if (group->empty)
            {
                lexer->error("Unexpected ';'.");
                return "";
            }
            groups->add(group);
            group = []mut;
        }
        else
            typename += token;
    }
    
    let mut result = "";
    for (let group_list : groups)
    {
        let mut i = 0;
        for (let group_a : group_list)
        {
            let mut j = 0;
            for (let group_b : group_list)
            {
                j += 1;
                if (i == j - 1) continue;
                result += F"{group_a}->collide_each_other({group_b});";
                
            }
            i += 1;
        }
    }
    return result + "return je::physics2d::config::CollideGroupInfo::groups;";
}
