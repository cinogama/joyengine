import je::shader;

public let PI = float::const(3.1415926535897932384626);

SHADER_FUNCTION!
public func DistributionGGX(N: float3, H: float3, roughness: float)
{
    let a = roughness * roughness;
    let a2 = a * a;
    let NdotH = max(dot(N, H), float::zero);
    let NdotH2 = NdotH * NdotH;
    
    let nom = a2;
    let denom = NdotH2 * (a2 - float::one) + float::one;
    let pidenom2 = PI * denom * denom;

    return nom / pidenom2;
}

SHADER_FUNCTION!
public func GeometrySchlickGGX(NdotV: float, roughness: float)
{
    let r = roughness + float::one;
    let k = r * r / float::const(8.);
    
    let nom = NdotV;
    let denom = NdotV * (float::one - k) + k;

    return nom / denom;
}

SHADER_FUNCTION!
public func GeometrySmith(N: float3, V: float3, L: float3, roughness: float)
{
    let NdotV = max(dot(N, V), float::zero);
    let NdotL = max(dot(N, L), float::zero);

    let ggx1 = GeometrySchlickGGX(NdotL, roughness);
    let ggx2 = GeometrySchlickGGX(NdotV, roughness);

    return ggx1 * ggx2;
}

SHADER_FUNCTION!
public func FresnelSchlick(cosTheta: float, F0: float3)
{
    return F0 + (float3::one - F0) * pow(float::one - cosTheta, float::const(5.));
}
