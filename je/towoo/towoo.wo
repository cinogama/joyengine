// (C)Cinogama. 
import woo::std;

import je;
import je::towoo::types;
import je::towoo::components;

namespace je
{
    namespace towoo
    {
        using member<T, TInfo> = handle
        {
            public func get<T, TInfo>(self: member<T, TInfo>)=> T
            {
                extern("libjoyecs", "wojeapi_towoo_member_get")
                func member_get_impl<T, TInfo>(type: je::typeinfo, self: member<T, TInfo>)=> T;
            
                return member_get_impl(typeof:<TInfo>::typeinfo, self);
            }
        
            public func set<T, TInfo>(self: member<T, TInfo>, val: T)=> void
            {
                extern("libjoyecs", "wojeapi_towoo_member_set")
                func member_set_impl<T, TInfo>(type: je::typeinfo, self: member<T, TInfo>, val: T)=> void;

                member_set_impl(typeof:<TInfo>::typeinfo, self, val);
            }
        }
    }
    namespace entity::towoo
    {
        extern("libjoyecs", "wojeapi_towoo_add_component")
            private func _add_component<T>(self: entity, tid: je::typeinfo)=> option<T>;
        extern("libjoyecs", "wojeapi_towoo_get_component")
            private func _get_component<T>(self: entity, tid: je::typeinfo)=> option<T>;
        extern("libjoyecs", "wojeapi_towoo_remove_component")
            private func _remove_component<T>(self: entity, tid: je::typeinfo)=> void;

        public func add_component<T>(self: entity)=> option<T>
            where typeof:<T>::type::typeinfo is je::typeinfo;
        {
            return _add_component:<T>(self, typeof:<T>::type::typeinfo);
        }
        public func get_component<T>(self: entity)=> option<T>
            where typeof:<T>::type::typeinfo is je::typeinfo;
        {
            return _get_component:<T>(self, typeof:<T>::type::typeinfo);
        }
        public func remove_component<T>(self: entity)=> void
            where typeof:<T>::type::typeinfo is je::typeinfo;
        {
            _remove_component:<T>(self, typeof:<T>::type::typeinfo);
        }
    }
    namespace mathf
    {
        extern("libjoyecs", "wojeapi_towoo_math_sqrt")
            public func sqrt(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_sin")
            public func sin(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_cos")
            public func cos(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_tan")
            public func tan(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_asin")
            public func asin(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_acos")
            public func acos(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_atan")
            public func atan(v: real)=> real;

        extern("libjoyecs", "wojeapi_towoo_math_atan2")
            public func atan2(y: real, x: real)=> real;

        public func abs<T>(a: T)
            where a is int || a is real;
        {
            if (a < 0: T)
                return -a;
            return a;
        }

        public func sign(a: real)
        {
            if (a < 0.)
                return -1.;
            else if(a > 0.)
                return 1.;
            return 0.;
        }

        public func lerp<T>(a: T, b: T, deg: real)
            where typeid:<typeof(a * deg)> != 0;
        {
            return a * (1. - deg) + b * deg;
        }

        public func clamp<T>(a: T, min: T, max: T)
            where typeid:<typeof(a < a)> != 0;
        {
            if (a < min)
                return min;
            if (max < a)
                return max;
            return a;
        }

        public let PI = 3.14159265359;
        public let RAD2DEG = 180. / PI;
        public let DEG2RAD = PI / 180.;
    }
}

namespace vec2
{
    public func operator + (a: vec2, b: vec2)
    {
        return (a[0] + b[0], a[1] + b[1]): vec2;
    }
    public func operator - (a: vec2, b: vec2)
    {
        return (a[0] - b[0], a[1] - b[1]): vec2;
    }
    public func operator * (a: vec2, b)
        where b is vec2 || b is real;
    {
        if (b is vec2)
            return (a[0] * b[0], a[1] * b[1]): vec2;
        else
            return (a[0] * b, a[1] * b): vec2;
    }
    public func operator / (a: vec2, b)
        where b is vec2 || b is real;
    {
        if (b is vec2)
            return (a[0] / b[0], a[1] / b[1]): vec2;
        else
            return (a[0] / b, a[1] / b): vec2;
    }
    public func length(self: vec2)
    {
        let (x, y) = self;
        return je::mathf::sqrt(x*x + y*y);
    }
    public func unit(self: vec2)
    {
        let (x, y) = self;
        let length = self->length;
        if (length == 0.)
            return self;
        return (x / length, y / length): vec2;
    }
    public func dot(self: vec2, b: vec2)
    {
        return self[0] * b[0] + self[1] * b[1];
    }
}
namespace vec3
{
    public func operator + (a: vec3, b: vec3)
    {
        return (a[0] + b[0], a[1] + b[1], a[2] + b[2]): vec3;
    }
    public func operator - (a: vec3, b: vec3)
    {
        return (a[0] - b[0], a[1] - b[1], a[2] - b[2]): vec3;
    }
    public func operator * (a: vec3, b)
        where b is vec3 || b is real;
    {
        if (b is vec3)
            return (a[0] * b[0], a[1] * b[1], a[2] * b[2]): vec3;
        else
            return (a[0] * b, a[1] * b, a[2] * b): vec3;
    }
    public func operator / (a: vec3, b)
        where b is vec3 || b is real;
    {
        if (b is vec3)
            return (a[0] / b[0], a[1] / b[1], a[2] / b[2]): vec3;
        else
            return (a[0] / b, a[1] / b, a[2] / b): vec3;
    }

    public func length(self: vec3)
    {
        let (x, y, z) = self;
        return je::mathf::sqrt(x*x + y*y + z*z);
    }
    public func unit(self: vec3)
    {
        let (x, y, z) = self;
        let length = self->length;
        if (length == 0.)
            return self;
        return (x/length, y/length, z/length): vec3;
    }
    public func dot(self: vec3, b: vec3)
    {
        return self[0] * b[0] + self[1] * b[1] + self[2] * b[2];
    }
    public func cross(self: vec3, b: vec3)
    {
        return (
            self[1] * b[2] - self[2] * b[1],
            self[2] * b[0] - self[0] * b[2],
            self[0] * b[1] - self[1] * b[0]
        ): vec3;
    }
}
namespace vec4
{
    public func operator + (a: vec4, b: vec4)
    {
        return (a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]): vec4;
    }
    public func operator - (a: vec4, b: vec4)
    {
        return (a[0] - b[0], a[1] - b[1], a[2] - b[2], a[3] - b[3]): vec4;
    }
    public func operator * (a: vec4, b)
        where b is vec4 || b is real;
    {
        if (b is vec4)
            return (a[0] * b[0], a[1] * b[1], a[2] * b[2], a[3] * b[3]): vec4;
        else
            return (a[0] * b, a[1] * b, a[2] * b, a[3] * b): vec4;
    }
    public func operator / (a: vec4, b)
        where b is vec4 || b is real;
    {
        if (b is vec4)
            return (a[0] / b[0], a[1] / b[1], a[2] / b[2], a[3] / b[3]): vec4;
        else
            return (a[0] / b, a[1] / b, a[2] / b, a[3] / b): vec4;
    }

    public func length(self: vec4)
    {
        let (x, y, z, w) = self;
        return je::mathf::sqrt(x*x + y*y + z*z + w*w);
    }
    public func unit(self: vec4)
    {
        let (x, y, z, w) = self;
        let length = self->length;
        if (length == 0.)
            return self;
        return (x/length, y/length, z/length, w/length): vec4;
    }
    public func dot(self: vec4, b: vec4)
    {
        return self[0] * b[0] + self[1] * b[1] + self[2] * b[2] + self[3] * b[3];
    }
}
namespace ivec2
{
    public func operator + (a: ivec2, b: ivec2)
    {
        return (a[0] + b[0], a[1] + b[1]): ivec2;
    }
    public func operator - (a: ivec2, b: ivec2)
    {
        return (a[0] - b[0], a[1] - b[1]): ivec2;
    }
    public func operator * (a: ivec2, b)
        where b is ivec2 || b is int;
    {
        if (b is ivec2)
            return (a[0] * b[0], a[1] * b[1]): ivec2;
        else
            return (a[0] * b, a[1] * b): ivec2;
    }
    public func operator / (a: ivec2, b)
        where b is ivec2 || b is int;
    {
        if (b is ivec2)
            return (a[0] / b[0], a[1] / b[1]): ivec2;
        else
            return (a[0] / b, a[1] / b): ivec2;
    }
}
namespace quat
{
    public let ident = (0., 0., 0., 1.): quat;

    public func euler(yaw: real, pitch: real, roll: real)
    {
        let yangle = 0.5 * yaw * je::mathf::DEG2RAD;
        let pangle = 0.5 * pitch * je::mathf::DEG2RAD;
        let rangle = 0.5 * roll * je::mathf::DEG2RAD;

        let ysin = je::mathf::sin(yangle),
            ycos = je::mathf::cos(yangle),
            psin = je::mathf::sin(pangle),
            pcos = je::mathf::cos(pangle),
            rsin = je::mathf::sin(rangle),
            rcos = je::mathf::cos(rangle);

        let y = rcos * psin * ycos + rsin * pcos * ysin,
            x = rcos * pcos * ysin - rsin * psin * ycos,
            z = rsin * pcos * ycos - rcos * psin * ysin,
            w = rcos * pcos * ycos + rsin * psin * ysin;
        let mag = x*x + y*y + z*z + w*w;
        return (x/mag, y/mag, z/mag, w/mag): quat;
    }
    public func axis(a: vec3, ang: real)
    {
        let sv = je::mathf::sin(ang * 0.5 * je::mathf::DEG2RAD);
        let cv = je::mathf::cos(ang * 0.5 * je::mathf::DEG2RAD);
        return (a[0] * sv, a[1] * sv, a[2] * sv, cv): quat;
    }
    public func rotation(a: vec3, b: vec3)
    {
        let axi = b->cross(a);
        let angle = je::mathf::RAD2DEG * je::mathf::acos(b->dot(a) / (b->length * a->length));
        return axis(axi->unit, angle);
    }
    public func delta_angle(a: quat, b: quat)
    {
        let cos_theta = a->dot(b);
        if (cos_theta > 0.)
            return 2. * je::mathf::RAD2DEG * je::mathf::acos(cos_theta);
        else
            return -2. * je::mathf::RAD2DEG * je::mathf::acos(-cos_theta);
    }
    public func dot(self: quat, b: quat)
    {
        return self[0] * b[0] + self[1] * b[1] + self[2] * b[2] + self[3] * b[3];
    }
    public func inverse(self: quat)
    {
        return (-self[0], -self[1], -self[2], self[3]): quat;
    }
    public func euler_angle(self: quat)
    {
        let (x, y, z, w) = self;
        let yaw = je::mathf::atan2(2. * (w * x + z * y), 1. - 2. * (x * x + y * y));
        let pitch = je::mathf::asin(je::mathf::clamp(2. * (w * y - x * z), -1., 1.));
        let roll = je::mathf::atan2(2. * (w * z + x * y), 1. - 2. * (z * z + y * y));
        return (je::mathf::RAD2DEG * yaw, je::mathf::RAD2DEG * pitch, je::mathf::RAD2DEG * roll): vec3;
    }
    public func lerp(a: quat, b: quat, t: real)
    {
        return (
            je::mathf::lerp(a[0], b[0], t),
            je::mathf::lerp(a[1], b[1], t),
            je::mathf::lerp(a[2], b[2], t),
            je::mathf::lerp(a[3], b[3], t),
        ): quat;
    }
    
    extern("libjoyecs", "wojeapi_towoo_math_quat_slerp")
    public func slerp(a: quat, b: quat, t: real)=> quat;

    public func operator * (self: quat, b)
        where b is vec3 || b is quat;
    {
        if (b is vec3)
        {
            let w = self[3];
            let u = (self[0], self[1], self[2]): vec3;
            return u * (2. * u->dot(b))
                + b * (w * w - u->dot(u))
                + u->cross(b) * (2. * w);
        }
        else
        {
            let (x1, y1, z1, w1) = self;
            let (x2, y2, z2, w2) = b;
            
            let v1 = (x1, y1, z1): vec3;
            let v2 = (x2, y2, z2): vec3;

            let w3 = w1 * w2 - v1->dot(v2);
            let v3 = v1->cross(v2) + v2 * w1 + v1 * w2;
            return (v3[0], v3[1], v3[2], w3): quat;
        }
    }
}
namespace je::towoo
{
    using ray = gchandle
    {
        extern("libjoyecs", "wojeapi_towoo_ray_create")
        public func create(ori: vec3, dir: vec3)=> ray;

        extern("libjoyecs", "wojeapi_towoo_ray_from_camera")
        public func from(trans: Transform::Translation, proj: Camera::Projection, screen_pos: vec2, orth: bool)=> ray;

        extern("libjoyecs", "wojeapi_towoo_ray_intersect_entity")
        public func intersect(
            self: ray, 
            trans: Transform::Translation, 
            shap: option<Renderer::Shape>,
            consider_mesh: bool)=> option<vec3>;

        extern("libjoyecs", "wojeapi_towoo_ray_origin")
        public func origin(self: ray)=> vec3;

        extern("libjoyecs", "wojeapi_towoo_ray_direction")
        public func direction(self: ray)=> vec3;
    }
}
namespace Transform
{
    namespace Translation
    {
        extern("libjoyecs", "wojeapi_towoo_transform_translation_global_pos")
            public func get_global_pos(self: Translation)=> vec3;

        extern("libjoyecs", "wojeapi_towoo_transform_translation_global_rot")
            public func get_global_rot(self: Translation)=> quat;

        extern("libjoyecs", "wojeapi_towoo_transform_translation_parent_pos")
            public func get_parent_pos(self: Translation, lpos: option<LocalPosition>, lrot: option<LocalRotation>)=> vec3;
        extern("libjoyecs", "wojeapi_towoo_transform_translation_parent_rot")
            public func get_parent_rot(self: Translation, lrot: option<LocalRotation>)=> quat;

        extern("libjoyecs", "wojeapi_towoo_transform_translation_set_global_pos") 
            public func set_global_pos(self: Translation, pos: vec3, wlpos: option<LocalPosition>, lrot: option<LocalRotation>)=> void;
        extern("libjoyecs", "wojeapi_towoo_transform_translation_set_global_rot")
            public func set_global_rot(self: Translation, rot: quat, wlrot: option<LocalRotation>)=> void;
    }
}
namespace UserInterface
{
    namespace Origin
    {
        extern("libjoyecs", "wojeapi_towoo_userinterface_origin_layout")
            public func get_layout(self: Origin, display_range: vec2)=> (vec2, vec2, vec2);

        extern("libjoyecs", "wojeapi_towoo_userinterface_origin_mouse_on")
            public func mouse_on(self: Origin, display_range: vec2, angle: real, mouse_pos: vec2)=> bool;
    }
}
namespace Renderer
{
    namespace Textures
    {
        extern("libjoyecs", "wojeapi_towoo_renderer_textures_bind_texture")
            public func bind_texture(self: Textures, pass: int, text: je::graphic::texture)=> void;

        extern("libjoyecs", "wojeapi_towoo_renderer_textures_get_texture")
            public func get_texture(self: Textures, pass: int)=> option<je::graphic::texture>;
    }
    namespace Shaders
    {
        extern("libjoyecs", "wojeapi_towoo_renderer_shaders_set_uniform")
            public func set_uniform<T>(self: Shaders, name: string, val: T)=> void
                where val is int
                    || val is real
                    || val is vec2
                    || val is vec3
                    || val is vec4;
        extern("libjoyecs", "wojeapi_towoo_renderer_shaders_set_shaders")
            public func set_shaders(self: Shaders, shaders: array<je::graphic::shader>)=> void;
        
        extern("libjoyecs", "wojeapi_towoo_renderer_shaders_get_shaders")
            public func get_shaders(self: Shaders)=> array<je::graphic::shader>;
    }
}
namespace Physics2D
{
    namespace CollisionResult
    {
        using collide_result = struct{position: vec2, normalize: vec2};

        extern("libjoyecs", "wojeapi_towoo_physics2d_collisionresult_all")
            public func all(self: CollisionResult)=> dict<Rigidbody, collide_result>;

        extern("libjoyecs", "wojeapi_towoo_physics2d_collisionresult_check")
            public func check(self: CollisionResult, another: Rigidbody)=> option<collide_result>;
    }
}
namespace Animation
{
    namespace FrameAnimation
    {
        extern("libjoyecs", "wojeapi_towoo_animation_frameanimation_active_animation")
            public func active_action(self: FrameAnimation, animation_id: int, name: string, loop: bool)=> void;

        extern("libjoyecs", "wojeapi_towoo_animation_frameanimation_is_playing")
            public func is_playing(self: FrameAnimation, animation_id: int)=> bool;
    }
}
namespace Audio
{
    namespace Source
    {
        extern("libjoyecs", "wojeapi_towoo_audio_source_get_source")
            public func set_buffer(self: Source)=> je::audio::source;
    }
    namespace Playing
    {
        extern("libjoyecs", "wojeapi_towoo_audio_playing_set_buffer")
            public func set_buffer(self: Playing, buf: je::audio::buffer)=> void;
    }
}