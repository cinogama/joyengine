import woo::std;
import build::pkg::fsys;
import build::pkg::try;

using fsys;

let third_party_located_path = workpath() / "3rd";
let build_path = workpath() / "build";

func copy_all_licenses()
{
    try! third_party_path = subpath(third_party_located_path)
        ->> \paths = paths
            ->  forall(\path = isdir(path);)
            ;
        ;
    for (let _, _3rd_path : third_party_path)
    {
        try! subpath_of_3rd = allsubpath(_3rd_path);
        for (let _, p : subpath_of_3rd)
        {
            if (filename(p)->lower->find("license") != -1
                || filename(p)->lower->find("copying") != -1)
            {
                let relpath = p->tostring()->sub(third_party_located_path->tostring->len);

                let target_path = build_path / "licenses" / relpath;
                do mkdir(parent(target_path));
                do copy(p, target_path);
            }
        }
    }
    return result::ok(do nil);
}

func copy_opengles_emu_env_libs()
{
    let gles_env_path = third_party_located_path / "opengles_env_w64";
    let lib_filenames = [
        "libEGL.dll",
        "libGLESv2.dll",
        "libMaliEmulator.dll",
        "log4cplus.dll",
    ];
    do lib_filenames
        ->> \name = copy(gles_env_path / name, build_path);
        ;
    do mkdir(build_path / "openglessl");
    do copy(gles_env_path / "openglessl", build_path / "openglessl");
}

if (copy_all_licenses()->iserr)
    return -1;

copy_opengles_emu_env_libs();