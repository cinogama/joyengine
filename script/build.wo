import woo::std;

import pkg::fsys;
import pkg::try;
import pkg::iterator;
import pkg::regex;

using fsys;
using iterator;

let workpath = fsys::workpath();
let third_party_located_path = workpath / "3rd";
let build_path = workpath / "build";

func copy_all_licenses()
{
    try! third_party_paths = subpath(third_party_located_path);

    for (let _3rd_path : third_party_paths->iter |> filter(\path = isdir(path);))
    {
        try! subpath_of_3rd = allsubpath(_3rd_path);
        for (let p : subpath_of_3rd)
        {
            if (isfile(p) && (
                filename(p)->lower->find("license") != -1
                || filename(p)->lower->find("copying") != -1))
            {
                let relpath = p->tostring()->sub(third_party_located_path->tostring->len);

                let target_path = build_path / "licenses" / relpath;
                do mkdir(parent(target_path));
                do copy(p, target_path);

                std::println("copy license file: ", p->tostring());
            }
        }
    }
    return result::ok(do nil);
}

func copy_opengles_emu_env_libs()
{
    let gles_env_path = third_party_located_path / "opengles_env_w64";
    let lib_filenames = [
        "libEGL.dll",
        "libGLESv2.dll",
        "libMaliEmulator.dll",
        "log4cplus.dll",
    ];
    do lib_filenames
        ->> \name = copy(gles_env_path / name, build_path);
        ;
    do mkdir(build_path / "openglessl");
    do copy(gles_env_path / "openglessl", build_path / "openglessl");
}

func copy_pkgs()
{
    do mkdir(build_path / "pkg");
    do copy(workpath / "pkg", build_path / "pkg");
}

func generate_je_api_decls()
{
    let fs = []mut: vec<string>;

    let r = regex::create(@"extern\(\s*\".*?\"\s*,\s*\"(.*?)\""@);
    for (let path : walk(workpath / "src")->iterator::iter_result)
    {
        if (isfile(path))
        {
            for (let (_, group) : r->search(readall(path)->valor("")))
                fs->add(group[1]);
        }
    }

    let mut result = 
@"// THIS FILE IS AUTO GENERATED BY /script/build.wo

#define JE_IMPL
#define JE_ENABLE_DEBUG_API
#include "jeecs.hpp"

"@;
    for (let f : fs)
        result += F"WO_API wo_api {f}(wo_vm vm, wo_value args);\n";
    
    result += @"
void* _je_api_lib_handle = nullptr;

void je_api_init()
{
    assert(_je_api_lib_handle == nullptr);

    wo_extern_lib_func_t je_fs[] = {
"@;
    for (let f : fs)
        result += F"        wo_extern_lib_func_t\{\"{f}\", (void*)&{f}\},\n";

    result += 
@"      WO_EXTERN_LIB_FUNC_END,
    };
    _je_api_lib_handle = wo_register_lib("libjoyecs", je_fs);
}

void je_api_finish()
{
    assert(_je_api_lib_handle != nullptr);

    wo_unload_lib(_je_api_lib_handle);
    _je_api_lib_handle = nullptr;
}
"@;

    do writeall(workpath / "src" / "jeecs_woolang_extern_library.cpp", result);
}

copy_pkgs();
copy_opengles_emu_env_libs();
generate_je_api_decls();
if (copy_all_licenses()->iserr)
    return -1;