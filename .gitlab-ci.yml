build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script:
  #   - apt update && apt -y install make autoconf
  script:
    - git submodule update --init --recursive --force
    - if [ ! -d build ]; then mkdir build; fi
    - cd build
    - rm -f CMakeCache.txt
    - cmake ..
    - make
    - cd ..
  cache:
    when: on_success
    key: jeecs-build-release-$CI_COMMIT_REF_SLUG
    paths:
        - "build/*"
  tags:
    - ubuntu20

build_win64_release:
  stage: build
  script:
    - echo "%CI_COMMIT_SHA%" > src/jeecs_commit_msg.hpp
    - git submodule update --init --recursive --force
    - if not exist cmakebuild ( mkdir cmakebuild )
    - cd cmakebuild
    - del CMakeCache.txt
    - cmake ..
    - MSBuild jedriver.vcxproj -p:Configuration=RelWithDebInfo -m
    - cd ..
    - cd build
    - copy RelWithDebInfo\*
    - ..\3rd\rcedit-x64.exe jedriver.exe --set-icon builtin\icon\ICON.ico
    - cd ..
    - baozi install
  artifacts:
    name: jeecs-win32-release-$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
    paths:
      - build/*.dll
      - build/*.exe
      - build/*.pdb
      - build/pkg/*
      - build/builtin/*
  tags:
    - winserver22

# run tests using the binary built before
# test:
#   stage: test
#   script:
#     - ./runmytests.sh
